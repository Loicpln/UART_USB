
UART_USB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007f1c  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08008058  08008058  00018058  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080080d4  080080d4  0002017c  2**0
                  CONTENTS
  4 .ARM          00000008  080080d4  080080d4  000180d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080080dc  080080dc  0002017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080080dc  080080dc  000180dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080080e0  080080e0  000180e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000017c  20000000  080080e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a10  2000017c  08008260  0002017c  2**2
                  ALLOC
 10 ._user_heap_stack 00000504  20001b8c  08008260  00021b8c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e51e  00000000  00000000  000201a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b24  00000000  00000000  0002e6c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c20  00000000  00000000  000311e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b08  00000000  00000000  00031e08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000182a3  00000000  00000000  00032910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f628  00000000  00000000  0004abb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089227  00000000  00000000  0005a1db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e3402  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003030  00000000  00000000  000e3454  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	2000017c 	.word	0x2000017c
 8000158:	00000000 	.word	0x00000000
 800015c:	08008040 	.word	0x08008040

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000180 	.word	0x20000180
 8000178:	08008040 	.word	0x08008040

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295
 800018c:	f04f 30ff 	movne.w	r0, #4294967295
 8000190:	f000 b976 	b.w	8000480 <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9e08      	ldr	r6, [sp, #32]
 80001b2:	460d      	mov	r5, r1
 80001b4:	4604      	mov	r4, r0
 80001b6:	4688      	mov	r8, r1
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	d14d      	bne.n	8000258 <__udivmoddi4+0xac>
 80001bc:	428a      	cmp	r2, r1
 80001be:	4694      	mov	ip, r2
 80001c0:	d968      	bls.n	8000294 <__udivmoddi4+0xe8>
 80001c2:	fab2 f282 	clz	r2, r2
 80001c6:	b152      	cbz	r2, 80001de <__udivmoddi4+0x32>
 80001c8:	fa01 f302 	lsl.w	r3, r1, r2
 80001cc:	f1c2 0120 	rsb	r1, r2, #32
 80001d0:	fa20 f101 	lsr.w	r1, r0, r1
 80001d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80001d8:	ea41 0803 	orr.w	r8, r1, r3
 80001dc:	4094      	lsls	r4, r2
 80001de:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80001e2:	fbb8 f7f1 	udiv	r7, r8, r1
 80001e6:	fa1f fe8c 	uxth.w	lr, ip
 80001ea:	fb01 8817 	mls	r8, r1, r7, r8
 80001ee:	fb07 f00e 	mul.w	r0, r7, lr
 80001f2:	0c23      	lsrs	r3, r4, #16
 80001f4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80001f8:	4298      	cmp	r0, r3
 80001fa:	d90a      	bls.n	8000212 <__udivmoddi4+0x66>
 80001fc:	eb1c 0303 	adds.w	r3, ip, r3
 8000200:	f107 35ff 	add.w	r5, r7, #4294967295
 8000204:	f080 811e 	bcs.w	8000444 <__udivmoddi4+0x298>
 8000208:	4298      	cmp	r0, r3
 800020a:	f240 811b 	bls.w	8000444 <__udivmoddi4+0x298>
 800020e:	3f02      	subs	r7, #2
 8000210:	4463      	add	r3, ip
 8000212:	1a1b      	subs	r3, r3, r0
 8000214:	fbb3 f0f1 	udiv	r0, r3, r1
 8000218:	fb01 3310 	mls	r3, r1, r0, r3
 800021c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000220:	b2a4      	uxth	r4, r4
 8000222:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000226:	45a6      	cmp	lr, r4
 8000228:	d90a      	bls.n	8000240 <__udivmoddi4+0x94>
 800022a:	eb1c 0404 	adds.w	r4, ip, r4
 800022e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000232:	f080 8109 	bcs.w	8000448 <__udivmoddi4+0x29c>
 8000236:	45a6      	cmp	lr, r4
 8000238:	f240 8106 	bls.w	8000448 <__udivmoddi4+0x29c>
 800023c:	4464      	add	r4, ip
 800023e:	3802      	subs	r0, #2
 8000240:	2100      	movs	r1, #0
 8000242:	eba4 040e 	sub.w	r4, r4, lr
 8000246:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800024a:	b11e      	cbz	r6, 8000254 <__udivmoddi4+0xa8>
 800024c:	2300      	movs	r3, #0
 800024e:	40d4      	lsrs	r4, r2
 8000250:	e9c6 4300 	strd	r4, r3, [r6]
 8000254:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000258:	428b      	cmp	r3, r1
 800025a:	d908      	bls.n	800026e <__udivmoddi4+0xc2>
 800025c:	2e00      	cmp	r6, #0
 800025e:	f000 80ee 	beq.w	800043e <__udivmoddi4+0x292>
 8000262:	2100      	movs	r1, #0
 8000264:	e9c6 0500 	strd	r0, r5, [r6]
 8000268:	4608      	mov	r0, r1
 800026a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800026e:	fab3 f183 	clz	r1, r3
 8000272:	2900      	cmp	r1, #0
 8000274:	d14a      	bne.n	800030c <__udivmoddi4+0x160>
 8000276:	42ab      	cmp	r3, r5
 8000278:	d302      	bcc.n	8000280 <__udivmoddi4+0xd4>
 800027a:	4282      	cmp	r2, r0
 800027c:	f200 80fc 	bhi.w	8000478 <__udivmoddi4+0x2cc>
 8000280:	1a84      	subs	r4, r0, r2
 8000282:	eb65 0303 	sbc.w	r3, r5, r3
 8000286:	2001      	movs	r0, #1
 8000288:	4698      	mov	r8, r3
 800028a:	2e00      	cmp	r6, #0
 800028c:	d0e2      	beq.n	8000254 <__udivmoddi4+0xa8>
 800028e:	e9c6 4800 	strd	r4, r8, [r6]
 8000292:	e7df      	b.n	8000254 <__udivmoddi4+0xa8>
 8000294:	b902      	cbnz	r2, 8000298 <__udivmoddi4+0xec>
 8000296:	deff      	udf	#255	; 0xff
 8000298:	fab2 f282 	clz	r2, r2
 800029c:	2a00      	cmp	r2, #0
 800029e:	f040 8091 	bne.w	80003c4 <__udivmoddi4+0x218>
 80002a2:	eba1 000c 	sub.w	r0, r1, ip
 80002a6:	2101      	movs	r1, #1
 80002a8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ac:	fa1f fe8c 	uxth.w	lr, ip
 80002b0:	fbb0 f3f7 	udiv	r3, r0, r7
 80002b4:	fb07 0013 	mls	r0, r7, r3, r0
 80002b8:	0c25      	lsrs	r5, r4, #16
 80002ba:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80002be:	fb0e f003 	mul.w	r0, lr, r3
 80002c2:	42a8      	cmp	r0, r5
 80002c4:	d908      	bls.n	80002d8 <__udivmoddi4+0x12c>
 80002c6:	eb1c 0505 	adds.w	r5, ip, r5
 80002ca:	f103 38ff 	add.w	r8, r3, #4294967295
 80002ce:	d202      	bcs.n	80002d6 <__udivmoddi4+0x12a>
 80002d0:	42a8      	cmp	r0, r5
 80002d2:	f200 80ce 	bhi.w	8000472 <__udivmoddi4+0x2c6>
 80002d6:	4643      	mov	r3, r8
 80002d8:	1a2d      	subs	r5, r5, r0
 80002da:	fbb5 f0f7 	udiv	r0, r5, r7
 80002de:	fb07 5510 	mls	r5, r7, r0, r5
 80002e2:	fb0e fe00 	mul.w	lr, lr, r0
 80002e6:	b2a4      	uxth	r4, r4
 80002e8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002ec:	45a6      	cmp	lr, r4
 80002ee:	d908      	bls.n	8000302 <__udivmoddi4+0x156>
 80002f0:	eb1c 0404 	adds.w	r4, ip, r4
 80002f4:	f100 35ff 	add.w	r5, r0, #4294967295
 80002f8:	d202      	bcs.n	8000300 <__udivmoddi4+0x154>
 80002fa:	45a6      	cmp	lr, r4
 80002fc:	f200 80b6 	bhi.w	800046c <__udivmoddi4+0x2c0>
 8000300:	4628      	mov	r0, r5
 8000302:	eba4 040e 	sub.w	r4, r4, lr
 8000306:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800030a:	e79e      	b.n	800024a <__udivmoddi4+0x9e>
 800030c:	f1c1 0720 	rsb	r7, r1, #32
 8000310:	408b      	lsls	r3, r1
 8000312:	fa22 fc07 	lsr.w	ip, r2, r7
 8000316:	ea4c 0c03 	orr.w	ip, ip, r3
 800031a:	fa25 fa07 	lsr.w	sl, r5, r7
 800031e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000322:	fbba f8f9 	udiv	r8, sl, r9
 8000326:	fa20 f307 	lsr.w	r3, r0, r7
 800032a:	fb09 aa18 	mls	sl, r9, r8, sl
 800032e:	408d      	lsls	r5, r1
 8000330:	fa1f fe8c 	uxth.w	lr, ip
 8000334:	431d      	orrs	r5, r3
 8000336:	fa00 f301 	lsl.w	r3, r0, r1
 800033a:	fb08 f00e 	mul.w	r0, r8, lr
 800033e:	0c2c      	lsrs	r4, r5, #16
 8000340:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000344:	42a0      	cmp	r0, r4
 8000346:	fa02 f201 	lsl.w	r2, r2, r1
 800034a:	d90b      	bls.n	8000364 <__udivmoddi4+0x1b8>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f108 3aff 	add.w	sl, r8, #4294967295
 8000354:	f080 8088 	bcs.w	8000468 <__udivmoddi4+0x2bc>
 8000358:	42a0      	cmp	r0, r4
 800035a:	f240 8085 	bls.w	8000468 <__udivmoddi4+0x2bc>
 800035e:	f1a8 0802 	sub.w	r8, r8, #2
 8000362:	4464      	add	r4, ip
 8000364:	1a24      	subs	r4, r4, r0
 8000366:	fbb4 f0f9 	udiv	r0, r4, r9
 800036a:	fb09 4410 	mls	r4, r9, r0, r4
 800036e:	fb00 fe0e 	mul.w	lr, r0, lr
 8000372:	b2ad      	uxth	r5, r5
 8000374:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x1e2>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 35ff 	add.w	r5, r0, #4294967295
 8000384:	d26c      	bcs.n	8000460 <__udivmoddi4+0x2b4>
 8000386:	45a6      	cmp	lr, r4
 8000388:	d96a      	bls.n	8000460 <__udivmoddi4+0x2b4>
 800038a:	3802      	subs	r0, #2
 800038c:	4464      	add	r4, ip
 800038e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000392:	fba0 9502 	umull	r9, r5, r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	42ac      	cmp	r4, r5
 800039c:	46c8      	mov	r8, r9
 800039e:	46ae      	mov	lr, r5
 80003a0:	d356      	bcc.n	8000450 <__udivmoddi4+0x2a4>
 80003a2:	d053      	beq.n	800044c <__udivmoddi4+0x2a0>
 80003a4:	2e00      	cmp	r6, #0
 80003a6:	d069      	beq.n	800047c <__udivmoddi4+0x2d0>
 80003a8:	ebb3 0208 	subs.w	r2, r3, r8
 80003ac:	eb64 040e 	sbc.w	r4, r4, lr
 80003b0:	fa22 f301 	lsr.w	r3, r2, r1
 80003b4:	fa04 f707 	lsl.w	r7, r4, r7
 80003b8:	431f      	orrs	r7, r3
 80003ba:	40cc      	lsrs	r4, r1
 80003bc:	e9c6 7400 	strd	r7, r4, [r6]
 80003c0:	2100      	movs	r1, #0
 80003c2:	e747      	b.n	8000254 <__udivmoddi4+0xa8>
 80003c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003c8:	f1c2 0120 	rsb	r1, r2, #32
 80003cc:	fa25 f301 	lsr.w	r3, r5, r1
 80003d0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d4:	fa20 f101 	lsr.w	r1, r0, r1
 80003d8:	4095      	lsls	r5, r2
 80003da:	430d      	orrs	r5, r1
 80003dc:	fbb3 f1f7 	udiv	r1, r3, r7
 80003e0:	fb07 3311 	mls	r3, r7, r1, r3
 80003e4:	fa1f fe8c 	uxth.w	lr, ip
 80003e8:	0c28      	lsrs	r0, r5, #16
 80003ea:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ee:	fb01 f30e 	mul.w	r3, r1, lr
 80003f2:	4283      	cmp	r3, r0
 80003f4:	fa04 f402 	lsl.w	r4, r4, r2
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x260>
 80003fa:	eb1c 0000 	adds.w	r0, ip, r0
 80003fe:	f101 38ff 	add.w	r8, r1, #4294967295
 8000402:	d22f      	bcs.n	8000464 <__udivmoddi4+0x2b8>
 8000404:	4283      	cmp	r3, r0
 8000406:	d92d      	bls.n	8000464 <__udivmoddi4+0x2b8>
 8000408:	3902      	subs	r1, #2
 800040a:	4460      	add	r0, ip
 800040c:	1ac0      	subs	r0, r0, r3
 800040e:	fbb0 f3f7 	udiv	r3, r0, r7
 8000412:	fb07 0013 	mls	r0, r7, r3, r0
 8000416:	b2ad      	uxth	r5, r5
 8000418:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800041c:	fb03 f00e 	mul.w	r0, r3, lr
 8000420:	42a8      	cmp	r0, r5
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x28a>
 8000424:	eb1c 0505 	adds.w	r5, ip, r5
 8000428:	f103 38ff 	add.w	r8, r3, #4294967295
 800042c:	d216      	bcs.n	800045c <__udivmoddi4+0x2b0>
 800042e:	42a8      	cmp	r0, r5
 8000430:	d914      	bls.n	800045c <__udivmoddi4+0x2b0>
 8000432:	3b02      	subs	r3, #2
 8000434:	4465      	add	r5, ip
 8000436:	1a28      	subs	r0, r5, r0
 8000438:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800043c:	e738      	b.n	80002b0 <__udivmoddi4+0x104>
 800043e:	4631      	mov	r1, r6
 8000440:	4630      	mov	r0, r6
 8000442:	e707      	b.n	8000254 <__udivmoddi4+0xa8>
 8000444:	462f      	mov	r7, r5
 8000446:	e6e4      	b.n	8000212 <__udivmoddi4+0x66>
 8000448:	4618      	mov	r0, r3
 800044a:	e6f9      	b.n	8000240 <__udivmoddi4+0x94>
 800044c:	454b      	cmp	r3, r9
 800044e:	d2a9      	bcs.n	80003a4 <__udivmoddi4+0x1f8>
 8000450:	ebb9 0802 	subs.w	r8, r9, r2
 8000454:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000458:	3801      	subs	r0, #1
 800045a:	e7a3      	b.n	80003a4 <__udivmoddi4+0x1f8>
 800045c:	4643      	mov	r3, r8
 800045e:	e7ea      	b.n	8000436 <__udivmoddi4+0x28a>
 8000460:	4628      	mov	r0, r5
 8000462:	e794      	b.n	800038e <__udivmoddi4+0x1e2>
 8000464:	4641      	mov	r1, r8
 8000466:	e7d1      	b.n	800040c <__udivmoddi4+0x260>
 8000468:	46d0      	mov	r8, sl
 800046a:	e77b      	b.n	8000364 <__udivmoddi4+0x1b8>
 800046c:	4464      	add	r4, ip
 800046e:	3802      	subs	r0, #2
 8000470:	e747      	b.n	8000302 <__udivmoddi4+0x156>
 8000472:	3b02      	subs	r3, #2
 8000474:	4465      	add	r5, ip
 8000476:	e72f      	b.n	80002d8 <__udivmoddi4+0x12c>
 8000478:	4608      	mov	r0, r1
 800047a:	e706      	b.n	800028a <__udivmoddi4+0xde>
 800047c:	4631      	mov	r1, r6
 800047e:	e6e9      	b.n	8000254 <__udivmoddi4+0xa8>

08000480 <__aeabi_idiv0>:
 8000480:	4770      	bx	lr
 8000482:	bf00      	nop

08000484 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000484:	b590      	push	{r4, r7, lr}
 8000486:	b085      	sub	sp, #20
 8000488:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800048a:	f000 f9cc 	bl	8000826 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800048e:	f000 f817 	bl	80004c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000492:	f000 f88b 	bl	80005ac <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000496:	f000 f85f 	bl	8000558 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 800049a:	f007 f8f5 	bl	8007688 <MX_USB_DEVICE_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  uint8_t buffer[] = "Hello, World!\r\n";
 800049e:	4b07      	ldr	r3, [pc, #28]	; (80004bc <main+0x38>)
 80004a0:	463c      	mov	r4, r7
 80004a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80004a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	  CDC_Transmit_FS(buffer, sizeof(buffer));
 80004a8:	463b      	mov	r3, r7
 80004aa:	2110      	movs	r1, #16
 80004ac:	4618      	mov	r0, r3
 80004ae:	f007 f9a9 	bl	8007804 <CDC_Transmit_FS>
	  HAL_Delay(1000);
 80004b2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004b6:	f000 fa25 	bl	8000904 <HAL_Delay>
  {
 80004ba:	e7f0      	b.n	800049e <main+0x1a>
 80004bc:	08008058 	.word	0x08008058

080004c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b092      	sub	sp, #72	; 0x48
 80004c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004c6:	f107 0314 	add.w	r3, r7, #20
 80004ca:	2234      	movs	r2, #52	; 0x34
 80004cc:	2100      	movs	r1, #0
 80004ce:	4618      	mov	r0, r3
 80004d0:	f007 fdae 	bl	8008030 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004d4:	463b      	mov	r3, r7
 80004d6:	2200      	movs	r2, #0
 80004d8:	601a      	str	r2, [r3, #0]
 80004da:	605a      	str	r2, [r3, #4]
 80004dc:	609a      	str	r2, [r3, #8]
 80004de:	60da      	str	r2, [r3, #12]
 80004e0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80004e2:	4b1c      	ldr	r3, [pc, #112]	; (8000554 <SystemClock_Config+0x94>)
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 80004ea:	4a1a      	ldr	r2, [pc, #104]	; (8000554 <SystemClock_Config+0x94>)
 80004ec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80004f0:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80004f2:	2301      	movs	r3, #1
 80004f4:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80004f6:	2305      	movs	r3, #5
 80004f8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004fa:	2302      	movs	r3, #2
 80004fc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80004fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000502:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000504:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000508:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 800050a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800050e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000510:	f107 0314 	add.w	r3, r7, #20
 8000514:	4618      	mov	r0, r3
 8000516:	f002 f8f9 	bl	800270c <HAL_RCC_OscConfig>
 800051a:	4603      	mov	r3, r0
 800051c:	2b00      	cmp	r3, #0
 800051e:	d001      	beq.n	8000524 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8000520:	f000 f8aa 	bl	8000678 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000524:	230f      	movs	r3, #15
 8000526:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000528:	2303      	movs	r3, #3
 800052a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800052c:	2300      	movs	r3, #0
 800052e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000530:	2300      	movs	r3, #0
 8000532:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000534:	2300      	movs	r3, #0
 8000536:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000538:	463b      	mov	r3, r7
 800053a:	2101      	movs	r1, #1
 800053c:	4618      	mov	r0, r3
 800053e:	f002 fc15 	bl	8002d6c <HAL_RCC_ClockConfig>
 8000542:	4603      	mov	r3, r0
 8000544:	2b00      	cmp	r3, #0
 8000546:	d001      	beq.n	800054c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000548:	f000 f896 	bl	8000678 <Error_Handler>
  }
}
 800054c:	bf00      	nop
 800054e:	3748      	adds	r7, #72	; 0x48
 8000550:	46bd      	mov	sp, r7
 8000552:	bd80      	pop	{r7, pc}
 8000554:	40007000 	.word	0x40007000

08000558 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800055c:	4b11      	ldr	r3, [pc, #68]	; (80005a4 <MX_USART2_UART_Init+0x4c>)
 800055e:	4a12      	ldr	r2, [pc, #72]	; (80005a8 <MX_USART2_UART_Init+0x50>)
 8000560:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000562:	4b10      	ldr	r3, [pc, #64]	; (80005a4 <MX_USART2_UART_Init+0x4c>)
 8000564:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000568:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800056a:	4b0e      	ldr	r3, [pc, #56]	; (80005a4 <MX_USART2_UART_Init+0x4c>)
 800056c:	2200      	movs	r2, #0
 800056e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000570:	4b0c      	ldr	r3, [pc, #48]	; (80005a4 <MX_USART2_UART_Init+0x4c>)
 8000572:	2200      	movs	r2, #0
 8000574:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000576:	4b0b      	ldr	r3, [pc, #44]	; (80005a4 <MX_USART2_UART_Init+0x4c>)
 8000578:	2200      	movs	r2, #0
 800057a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800057c:	4b09      	ldr	r3, [pc, #36]	; (80005a4 <MX_USART2_UART_Init+0x4c>)
 800057e:	220c      	movs	r2, #12
 8000580:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000582:	4b08      	ldr	r3, [pc, #32]	; (80005a4 <MX_USART2_UART_Init+0x4c>)
 8000584:	2200      	movs	r2, #0
 8000586:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000588:	4b06      	ldr	r3, [pc, #24]	; (80005a4 <MX_USART2_UART_Init+0x4c>)
 800058a:	2200      	movs	r2, #0
 800058c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800058e:	4805      	ldr	r0, [pc, #20]	; (80005a4 <MX_USART2_UART_Init+0x4c>)
 8000590:	f002 feb2 	bl	80032f8 <HAL_UART_Init>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d001      	beq.n	800059e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800059a:	f000 f86d 	bl	8000678 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800059e:	bf00      	nop
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	20000198 	.word	0x20000198
 80005a8:	40004400 	.word	0x40004400

080005ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b08a      	sub	sp, #40	; 0x28
 80005b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b2:	f107 0314 	add.w	r3, r7, #20
 80005b6:	2200      	movs	r2, #0
 80005b8:	601a      	str	r2, [r3, #0]
 80005ba:	605a      	str	r2, [r3, #4]
 80005bc:	609a      	str	r2, [r3, #8]
 80005be:	60da      	str	r2, [r3, #12]
 80005c0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005c2:	4b2a      	ldr	r3, [pc, #168]	; (800066c <MX_GPIO_Init+0xc0>)
 80005c4:	69db      	ldr	r3, [r3, #28]
 80005c6:	4a29      	ldr	r2, [pc, #164]	; (800066c <MX_GPIO_Init+0xc0>)
 80005c8:	f043 0304 	orr.w	r3, r3, #4
 80005cc:	61d3      	str	r3, [r2, #28]
 80005ce:	4b27      	ldr	r3, [pc, #156]	; (800066c <MX_GPIO_Init+0xc0>)
 80005d0:	69db      	ldr	r3, [r3, #28]
 80005d2:	f003 0304 	and.w	r3, r3, #4
 80005d6:	613b      	str	r3, [r7, #16]
 80005d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005da:	4b24      	ldr	r3, [pc, #144]	; (800066c <MX_GPIO_Init+0xc0>)
 80005dc:	69db      	ldr	r3, [r3, #28]
 80005de:	4a23      	ldr	r2, [pc, #140]	; (800066c <MX_GPIO_Init+0xc0>)
 80005e0:	f043 0320 	orr.w	r3, r3, #32
 80005e4:	61d3      	str	r3, [r2, #28]
 80005e6:	4b21      	ldr	r3, [pc, #132]	; (800066c <MX_GPIO_Init+0xc0>)
 80005e8:	69db      	ldr	r3, [r3, #28]
 80005ea:	f003 0320 	and.w	r3, r3, #32
 80005ee:	60fb      	str	r3, [r7, #12]
 80005f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005f2:	4b1e      	ldr	r3, [pc, #120]	; (800066c <MX_GPIO_Init+0xc0>)
 80005f4:	69db      	ldr	r3, [r3, #28]
 80005f6:	4a1d      	ldr	r2, [pc, #116]	; (800066c <MX_GPIO_Init+0xc0>)
 80005f8:	f043 0301 	orr.w	r3, r3, #1
 80005fc:	61d3      	str	r3, [r2, #28]
 80005fe:	4b1b      	ldr	r3, [pc, #108]	; (800066c <MX_GPIO_Init+0xc0>)
 8000600:	69db      	ldr	r3, [r3, #28]
 8000602:	f003 0301 	and.w	r3, r3, #1
 8000606:	60bb      	str	r3, [r7, #8]
 8000608:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800060a:	4b18      	ldr	r3, [pc, #96]	; (800066c <MX_GPIO_Init+0xc0>)
 800060c:	69db      	ldr	r3, [r3, #28]
 800060e:	4a17      	ldr	r2, [pc, #92]	; (800066c <MX_GPIO_Init+0xc0>)
 8000610:	f043 0302 	orr.w	r3, r3, #2
 8000614:	61d3      	str	r3, [r2, #28]
 8000616:	4b15      	ldr	r3, [pc, #84]	; (800066c <MX_GPIO_Init+0xc0>)
 8000618:	69db      	ldr	r3, [r3, #28]
 800061a:	f003 0302 	and.w	r3, r3, #2
 800061e:	607b      	str	r3, [r7, #4]
 8000620:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000622:	2200      	movs	r2, #0
 8000624:	2120      	movs	r1, #32
 8000626:	4812      	ldr	r0, [pc, #72]	; (8000670 <MX_GPIO_Init+0xc4>)
 8000628:	f000 fc2c 	bl	8000e84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800062c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000630:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000632:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000636:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000638:	2300      	movs	r3, #0
 800063a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800063c:	f107 0314 	add.w	r3, r7, #20
 8000640:	4619      	mov	r1, r3
 8000642:	480c      	ldr	r0, [pc, #48]	; (8000674 <MX_GPIO_Init+0xc8>)
 8000644:	f000 fa8e 	bl	8000b64 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000648:	2320      	movs	r3, #32
 800064a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800064c:	2301      	movs	r3, #1
 800064e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000650:	2300      	movs	r3, #0
 8000652:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000654:	2300      	movs	r3, #0
 8000656:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000658:	f107 0314 	add.w	r3, r7, #20
 800065c:	4619      	mov	r1, r3
 800065e:	4804      	ldr	r0, [pc, #16]	; (8000670 <MX_GPIO_Init+0xc4>)
 8000660:	f000 fa80 	bl	8000b64 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000664:	bf00      	nop
 8000666:	3728      	adds	r7, #40	; 0x28
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}
 800066c:	40023800 	.word	0x40023800
 8000670:	40020000 	.word	0x40020000
 8000674:	40020800 	.word	0x40020800

08000678 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800067c:	b672      	cpsid	i
}
 800067e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000680:	e7fe      	b.n	8000680 <Error_Handler+0x8>
	...

08000684 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b084      	sub	sp, #16
 8000688:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 800068a:	4b15      	ldr	r3, [pc, #84]	; (80006e0 <HAL_MspInit+0x5c>)
 800068c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800068e:	4a14      	ldr	r2, [pc, #80]	; (80006e0 <HAL_MspInit+0x5c>)
 8000690:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000694:	6253      	str	r3, [r2, #36]	; 0x24
 8000696:	4b12      	ldr	r3, [pc, #72]	; (80006e0 <HAL_MspInit+0x5c>)
 8000698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800069a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800069e:	60fb      	str	r3, [r7, #12]
 80006a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006a2:	4b0f      	ldr	r3, [pc, #60]	; (80006e0 <HAL_MspInit+0x5c>)
 80006a4:	6a1b      	ldr	r3, [r3, #32]
 80006a6:	4a0e      	ldr	r2, [pc, #56]	; (80006e0 <HAL_MspInit+0x5c>)
 80006a8:	f043 0301 	orr.w	r3, r3, #1
 80006ac:	6213      	str	r3, [r2, #32]
 80006ae:	4b0c      	ldr	r3, [pc, #48]	; (80006e0 <HAL_MspInit+0x5c>)
 80006b0:	6a1b      	ldr	r3, [r3, #32]
 80006b2:	f003 0301 	and.w	r3, r3, #1
 80006b6:	60bb      	str	r3, [r7, #8]
 80006b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ba:	4b09      	ldr	r3, [pc, #36]	; (80006e0 <HAL_MspInit+0x5c>)
 80006bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006be:	4a08      	ldr	r2, [pc, #32]	; (80006e0 <HAL_MspInit+0x5c>)
 80006c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006c4:	6253      	str	r3, [r2, #36]	; 0x24
 80006c6:	4b06      	ldr	r3, [pc, #24]	; (80006e0 <HAL_MspInit+0x5c>)
 80006c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006ce:	607b      	str	r3, [r7, #4]
 80006d0:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80006d2:	2007      	movs	r0, #7
 80006d4:	f000 fa04 	bl	8000ae0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006d8:	bf00      	nop
 80006da:	3710      	adds	r7, #16
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	40023800 	.word	0x40023800

080006e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b08a      	sub	sp, #40	; 0x28
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ec:	f107 0314 	add.w	r3, r7, #20
 80006f0:	2200      	movs	r2, #0
 80006f2:	601a      	str	r2, [r3, #0]
 80006f4:	605a      	str	r2, [r3, #4]
 80006f6:	609a      	str	r2, [r3, #8]
 80006f8:	60da      	str	r2, [r3, #12]
 80006fa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	4a17      	ldr	r2, [pc, #92]	; (8000760 <HAL_UART_MspInit+0x7c>)
 8000702:	4293      	cmp	r3, r2
 8000704:	d127      	bne.n	8000756 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000706:	4b17      	ldr	r3, [pc, #92]	; (8000764 <HAL_UART_MspInit+0x80>)
 8000708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800070a:	4a16      	ldr	r2, [pc, #88]	; (8000764 <HAL_UART_MspInit+0x80>)
 800070c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000710:	6253      	str	r3, [r2, #36]	; 0x24
 8000712:	4b14      	ldr	r3, [pc, #80]	; (8000764 <HAL_UART_MspInit+0x80>)
 8000714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000716:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800071a:	613b      	str	r3, [r7, #16]
 800071c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800071e:	4b11      	ldr	r3, [pc, #68]	; (8000764 <HAL_UART_MspInit+0x80>)
 8000720:	69db      	ldr	r3, [r3, #28]
 8000722:	4a10      	ldr	r2, [pc, #64]	; (8000764 <HAL_UART_MspInit+0x80>)
 8000724:	f043 0301 	orr.w	r3, r3, #1
 8000728:	61d3      	str	r3, [r2, #28]
 800072a:	4b0e      	ldr	r3, [pc, #56]	; (8000764 <HAL_UART_MspInit+0x80>)
 800072c:	69db      	ldr	r3, [r3, #28]
 800072e:	f003 0301 	and.w	r3, r3, #1
 8000732:	60fb      	str	r3, [r7, #12]
 8000734:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000736:	230c      	movs	r3, #12
 8000738:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800073a:	2302      	movs	r3, #2
 800073c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073e:	2300      	movs	r3, #0
 8000740:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000742:	2303      	movs	r3, #3
 8000744:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000746:	2307      	movs	r3, #7
 8000748:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800074a:	f107 0314 	add.w	r3, r7, #20
 800074e:	4619      	mov	r1, r3
 8000750:	4805      	ldr	r0, [pc, #20]	; (8000768 <HAL_UART_MspInit+0x84>)
 8000752:	f000 fa07 	bl	8000b64 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000756:	bf00      	nop
 8000758:	3728      	adds	r7, #40	; 0x28
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	40004400 	.word	0x40004400
 8000764:	40023800 	.word	0x40023800
 8000768:	40020000 	.word	0x40020000

0800076c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000770:	e7fe      	b.n	8000770 <NMI_Handler+0x4>

08000772 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000772:	b480      	push	{r7}
 8000774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000776:	e7fe      	b.n	8000776 <HardFault_Handler+0x4>

08000778 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800077c:	e7fe      	b.n	800077c <MemManage_Handler+0x4>

0800077e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800077e:	b480      	push	{r7}
 8000780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000782:	e7fe      	b.n	8000782 <BusFault_Handler+0x4>

08000784 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000788:	e7fe      	b.n	8000788 <UsageFault_Handler+0x4>

0800078a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800078a:	b480      	push	{r7}
 800078c:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800078e:	bf00      	nop
 8000790:	46bd      	mov	sp, r7
 8000792:	bc80      	pop	{r7}
 8000794:	4770      	bx	lr

08000796 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000796:	b480      	push	{r7}
 8000798:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800079a:	bf00      	nop
 800079c:	46bd      	mov	sp, r7
 800079e:	bc80      	pop	{r7}
 80007a0:	4770      	bx	lr

080007a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007a2:	b480      	push	{r7}
 80007a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007a6:	bf00      	nop
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bc80      	pop	{r7}
 80007ac:	4770      	bx	lr

080007ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007ae:	b580      	push	{r7, lr}
 80007b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007b2:	f000 f88b 	bl	80008cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007b6:	bf00      	nop
 80007b8:	bd80      	pop	{r7, pc}
	...

080007bc <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt.
  */
void USB_LP_IRQHandler(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80007c0:	4802      	ldr	r0, [pc, #8]	; (80007cc <USB_LP_IRQHandler+0x10>)
 80007c2:	f000 fc7b 	bl	80010bc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 80007c6:	bf00      	nop
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	20001680 	.word	0x20001680

080007d0 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007d4:	bf00      	nop
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bc80      	pop	{r7}
 80007da:	4770      	bx	lr

080007dc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007dc:	480c      	ldr	r0, [pc, #48]	; (8000810 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80007de:	490d      	ldr	r1, [pc, #52]	; (8000814 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80007e0:	4a0d      	ldr	r2, [pc, #52]	; (8000818 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80007e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007e4:	e002      	b.n	80007ec <LoopCopyDataInit>

080007e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007ea:	3304      	adds	r3, #4

080007ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007f0:	d3f9      	bcc.n	80007e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007f2:	4a0a      	ldr	r2, [pc, #40]	; (800081c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80007f4:	4c0a      	ldr	r4, [pc, #40]	; (8000820 <LoopFillZerobss+0x22>)
  movs r3, #0
 80007f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007f8:	e001      	b.n	80007fe <LoopFillZerobss>

080007fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007fc:	3204      	adds	r2, #4

080007fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000800:	d3fb      	bcc.n	80007fa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000802:	f7ff ffe5 	bl	80007d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000806:	f007 fbef 	bl	8007fe8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800080a:	f7ff fe3b 	bl	8000484 <main>
  bx lr
 800080e:	4770      	bx	lr
  ldr r0, =_sdata
 8000810:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000814:	2000017c 	.word	0x2000017c
  ldr r2, =_sidata
 8000818:	080080e4 	.word	0x080080e4
  ldr r2, =_sbss
 800081c:	2000017c 	.word	0x2000017c
  ldr r4, =_ebss
 8000820:	20001b8c 	.word	0x20001b8c

08000824 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000824:	e7fe      	b.n	8000824 <ADC1_IRQHandler>

08000826 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000826:	b580      	push	{r7, lr}
 8000828:	b082      	sub	sp, #8
 800082a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800082c:	2300      	movs	r3, #0
 800082e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000830:	2003      	movs	r0, #3
 8000832:	f000 f955 	bl	8000ae0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000836:	2000      	movs	r0, #0
 8000838:	f000 f80e 	bl	8000858 <HAL_InitTick>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d002      	beq.n	8000848 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000842:	2301      	movs	r3, #1
 8000844:	71fb      	strb	r3, [r7, #7]
 8000846:	e001      	b.n	800084c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000848:	f7ff ff1c 	bl	8000684 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800084c:	79fb      	ldrb	r3, [r7, #7]
}
 800084e:	4618      	mov	r0, r3
 8000850:	3708      	adds	r7, #8
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
	...

08000858 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b084      	sub	sp, #16
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000860:	2300      	movs	r3, #0
 8000862:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000864:	4b16      	ldr	r3, [pc, #88]	; (80008c0 <HAL_InitTick+0x68>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	2b00      	cmp	r3, #0
 800086a:	d022      	beq.n	80008b2 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800086c:	4b15      	ldr	r3, [pc, #84]	; (80008c4 <HAL_InitTick+0x6c>)
 800086e:	681a      	ldr	r2, [r3, #0]
 8000870:	4b13      	ldr	r3, [pc, #76]	; (80008c0 <HAL_InitTick+0x68>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000878:	fbb1 f3f3 	udiv	r3, r1, r3
 800087c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000880:	4618      	mov	r0, r3
 8000882:	f000 f962 	bl	8000b4a <HAL_SYSTICK_Config>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d10f      	bne.n	80008ac <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	2b0f      	cmp	r3, #15
 8000890:	d809      	bhi.n	80008a6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000892:	2200      	movs	r2, #0
 8000894:	6879      	ldr	r1, [r7, #4]
 8000896:	f04f 30ff 	mov.w	r0, #4294967295
 800089a:	f000 f92c 	bl	8000af6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800089e:	4a0a      	ldr	r2, [pc, #40]	; (80008c8 <HAL_InitTick+0x70>)
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	6013      	str	r3, [r2, #0]
 80008a4:	e007      	b.n	80008b6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80008a6:	2301      	movs	r3, #1
 80008a8:	73fb      	strb	r3, [r7, #15]
 80008aa:	e004      	b.n	80008b6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80008ac:	2301      	movs	r3, #1
 80008ae:	73fb      	strb	r3, [r7, #15]
 80008b0:	e001      	b.n	80008b6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80008b2:	2301      	movs	r3, #1
 80008b4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80008b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80008b8:	4618      	mov	r0, r3
 80008ba:	3710      	adds	r7, #16
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	20000008 	.word	0x20000008
 80008c4:	20000000 	.word	0x20000000
 80008c8:	20000004 	.word	0x20000004

080008cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008d0:	4b05      	ldr	r3, [pc, #20]	; (80008e8 <HAL_IncTick+0x1c>)
 80008d2:	681a      	ldr	r2, [r3, #0]
 80008d4:	4b05      	ldr	r3, [pc, #20]	; (80008ec <HAL_IncTick+0x20>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4413      	add	r3, r2
 80008da:	4a03      	ldr	r2, [pc, #12]	; (80008e8 <HAL_IncTick+0x1c>)
 80008dc:	6013      	str	r3, [r2, #0]
}
 80008de:	bf00      	nop
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bc80      	pop	{r7}
 80008e4:	4770      	bx	lr
 80008e6:	bf00      	nop
 80008e8:	200001dc 	.word	0x200001dc
 80008ec:	20000008 	.word	0x20000008

080008f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  return uwTick;
 80008f4:	4b02      	ldr	r3, [pc, #8]	; (8000900 <HAL_GetTick+0x10>)
 80008f6:	681b      	ldr	r3, [r3, #0]
}
 80008f8:	4618      	mov	r0, r3
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bc80      	pop	{r7}
 80008fe:	4770      	bx	lr
 8000900:	200001dc 	.word	0x200001dc

08000904 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b084      	sub	sp, #16
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800090c:	f7ff fff0 	bl	80008f0 <HAL_GetTick>
 8000910:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000916:	68fb      	ldr	r3, [r7, #12]
 8000918:	f1b3 3fff 	cmp.w	r3, #4294967295
 800091c:	d004      	beq.n	8000928 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800091e:	4b09      	ldr	r3, [pc, #36]	; (8000944 <HAL_Delay+0x40>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	68fa      	ldr	r2, [r7, #12]
 8000924:	4413      	add	r3, r2
 8000926:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000928:	bf00      	nop
 800092a:	f7ff ffe1 	bl	80008f0 <HAL_GetTick>
 800092e:	4602      	mov	r2, r0
 8000930:	68bb      	ldr	r3, [r7, #8]
 8000932:	1ad3      	subs	r3, r2, r3
 8000934:	68fa      	ldr	r2, [r7, #12]
 8000936:	429a      	cmp	r2, r3
 8000938:	d8f7      	bhi.n	800092a <HAL_Delay+0x26>
  {
  }
}
 800093a:	bf00      	nop
 800093c:	bf00      	nop
 800093e:	3710      	adds	r7, #16
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	20000008 	.word	0x20000008

08000948 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000948:	b480      	push	{r7}
 800094a:	b085      	sub	sp, #20
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	f003 0307 	and.w	r3, r3, #7
 8000956:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000958:	4b0c      	ldr	r3, [pc, #48]	; (800098c <__NVIC_SetPriorityGrouping+0x44>)
 800095a:	68db      	ldr	r3, [r3, #12]
 800095c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800095e:	68ba      	ldr	r2, [r7, #8]
 8000960:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000964:	4013      	ands	r3, r2
 8000966:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800096c:	68bb      	ldr	r3, [r7, #8]
 800096e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000970:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000974:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000978:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800097a:	4a04      	ldr	r2, [pc, #16]	; (800098c <__NVIC_SetPriorityGrouping+0x44>)
 800097c:	68bb      	ldr	r3, [r7, #8]
 800097e:	60d3      	str	r3, [r2, #12]
}
 8000980:	bf00      	nop
 8000982:	3714      	adds	r7, #20
 8000984:	46bd      	mov	sp, r7
 8000986:	bc80      	pop	{r7}
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop
 800098c:	e000ed00 	.word	0xe000ed00

08000990 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000994:	4b04      	ldr	r3, [pc, #16]	; (80009a8 <__NVIC_GetPriorityGrouping+0x18>)
 8000996:	68db      	ldr	r3, [r3, #12]
 8000998:	0a1b      	lsrs	r3, r3, #8
 800099a:	f003 0307 	and.w	r3, r3, #7
}
 800099e:	4618      	mov	r0, r3
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bc80      	pop	{r7}
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop
 80009a8:	e000ed00 	.word	0xe000ed00

080009ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009ac:	b480      	push	{r7}
 80009ae:	b083      	sub	sp, #12
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	4603      	mov	r3, r0
 80009b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	db0b      	blt.n	80009d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009be:	79fb      	ldrb	r3, [r7, #7]
 80009c0:	f003 021f 	and.w	r2, r3, #31
 80009c4:	4906      	ldr	r1, [pc, #24]	; (80009e0 <__NVIC_EnableIRQ+0x34>)
 80009c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ca:	095b      	lsrs	r3, r3, #5
 80009cc:	2001      	movs	r0, #1
 80009ce:	fa00 f202 	lsl.w	r2, r0, r2
 80009d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80009d6:	bf00      	nop
 80009d8:	370c      	adds	r7, #12
 80009da:	46bd      	mov	sp, r7
 80009dc:	bc80      	pop	{r7}
 80009de:	4770      	bx	lr
 80009e0:	e000e100 	.word	0xe000e100

080009e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b083      	sub	sp, #12
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	4603      	mov	r3, r0
 80009ec:	6039      	str	r1, [r7, #0]
 80009ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	db0a      	blt.n	8000a0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	b2da      	uxtb	r2, r3
 80009fc:	490c      	ldr	r1, [pc, #48]	; (8000a30 <__NVIC_SetPriority+0x4c>)
 80009fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a02:	0112      	lsls	r2, r2, #4
 8000a04:	b2d2      	uxtb	r2, r2
 8000a06:	440b      	add	r3, r1
 8000a08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a0c:	e00a      	b.n	8000a24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a0e:	683b      	ldr	r3, [r7, #0]
 8000a10:	b2da      	uxtb	r2, r3
 8000a12:	4908      	ldr	r1, [pc, #32]	; (8000a34 <__NVIC_SetPriority+0x50>)
 8000a14:	79fb      	ldrb	r3, [r7, #7]
 8000a16:	f003 030f 	and.w	r3, r3, #15
 8000a1a:	3b04      	subs	r3, #4
 8000a1c:	0112      	lsls	r2, r2, #4
 8000a1e:	b2d2      	uxtb	r2, r2
 8000a20:	440b      	add	r3, r1
 8000a22:	761a      	strb	r2, [r3, #24]
}
 8000a24:	bf00      	nop
 8000a26:	370c      	adds	r7, #12
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bc80      	pop	{r7}
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop
 8000a30:	e000e100 	.word	0xe000e100
 8000a34:	e000ed00 	.word	0xe000ed00

08000a38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b089      	sub	sp, #36	; 0x24
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	60f8      	str	r0, [r7, #12]
 8000a40:	60b9      	str	r1, [r7, #8]
 8000a42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	f003 0307 	and.w	r3, r3, #7
 8000a4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a4c:	69fb      	ldr	r3, [r7, #28]
 8000a4e:	f1c3 0307 	rsb	r3, r3, #7
 8000a52:	2b04      	cmp	r3, #4
 8000a54:	bf28      	it	cs
 8000a56:	2304      	movcs	r3, #4
 8000a58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a5a:	69fb      	ldr	r3, [r7, #28]
 8000a5c:	3304      	adds	r3, #4
 8000a5e:	2b06      	cmp	r3, #6
 8000a60:	d902      	bls.n	8000a68 <NVIC_EncodePriority+0x30>
 8000a62:	69fb      	ldr	r3, [r7, #28]
 8000a64:	3b03      	subs	r3, #3
 8000a66:	e000      	b.n	8000a6a <NVIC_EncodePriority+0x32>
 8000a68:	2300      	movs	r3, #0
 8000a6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a6c:	f04f 32ff 	mov.w	r2, #4294967295
 8000a70:	69bb      	ldr	r3, [r7, #24]
 8000a72:	fa02 f303 	lsl.w	r3, r2, r3
 8000a76:	43da      	mvns	r2, r3
 8000a78:	68bb      	ldr	r3, [r7, #8]
 8000a7a:	401a      	ands	r2, r3
 8000a7c:	697b      	ldr	r3, [r7, #20]
 8000a7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a80:	f04f 31ff 	mov.w	r1, #4294967295
 8000a84:	697b      	ldr	r3, [r7, #20]
 8000a86:	fa01 f303 	lsl.w	r3, r1, r3
 8000a8a:	43d9      	mvns	r1, r3
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a90:	4313      	orrs	r3, r2
         );
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	3724      	adds	r7, #36	; 0x24
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bc80      	pop	{r7}
 8000a9a:	4770      	bx	lr

08000a9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	3b01      	subs	r3, #1
 8000aa8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000aac:	d301      	bcc.n	8000ab2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000aae:	2301      	movs	r3, #1
 8000ab0:	e00f      	b.n	8000ad2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ab2:	4a0a      	ldr	r2, [pc, #40]	; (8000adc <SysTick_Config+0x40>)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	3b01      	subs	r3, #1
 8000ab8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000aba:	210f      	movs	r1, #15
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	f7ff ff90 	bl	80009e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ac4:	4b05      	ldr	r3, [pc, #20]	; (8000adc <SysTick_Config+0x40>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000aca:	4b04      	ldr	r3, [pc, #16]	; (8000adc <SysTick_Config+0x40>)
 8000acc:	2207      	movs	r2, #7
 8000ace:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ad0:	2300      	movs	r3, #0
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	3708      	adds	r7, #8
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	e000e010 	.word	0xe000e010

08000ae0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ae8:	6878      	ldr	r0, [r7, #4]
 8000aea:	f7ff ff2d 	bl	8000948 <__NVIC_SetPriorityGrouping>
}
 8000aee:	bf00      	nop
 8000af0:	3708      	adds	r7, #8
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}

08000af6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000af6:	b580      	push	{r7, lr}
 8000af8:	b086      	sub	sp, #24
 8000afa:	af00      	add	r7, sp, #0
 8000afc:	4603      	mov	r3, r0
 8000afe:	60b9      	str	r1, [r7, #8]
 8000b00:	607a      	str	r2, [r7, #4]
 8000b02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000b04:	2300      	movs	r3, #0
 8000b06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b08:	f7ff ff42 	bl	8000990 <__NVIC_GetPriorityGrouping>
 8000b0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b0e:	687a      	ldr	r2, [r7, #4]
 8000b10:	68b9      	ldr	r1, [r7, #8]
 8000b12:	6978      	ldr	r0, [r7, #20]
 8000b14:	f7ff ff90 	bl	8000a38 <NVIC_EncodePriority>
 8000b18:	4602      	mov	r2, r0
 8000b1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b1e:	4611      	mov	r1, r2
 8000b20:	4618      	mov	r0, r3
 8000b22:	f7ff ff5f 	bl	80009e4 <__NVIC_SetPriority>
}
 8000b26:	bf00      	nop
 8000b28:	3718      	adds	r7, #24
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}

08000b2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b2e:	b580      	push	{r7, lr}
 8000b30:	b082      	sub	sp, #8
 8000b32:	af00      	add	r7, sp, #0
 8000b34:	4603      	mov	r3, r0
 8000b36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f7ff ff35 	bl	80009ac <__NVIC_EnableIRQ>
}
 8000b42:	bf00      	nop
 8000b44:	3708      	adds	r7, #8
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}

08000b4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b4a:	b580      	push	{r7, lr}
 8000b4c:	b082      	sub	sp, #8
 8000b4e:	af00      	add	r7, sp, #0
 8000b50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b52:	6878      	ldr	r0, [r7, #4]
 8000b54:	f7ff ffa2 	bl	8000a9c <SysTick_Config>
 8000b58:	4603      	mov	r3, r0
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	3708      	adds	r7, #8
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
	...

08000b64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b087      	sub	sp, #28
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
 8000b6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000b72:	2300      	movs	r3, #0
 8000b74:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8000b76:	2300      	movs	r3, #0
 8000b78:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000b7a:	e160      	b.n	8000e3e <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	681a      	ldr	r2, [r3, #0]
 8000b80:	2101      	movs	r1, #1
 8000b82:	697b      	ldr	r3, [r7, #20]
 8000b84:	fa01 f303 	lsl.w	r3, r1, r3
 8000b88:	4013      	ands	r3, r2
 8000b8a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	f000 8152 	beq.w	8000e38 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	685b      	ldr	r3, [r3, #4]
 8000b98:	f003 0303 	and.w	r3, r3, #3
 8000b9c:	2b01      	cmp	r3, #1
 8000b9e:	d005      	beq.n	8000bac <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	685b      	ldr	r3, [r3, #4]
 8000ba4:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000ba8:	2b02      	cmp	r3, #2
 8000baa:	d130      	bne.n	8000c0e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	689b      	ldr	r3, [r3, #8]
 8000bb0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000bb2:	697b      	ldr	r3, [r7, #20]
 8000bb4:	005b      	lsls	r3, r3, #1
 8000bb6:	2203      	movs	r2, #3
 8000bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bbc:	43db      	mvns	r3, r3
 8000bbe:	693a      	ldr	r2, [r7, #16]
 8000bc0:	4013      	ands	r3, r2
 8000bc2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	68da      	ldr	r2, [r3, #12]
 8000bc8:	697b      	ldr	r3, [r7, #20]
 8000bca:	005b      	lsls	r3, r3, #1
 8000bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd0:	693a      	ldr	r2, [r7, #16]
 8000bd2:	4313      	orrs	r3, r2
 8000bd4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	693a      	ldr	r2, [r7, #16]
 8000bda:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	685b      	ldr	r3, [r3, #4]
 8000be0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000be2:	2201      	movs	r2, #1
 8000be4:	697b      	ldr	r3, [r7, #20]
 8000be6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bea:	43db      	mvns	r3, r3
 8000bec:	693a      	ldr	r2, [r7, #16]
 8000bee:	4013      	ands	r3, r2
 8000bf0:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	685b      	ldr	r3, [r3, #4]
 8000bf6:	091b      	lsrs	r3, r3, #4
 8000bf8:	f003 0201 	and.w	r2, r3, #1
 8000bfc:	697b      	ldr	r3, [r7, #20]
 8000bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000c02:	693a      	ldr	r2, [r7, #16]
 8000c04:	4313      	orrs	r3, r2
 8000c06:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	693a      	ldr	r2, [r7, #16]
 8000c0c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	685b      	ldr	r3, [r3, #4]
 8000c12:	f003 0303 	and.w	r3, r3, #3
 8000c16:	2b03      	cmp	r3, #3
 8000c18:	d017      	beq.n	8000c4a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	68db      	ldr	r3, [r3, #12]
 8000c1e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8000c20:	697b      	ldr	r3, [r7, #20]
 8000c22:	005b      	lsls	r3, r3, #1
 8000c24:	2203      	movs	r2, #3
 8000c26:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2a:	43db      	mvns	r3, r3
 8000c2c:	693a      	ldr	r2, [r7, #16]
 8000c2e:	4013      	ands	r3, r2
 8000c30:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	689a      	ldr	r2, [r3, #8]
 8000c36:	697b      	ldr	r3, [r7, #20]
 8000c38:	005b      	lsls	r3, r3, #1
 8000c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3e:	693a      	ldr	r2, [r7, #16]
 8000c40:	4313      	orrs	r3, r2
 8000c42:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	693a      	ldr	r2, [r7, #16]
 8000c48:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	685b      	ldr	r3, [r3, #4]
 8000c4e:	f003 0303 	and.w	r3, r3, #3
 8000c52:	2b02      	cmp	r3, #2
 8000c54:	d123      	bne.n	8000c9e <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8000c56:	697b      	ldr	r3, [r7, #20]
 8000c58:	08da      	lsrs	r2, r3, #3
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	3208      	adds	r2, #8
 8000c5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c62:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	f003 0307 	and.w	r3, r3, #7
 8000c6a:	009b      	lsls	r3, r3, #2
 8000c6c:	220f      	movs	r2, #15
 8000c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c72:	43db      	mvns	r3, r3
 8000c74:	693a      	ldr	r2, [r7, #16]
 8000c76:	4013      	ands	r3, r2
 8000c78:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	691a      	ldr	r2, [r3, #16]
 8000c7e:	697b      	ldr	r3, [r7, #20]
 8000c80:	f003 0307 	and.w	r3, r3, #7
 8000c84:	009b      	lsls	r3, r3, #2
 8000c86:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8a:	693a      	ldr	r2, [r7, #16]
 8000c8c:	4313      	orrs	r3, r2
 8000c8e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	08da      	lsrs	r2, r3, #3
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	3208      	adds	r2, #8
 8000c98:	6939      	ldr	r1, [r7, #16]
 8000c9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	005b      	lsls	r3, r3, #1
 8000ca8:	2203      	movs	r2, #3
 8000caa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cae:	43db      	mvns	r3, r3
 8000cb0:	693a      	ldr	r2, [r7, #16]
 8000cb2:	4013      	ands	r3, r2
 8000cb4:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	685b      	ldr	r3, [r3, #4]
 8000cba:	f003 0203 	and.w	r2, r3, #3
 8000cbe:	697b      	ldr	r3, [r7, #20]
 8000cc0:	005b      	lsls	r3, r3, #1
 8000cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc6:	693a      	ldr	r2, [r7, #16]
 8000cc8:	4313      	orrs	r3, r2
 8000cca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	693a      	ldr	r2, [r7, #16]
 8000cd0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	685b      	ldr	r3, [r3, #4]
 8000cd6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	f000 80ac 	beq.w	8000e38 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ce0:	4b5e      	ldr	r3, [pc, #376]	; (8000e5c <HAL_GPIO_Init+0x2f8>)
 8000ce2:	6a1b      	ldr	r3, [r3, #32]
 8000ce4:	4a5d      	ldr	r2, [pc, #372]	; (8000e5c <HAL_GPIO_Init+0x2f8>)
 8000ce6:	f043 0301 	orr.w	r3, r3, #1
 8000cea:	6213      	str	r3, [r2, #32]
 8000cec:	4b5b      	ldr	r3, [pc, #364]	; (8000e5c <HAL_GPIO_Init+0x2f8>)
 8000cee:	6a1b      	ldr	r3, [r3, #32]
 8000cf0:	f003 0301 	and.w	r3, r3, #1
 8000cf4:	60bb      	str	r3, [r7, #8]
 8000cf6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8000cf8:	4a59      	ldr	r2, [pc, #356]	; (8000e60 <HAL_GPIO_Init+0x2fc>)
 8000cfa:	697b      	ldr	r3, [r7, #20]
 8000cfc:	089b      	lsrs	r3, r3, #2
 8000cfe:	3302      	adds	r3, #2
 8000d00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d04:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8000d06:	697b      	ldr	r3, [r7, #20]
 8000d08:	f003 0303 	and.w	r3, r3, #3
 8000d0c:	009b      	lsls	r3, r3, #2
 8000d0e:	220f      	movs	r2, #15
 8000d10:	fa02 f303 	lsl.w	r3, r2, r3
 8000d14:	43db      	mvns	r3, r3
 8000d16:	693a      	ldr	r2, [r7, #16]
 8000d18:	4013      	ands	r3, r2
 8000d1a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	4a51      	ldr	r2, [pc, #324]	; (8000e64 <HAL_GPIO_Init+0x300>)
 8000d20:	4293      	cmp	r3, r2
 8000d22:	d025      	beq.n	8000d70 <HAL_GPIO_Init+0x20c>
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	4a50      	ldr	r2, [pc, #320]	; (8000e68 <HAL_GPIO_Init+0x304>)
 8000d28:	4293      	cmp	r3, r2
 8000d2a:	d01f      	beq.n	8000d6c <HAL_GPIO_Init+0x208>
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	4a4f      	ldr	r2, [pc, #316]	; (8000e6c <HAL_GPIO_Init+0x308>)
 8000d30:	4293      	cmp	r3, r2
 8000d32:	d019      	beq.n	8000d68 <HAL_GPIO_Init+0x204>
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	4a4e      	ldr	r2, [pc, #312]	; (8000e70 <HAL_GPIO_Init+0x30c>)
 8000d38:	4293      	cmp	r3, r2
 8000d3a:	d013      	beq.n	8000d64 <HAL_GPIO_Init+0x200>
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	4a4d      	ldr	r2, [pc, #308]	; (8000e74 <HAL_GPIO_Init+0x310>)
 8000d40:	4293      	cmp	r3, r2
 8000d42:	d00d      	beq.n	8000d60 <HAL_GPIO_Init+0x1fc>
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	4a4c      	ldr	r2, [pc, #304]	; (8000e78 <HAL_GPIO_Init+0x314>)
 8000d48:	4293      	cmp	r3, r2
 8000d4a:	d007      	beq.n	8000d5c <HAL_GPIO_Init+0x1f8>
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	4a4b      	ldr	r2, [pc, #300]	; (8000e7c <HAL_GPIO_Init+0x318>)
 8000d50:	4293      	cmp	r3, r2
 8000d52:	d101      	bne.n	8000d58 <HAL_GPIO_Init+0x1f4>
 8000d54:	2306      	movs	r3, #6
 8000d56:	e00c      	b.n	8000d72 <HAL_GPIO_Init+0x20e>
 8000d58:	2307      	movs	r3, #7
 8000d5a:	e00a      	b.n	8000d72 <HAL_GPIO_Init+0x20e>
 8000d5c:	2305      	movs	r3, #5
 8000d5e:	e008      	b.n	8000d72 <HAL_GPIO_Init+0x20e>
 8000d60:	2304      	movs	r3, #4
 8000d62:	e006      	b.n	8000d72 <HAL_GPIO_Init+0x20e>
 8000d64:	2303      	movs	r3, #3
 8000d66:	e004      	b.n	8000d72 <HAL_GPIO_Init+0x20e>
 8000d68:	2302      	movs	r3, #2
 8000d6a:	e002      	b.n	8000d72 <HAL_GPIO_Init+0x20e>
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	e000      	b.n	8000d72 <HAL_GPIO_Init+0x20e>
 8000d70:	2300      	movs	r3, #0
 8000d72:	697a      	ldr	r2, [r7, #20]
 8000d74:	f002 0203 	and.w	r2, r2, #3
 8000d78:	0092      	lsls	r2, r2, #2
 8000d7a:	4093      	lsls	r3, r2
 8000d7c:	693a      	ldr	r2, [r7, #16]
 8000d7e:	4313      	orrs	r3, r2
 8000d80:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000d82:	4937      	ldr	r1, [pc, #220]	; (8000e60 <HAL_GPIO_Init+0x2fc>)
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	089b      	lsrs	r3, r3, #2
 8000d88:	3302      	adds	r3, #2
 8000d8a:	693a      	ldr	r2, [r7, #16]
 8000d8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d90:	4b3b      	ldr	r3, [pc, #236]	; (8000e80 <HAL_GPIO_Init+0x31c>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	43db      	mvns	r3, r3
 8000d9a:	693a      	ldr	r2, [r7, #16]
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	685b      	ldr	r3, [r3, #4]
 8000da4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d003      	beq.n	8000db4 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 8000dac:	693a      	ldr	r2, [r7, #16]
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	4313      	orrs	r3, r2
 8000db2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000db4:	4a32      	ldr	r2, [pc, #200]	; (8000e80 <HAL_GPIO_Init+0x31c>)
 8000db6:	693b      	ldr	r3, [r7, #16]
 8000db8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000dba:	4b31      	ldr	r3, [pc, #196]	; (8000e80 <HAL_GPIO_Init+0x31c>)
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	43db      	mvns	r3, r3
 8000dc4:	693a      	ldr	r2, [r7, #16]
 8000dc6:	4013      	ands	r3, r2
 8000dc8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	685b      	ldr	r3, [r3, #4]
 8000dce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d003      	beq.n	8000dde <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 8000dd6:	693a      	ldr	r2, [r7, #16]
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	4313      	orrs	r3, r2
 8000ddc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000dde:	4a28      	ldr	r2, [pc, #160]	; (8000e80 <HAL_GPIO_Init+0x31c>)
 8000de0:	693b      	ldr	r3, [r7, #16]
 8000de2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000de4:	4b26      	ldr	r3, [pc, #152]	; (8000e80 <HAL_GPIO_Init+0x31c>)
 8000de6:	689b      	ldr	r3, [r3, #8]
 8000de8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	43db      	mvns	r3, r3
 8000dee:	693a      	ldr	r2, [r7, #16]
 8000df0:	4013      	ands	r3, r2
 8000df2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d003      	beq.n	8000e08 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 8000e00:	693a      	ldr	r2, [r7, #16]
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	4313      	orrs	r3, r2
 8000e06:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000e08:	4a1d      	ldr	r2, [pc, #116]	; (8000e80 <HAL_GPIO_Init+0x31c>)
 8000e0a:	693b      	ldr	r3, [r7, #16]
 8000e0c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e0e:	4b1c      	ldr	r3, [pc, #112]	; (8000e80 <HAL_GPIO_Init+0x31c>)
 8000e10:	68db      	ldr	r3, [r3, #12]
 8000e12:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	43db      	mvns	r3, r3
 8000e18:	693a      	ldr	r2, [r7, #16]
 8000e1a:	4013      	ands	r3, r2
 8000e1c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d003      	beq.n	8000e32 <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 8000e2a:	693a      	ldr	r2, [r7, #16]
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	4313      	orrs	r3, r2
 8000e30:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000e32:	4a13      	ldr	r2, [pc, #76]	; (8000e80 <HAL_GPIO_Init+0x31c>)
 8000e34:	693b      	ldr	r3, [r7, #16]
 8000e36:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	3301      	adds	r3, #1
 8000e3c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	681a      	ldr	r2, [r3, #0]
 8000e42:	697b      	ldr	r3, [r7, #20]
 8000e44:	fa22 f303 	lsr.w	r3, r2, r3
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	f47f ae97 	bne.w	8000b7c <HAL_GPIO_Init+0x18>
  }
}
 8000e4e:	bf00      	nop
 8000e50:	bf00      	nop
 8000e52:	371c      	adds	r7, #28
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bc80      	pop	{r7}
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	40023800 	.word	0x40023800
 8000e60:	40010000 	.word	0x40010000
 8000e64:	40020000 	.word	0x40020000
 8000e68:	40020400 	.word	0x40020400
 8000e6c:	40020800 	.word	0x40020800
 8000e70:	40020c00 	.word	0x40020c00
 8000e74:	40021000 	.word	0x40021000
 8000e78:	40021400 	.word	0x40021400
 8000e7c:	40021800 	.word	0x40021800
 8000e80:	40010400 	.word	0x40010400

08000e84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b083      	sub	sp, #12
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
 8000e8c:	460b      	mov	r3, r1
 8000e8e:	807b      	strh	r3, [r7, #2]
 8000e90:	4613      	mov	r3, r2
 8000e92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e94:	787b      	ldrb	r3, [r7, #1]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d003      	beq.n	8000ea2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000e9a:	887a      	ldrh	r2, [r7, #2]
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8000ea0:	e003      	b.n	8000eaa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8000ea2:	887b      	ldrh	r3, [r7, #2]
 8000ea4:	041a      	lsls	r2, r3, #16
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	619a      	str	r2, [r3, #24]
}
 8000eaa:	bf00      	nop
 8000eac:	370c      	adds	r7, #12
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bc80      	pop	{r7}
 8000eb2:	4770      	bx	lr

08000eb4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000eb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000eb6:	b08b      	sub	sp, #44	; 0x2c
 8000eb8:	af06      	add	r7, sp, #24
 8000eba:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d101      	bne.n	8000ec6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	e0d0      	b.n	8001068 <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8000ecc:	b2db      	uxtb	r3, r3
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d106      	bne.n	8000ee0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000eda:	6878      	ldr	r0, [r7, #4]
 8000edc:	f006 fde4 	bl	8007aa8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	2203      	movs	r2, #3
 8000ee4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4618      	mov	r0, r3
 8000eee:	f002 fb4b 	bl	8003588 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	73fb      	strb	r3, [r7, #15]
 8000ef6:	e04c      	b.n	8000f92 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000ef8:	7bfb      	ldrb	r3, [r7, #15]
 8000efa:	6879      	ldr	r1, [r7, #4]
 8000efc:	1c5a      	adds	r2, r3, #1
 8000efe:	4613      	mov	r3, r2
 8000f00:	009b      	lsls	r3, r3, #2
 8000f02:	4413      	add	r3, r2
 8000f04:	00db      	lsls	r3, r3, #3
 8000f06:	440b      	add	r3, r1
 8000f08:	3301      	adds	r3, #1
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000f0e:	7bfb      	ldrb	r3, [r7, #15]
 8000f10:	6879      	ldr	r1, [r7, #4]
 8000f12:	1c5a      	adds	r2, r3, #1
 8000f14:	4613      	mov	r3, r2
 8000f16:	009b      	lsls	r3, r3, #2
 8000f18:	4413      	add	r3, r2
 8000f1a:	00db      	lsls	r3, r3, #3
 8000f1c:	440b      	add	r3, r1
 8000f1e:	7bfa      	ldrb	r2, [r7, #15]
 8000f20:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000f22:	7bfa      	ldrb	r2, [r7, #15]
 8000f24:	7bfb      	ldrb	r3, [r7, #15]
 8000f26:	b298      	uxth	r0, r3
 8000f28:	6879      	ldr	r1, [r7, #4]
 8000f2a:	4613      	mov	r3, r2
 8000f2c:	009b      	lsls	r3, r3, #2
 8000f2e:	4413      	add	r3, r2
 8000f30:	00db      	lsls	r3, r3, #3
 8000f32:	440b      	add	r3, r1
 8000f34:	3336      	adds	r3, #54	; 0x36
 8000f36:	4602      	mov	r2, r0
 8000f38:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000f3a:	7bfb      	ldrb	r3, [r7, #15]
 8000f3c:	6879      	ldr	r1, [r7, #4]
 8000f3e:	1c5a      	adds	r2, r3, #1
 8000f40:	4613      	mov	r3, r2
 8000f42:	009b      	lsls	r3, r3, #2
 8000f44:	4413      	add	r3, r2
 8000f46:	00db      	lsls	r3, r3, #3
 8000f48:	440b      	add	r3, r1
 8000f4a:	3303      	adds	r3, #3
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000f50:	7bfa      	ldrb	r2, [r7, #15]
 8000f52:	6879      	ldr	r1, [r7, #4]
 8000f54:	4613      	mov	r3, r2
 8000f56:	009b      	lsls	r3, r3, #2
 8000f58:	4413      	add	r3, r2
 8000f5a:	00db      	lsls	r3, r3, #3
 8000f5c:	440b      	add	r3, r1
 8000f5e:	3338      	adds	r3, #56	; 0x38
 8000f60:	2200      	movs	r2, #0
 8000f62:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000f64:	7bfa      	ldrb	r2, [r7, #15]
 8000f66:	6879      	ldr	r1, [r7, #4]
 8000f68:	4613      	mov	r3, r2
 8000f6a:	009b      	lsls	r3, r3, #2
 8000f6c:	4413      	add	r3, r2
 8000f6e:	00db      	lsls	r3, r3, #3
 8000f70:	440b      	add	r3, r1
 8000f72:	333c      	adds	r3, #60	; 0x3c
 8000f74:	2200      	movs	r2, #0
 8000f76:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000f78:	7bfa      	ldrb	r2, [r7, #15]
 8000f7a:	6879      	ldr	r1, [r7, #4]
 8000f7c:	4613      	mov	r3, r2
 8000f7e:	009b      	lsls	r3, r3, #2
 8000f80:	4413      	add	r3, r2
 8000f82:	00db      	lsls	r3, r3, #3
 8000f84:	440b      	add	r3, r1
 8000f86:	3340      	adds	r3, #64	; 0x40
 8000f88:	2200      	movs	r2, #0
 8000f8a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f8c:	7bfb      	ldrb	r3, [r7, #15]
 8000f8e:	3301      	adds	r3, #1
 8000f90:	73fb      	strb	r3, [r7, #15]
 8000f92:	7bfa      	ldrb	r2, [r7, #15]
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	429a      	cmp	r2, r3
 8000f9a:	d3ad      	bcc.n	8000ef8 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	73fb      	strb	r3, [r7, #15]
 8000fa0:	e044      	b.n	800102c <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000fa2:	7bfa      	ldrb	r2, [r7, #15]
 8000fa4:	6879      	ldr	r1, [r7, #4]
 8000fa6:	4613      	mov	r3, r2
 8000fa8:	009b      	lsls	r3, r3, #2
 8000faa:	4413      	add	r3, r2
 8000fac:	00db      	lsls	r3, r3, #3
 8000fae:	440b      	add	r3, r1
 8000fb0:	f203 1369 	addw	r3, r3, #361	; 0x169
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000fb8:	7bfa      	ldrb	r2, [r7, #15]
 8000fba:	6879      	ldr	r1, [r7, #4]
 8000fbc:	4613      	mov	r3, r2
 8000fbe:	009b      	lsls	r3, r3, #2
 8000fc0:	4413      	add	r3, r2
 8000fc2:	00db      	lsls	r3, r3, #3
 8000fc4:	440b      	add	r3, r1
 8000fc6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000fca:	7bfa      	ldrb	r2, [r7, #15]
 8000fcc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000fce:	7bfa      	ldrb	r2, [r7, #15]
 8000fd0:	6879      	ldr	r1, [r7, #4]
 8000fd2:	4613      	mov	r3, r2
 8000fd4:	009b      	lsls	r3, r3, #2
 8000fd6:	4413      	add	r3, r2
 8000fd8:	00db      	lsls	r3, r3, #3
 8000fda:	440b      	add	r3, r1
 8000fdc:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000fe4:	7bfa      	ldrb	r2, [r7, #15]
 8000fe6:	6879      	ldr	r1, [r7, #4]
 8000fe8:	4613      	mov	r3, r2
 8000fea:	009b      	lsls	r3, r3, #2
 8000fec:	4413      	add	r3, r2
 8000fee:	00db      	lsls	r3, r3, #3
 8000ff0:	440b      	add	r3, r1
 8000ff2:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000ffa:	7bfa      	ldrb	r2, [r7, #15]
 8000ffc:	6879      	ldr	r1, [r7, #4]
 8000ffe:	4613      	mov	r3, r2
 8001000:	009b      	lsls	r3, r3, #2
 8001002:	4413      	add	r3, r2
 8001004:	00db      	lsls	r3, r3, #3
 8001006:	440b      	add	r3, r1
 8001008:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001010:	7bfa      	ldrb	r2, [r7, #15]
 8001012:	6879      	ldr	r1, [r7, #4]
 8001014:	4613      	mov	r3, r2
 8001016:	009b      	lsls	r3, r3, #2
 8001018:	4413      	add	r3, r2
 800101a:	00db      	lsls	r3, r3, #3
 800101c:	440b      	add	r3, r1
 800101e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001022:	2200      	movs	r2, #0
 8001024:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001026:	7bfb      	ldrb	r3, [r7, #15]
 8001028:	3301      	adds	r3, #1
 800102a:	73fb      	strb	r3, [r7, #15]
 800102c:	7bfa      	ldrb	r2, [r7, #15]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	429a      	cmp	r2, r3
 8001034:	d3b5      	bcc.n	8000fa2 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	603b      	str	r3, [r7, #0]
 800103c:	687e      	ldr	r6, [r7, #4]
 800103e:	466d      	mov	r5, sp
 8001040:	f106 0410 	add.w	r4, r6, #16
 8001044:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001046:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001048:	6823      	ldr	r3, [r4, #0]
 800104a:	602b      	str	r3, [r5, #0]
 800104c:	1d33      	adds	r3, r6, #4
 800104e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001050:	6838      	ldr	r0, [r7, #0]
 8001052:	f002 fab3 	bl	80035bc <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2200      	movs	r2, #0
 800105a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2201      	movs	r2, #1
 8001062:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8001066:	2300      	movs	r3, #0
}
 8001068:	4618      	mov	r0, r3
 800106a:	3714      	adds	r7, #20
 800106c:	46bd      	mov	sp, r7
 800106e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001070 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800107e:	2b01      	cmp	r3, #1
 8001080:	d101      	bne.n	8001086 <HAL_PCD_Start+0x16>
 8001082:	2302      	movs	r3, #2
 8001084:	e016      	b.n	80010b4 <HAL_PCD_Start+0x44>
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2201      	movs	r2, #1
 800108a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4618      	mov	r0, r3
 8001094:	f002 fa62 	bl	800355c <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001098:	2101      	movs	r1, #1
 800109a:	6878      	ldr	r0, [r7, #4]
 800109c:	f006 fce6 	bl	8007a6c <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4618      	mov	r0, r3
 80010a6:	f004 ff47 	bl	8005f38 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2200      	movs	r2, #0
 80010ae:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80010b2:	2300      	movs	r3, #0
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	3708      	adds	r7, #8
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}

080010bc <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4618      	mov	r0, r3
 80010ca:	f004 ff3f 	bl	8005f4c <USB_ReadInterrupts>
 80010ce:	4603      	mov	r3, r0
 80010d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80010d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80010d8:	d102      	bne.n	80010e0 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80010da:	6878      	ldr	r0, [r7, #4]
 80010dc:	f000 faf5 	bl	80016ca <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4618      	mov	r0, r3
 80010e6:	f004 ff31 	bl	8005f4c <USB_ReadInterrupts>
 80010ea:	4603      	mov	r3, r0
 80010ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010f4:	d112      	bne.n	800111c <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80010fe:	b29a      	uxth	r2, r3
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001108:	b292      	uxth	r2, r2
 800110a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800110e:	6878      	ldr	r0, [r7, #4]
 8001110:	f006 fd45 	bl	8007b9e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001114:	2100      	movs	r1, #0
 8001116:	6878      	ldr	r0, [r7, #4]
 8001118:	f000 f8c7 	bl	80012aa <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4618      	mov	r0, r3
 8001122:	f004 ff13 	bl	8005f4c <USB_ReadInterrupts>
 8001126:	4603      	mov	r3, r0
 8001128:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800112c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001130:	d10b      	bne.n	800114a <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800113a:	b29a      	uxth	r2, r3
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001144:	b292      	uxth	r2, r2
 8001146:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4618      	mov	r0, r3
 8001150:	f004 fefc 	bl	8005f4c <USB_ReadInterrupts>
 8001154:	4603      	mov	r3, r0
 8001156:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800115a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800115e:	d10b      	bne.n	8001178 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001168:	b29a      	uxth	r2, r3
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001172:	b292      	uxth	r2, r2
 8001174:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4618      	mov	r0, r3
 800117e:	f004 fee5 	bl	8005f4c <USB_ReadInterrupts>
 8001182:	4603      	mov	r3, r0
 8001184:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001188:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800118c:	d126      	bne.n	80011dc <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001196:	b29a      	uxth	r2, r3
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f022 0204 	bic.w	r2, r2, #4
 80011a0:	b292      	uxth	r2, r2
 80011a2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80011ae:	b29a      	uxth	r2, r3
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f022 0208 	bic.w	r2, r2, #8
 80011b8:	b292      	uxth	r2, r2
 80011ba:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80011be:	6878      	ldr	r0, [r7, #4]
 80011c0:	f006 fd26 	bl	8007c10 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80011cc:	b29a      	uxth	r2, r3
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80011d6:	b292      	uxth	r2, r2
 80011d8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4618      	mov	r0, r3
 80011e2:	f004 feb3 	bl	8005f4c <USB_ReadInterrupts>
 80011e6:	4603      	mov	r3, r0
 80011e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80011ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80011f0:	d126      	bne.n	8001240 <HAL_PCD_IRQHandler+0x184>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80011fa:	b29a      	uxth	r2, r3
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f042 0208 	orr.w	r2, r2, #8
 8001204:	b292      	uxth	r2, r2
 8001206:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001212:	b29a      	uxth	r2, r3
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800121c:	b292      	uxth	r2, r2
 800121e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800122a:	b29a      	uxth	r2, r3
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f042 0204 	orr.w	r2, r2, #4
 8001234:	b292      	uxth	r2, r2
 8001236:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800123a:	6878      	ldr	r0, [r7, #4]
 800123c:	f006 fcce 	bl	8007bdc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4618      	mov	r0, r3
 8001246:	f004 fe81 	bl	8005f4c <USB_ReadInterrupts>
 800124a:	4603      	mov	r3, r0
 800124c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001250:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001254:	d10e      	bne.n	8001274 <HAL_PCD_IRQHandler+0x1b8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800125e:	b29a      	uxth	r2, r3
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001268:	b292      	uxth	r2, r2
 800126a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800126e:	6878      	ldr	r0, [r7, #4]
 8001270:	f006 fc87 	bl	8007b82 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4618      	mov	r0, r3
 800127a:	f004 fe67 	bl	8005f4c <USB_ReadInterrupts>
 800127e:	4603      	mov	r3, r0
 8001280:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001284:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001288:	d10b      	bne.n	80012a2 <HAL_PCD_IRQHandler+0x1e6>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001292:	b29a      	uxth	r2, r3
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800129c:	b292      	uxth	r2, r2
 800129e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80012a2:	bf00      	nop
 80012a4:	3708      	adds	r7, #8
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}

080012aa <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80012aa:	b580      	push	{r7, lr}
 80012ac:	b082      	sub	sp, #8
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	6078      	str	r0, [r7, #4]
 80012b2:	460b      	mov	r3, r1
 80012b4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80012bc:	2b01      	cmp	r3, #1
 80012be:	d101      	bne.n	80012c4 <HAL_PCD_SetAddress+0x1a>
 80012c0:	2302      	movs	r3, #2
 80012c2:	e013      	b.n	80012ec <HAL_PCD_SetAddress+0x42>
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2201      	movs	r2, #1
 80012c8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	78fa      	ldrb	r2, [r7, #3]
 80012d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	78fa      	ldrb	r2, [r7, #3]
 80012da:	4611      	mov	r1, r2
 80012dc:	4618      	mov	r0, r3
 80012de:	f004 fe18 	bl	8005f12 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2200      	movs	r2, #0
 80012e6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80012ea:	2300      	movs	r3, #0
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	3708      	adds	r7, #8
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}

080012f4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b084      	sub	sp, #16
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
 80012fc:	4608      	mov	r0, r1
 80012fe:	4611      	mov	r1, r2
 8001300:	461a      	mov	r2, r3
 8001302:	4603      	mov	r3, r0
 8001304:	70fb      	strb	r3, [r7, #3]
 8001306:	460b      	mov	r3, r1
 8001308:	803b      	strh	r3, [r7, #0]
 800130a:	4613      	mov	r3, r2
 800130c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800130e:	2300      	movs	r3, #0
 8001310:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001312:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001316:	2b00      	cmp	r3, #0
 8001318:	da0e      	bge.n	8001338 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800131a:	78fb      	ldrb	r3, [r7, #3]
 800131c:	f003 0307 	and.w	r3, r3, #7
 8001320:	1c5a      	adds	r2, r3, #1
 8001322:	4613      	mov	r3, r2
 8001324:	009b      	lsls	r3, r3, #2
 8001326:	4413      	add	r3, r2
 8001328:	00db      	lsls	r3, r3, #3
 800132a:	687a      	ldr	r2, [r7, #4]
 800132c:	4413      	add	r3, r2
 800132e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	2201      	movs	r2, #1
 8001334:	705a      	strb	r2, [r3, #1]
 8001336:	e00e      	b.n	8001356 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001338:	78fb      	ldrb	r3, [r7, #3]
 800133a:	f003 0207 	and.w	r2, r3, #7
 800133e:	4613      	mov	r3, r2
 8001340:	009b      	lsls	r3, r3, #2
 8001342:	4413      	add	r3, r2
 8001344:	00db      	lsls	r3, r3, #3
 8001346:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800134a:	687a      	ldr	r2, [r7, #4]
 800134c:	4413      	add	r3, r2
 800134e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	2200      	movs	r2, #0
 8001354:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001356:	78fb      	ldrb	r3, [r7, #3]
 8001358:	f003 0307 	and.w	r3, r3, #7
 800135c:	b2da      	uxtb	r2, r3
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001362:	883a      	ldrh	r2, [r7, #0]
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	78ba      	ldrb	r2, [r7, #2]
 800136c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	785b      	ldrb	r3, [r3, #1]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d004      	beq.n	8001380 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	b29a      	uxth	r2, r3
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001380:	78bb      	ldrb	r3, [r7, #2]
 8001382:	2b02      	cmp	r3, #2
 8001384:	d102      	bne.n	800138c <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	2200      	movs	r2, #0
 800138a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001392:	2b01      	cmp	r3, #1
 8001394:	d101      	bne.n	800139a <HAL_PCD_EP_Open+0xa6>
 8001396:	2302      	movs	r3, #2
 8001398:	e00e      	b.n	80013b8 <HAL_PCD_EP_Open+0xc4>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2201      	movs	r2, #1
 800139e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	68f9      	ldr	r1, [r7, #12]
 80013a8:	4618      	mov	r0, r3
 80013aa:	f002 f927 	bl	80035fc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2200      	movs	r2, #0
 80013b2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80013b6:	7afb      	ldrb	r3, [r7, #11]
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	3710      	adds	r7, #16
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}

080013c0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b084      	sub	sp, #16
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
 80013c8:	460b      	mov	r3, r1
 80013ca:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80013cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	da0e      	bge.n	80013f2 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80013d4:	78fb      	ldrb	r3, [r7, #3]
 80013d6:	f003 0307 	and.w	r3, r3, #7
 80013da:	1c5a      	adds	r2, r3, #1
 80013dc:	4613      	mov	r3, r2
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	4413      	add	r3, r2
 80013e2:	00db      	lsls	r3, r3, #3
 80013e4:	687a      	ldr	r2, [r7, #4]
 80013e6:	4413      	add	r3, r2
 80013e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	2201      	movs	r2, #1
 80013ee:	705a      	strb	r2, [r3, #1]
 80013f0:	e00e      	b.n	8001410 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80013f2:	78fb      	ldrb	r3, [r7, #3]
 80013f4:	f003 0207 	and.w	r2, r3, #7
 80013f8:	4613      	mov	r3, r2
 80013fa:	009b      	lsls	r3, r3, #2
 80013fc:	4413      	add	r3, r2
 80013fe:	00db      	lsls	r3, r3, #3
 8001400:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001404:	687a      	ldr	r2, [r7, #4]
 8001406:	4413      	add	r3, r2
 8001408:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	2200      	movs	r2, #0
 800140e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001410:	78fb      	ldrb	r3, [r7, #3]
 8001412:	f003 0307 	and.w	r3, r3, #7
 8001416:	b2da      	uxtb	r2, r3
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001422:	2b01      	cmp	r3, #1
 8001424:	d101      	bne.n	800142a <HAL_PCD_EP_Close+0x6a>
 8001426:	2302      	movs	r3, #2
 8001428:	e00e      	b.n	8001448 <HAL_PCD_EP_Close+0x88>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2201      	movs	r2, #1
 800142e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	68f9      	ldr	r1, [r7, #12]
 8001438:	4618      	mov	r0, r3
 800143a:	f002 fc49 	bl	8003cd0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2200      	movs	r2, #0
 8001442:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001446:	2300      	movs	r3, #0
}
 8001448:	4618      	mov	r0, r3
 800144a:	3710      	adds	r7, #16
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}

08001450 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b086      	sub	sp, #24
 8001454:	af00      	add	r7, sp, #0
 8001456:	60f8      	str	r0, [r7, #12]
 8001458:	607a      	str	r2, [r7, #4]
 800145a:	603b      	str	r3, [r7, #0]
 800145c:	460b      	mov	r3, r1
 800145e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001460:	7afb      	ldrb	r3, [r7, #11]
 8001462:	f003 0207 	and.w	r2, r3, #7
 8001466:	4613      	mov	r3, r2
 8001468:	009b      	lsls	r3, r3, #2
 800146a:	4413      	add	r3, r2
 800146c:	00db      	lsls	r3, r3, #3
 800146e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001472:	68fa      	ldr	r2, [r7, #12]
 8001474:	4413      	add	r3, r2
 8001476:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	687a      	ldr	r2, [r7, #4]
 800147c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	683a      	ldr	r2, [r7, #0]
 8001482:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	2200      	movs	r2, #0
 8001488:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	2200      	movs	r2, #0
 800148e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001490:	7afb      	ldrb	r3, [r7, #11]
 8001492:	f003 0307 	and.w	r3, r3, #7
 8001496:	b2da      	uxtb	r2, r3
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800149c:	7afb      	ldrb	r3, [r7, #11]
 800149e:	f003 0307 	and.w	r3, r3, #7
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d106      	bne.n	80014b4 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	6979      	ldr	r1, [r7, #20]
 80014ac:	4618      	mov	r0, r3
 80014ae:	f002 fdfb 	bl	80040a8 <USB_EPStartXfer>
 80014b2:	e005      	b.n	80014c0 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	6979      	ldr	r1, [r7, #20]
 80014ba:	4618      	mov	r0, r3
 80014bc:	f002 fdf4 	bl	80040a8 <USB_EPStartXfer>
  }

  return HAL_OK;
 80014c0:	2300      	movs	r3, #0
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	3718      	adds	r7, #24
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}

080014ca <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80014ca:	b480      	push	{r7}
 80014cc:	b083      	sub	sp, #12
 80014ce:	af00      	add	r7, sp, #0
 80014d0:	6078      	str	r0, [r7, #4]
 80014d2:	460b      	mov	r3, r1
 80014d4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80014d6:	78fb      	ldrb	r3, [r7, #3]
 80014d8:	f003 0207 	and.w	r2, r3, #7
 80014dc:	6879      	ldr	r1, [r7, #4]
 80014de:	4613      	mov	r3, r2
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	4413      	add	r3, r2
 80014e4:	00db      	lsls	r3, r3, #3
 80014e6:	440b      	add	r3, r1
 80014e8:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80014ec:	681b      	ldr	r3, [r3, #0]
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	370c      	adds	r7, #12
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bc80      	pop	{r7}
 80014f6:	4770      	bx	lr

080014f8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b086      	sub	sp, #24
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	60f8      	str	r0, [r7, #12]
 8001500:	607a      	str	r2, [r7, #4]
 8001502:	603b      	str	r3, [r7, #0]
 8001504:	460b      	mov	r3, r1
 8001506:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001508:	7afb      	ldrb	r3, [r7, #11]
 800150a:	f003 0307 	and.w	r3, r3, #7
 800150e:	1c5a      	adds	r2, r3, #1
 8001510:	4613      	mov	r3, r2
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	4413      	add	r3, r2
 8001516:	00db      	lsls	r3, r3, #3
 8001518:	68fa      	ldr	r2, [r7, #12]
 800151a:	4413      	add	r3, r2
 800151c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	687a      	ldr	r2, [r7, #4]
 8001522:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	683a      	ldr	r2, [r7, #0]
 8001528:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	2201      	movs	r2, #1
 800152e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	683a      	ldr	r2, [r7, #0]
 8001536:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	2200      	movs	r2, #0
 800153c:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	2201      	movs	r2, #1
 8001542:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001544:	7afb      	ldrb	r3, [r7, #11]
 8001546:	f003 0307 	and.w	r3, r3, #7
 800154a:	b2da      	uxtb	r2, r3
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001550:	7afb      	ldrb	r3, [r7, #11]
 8001552:	f003 0307 	and.w	r3, r3, #7
 8001556:	2b00      	cmp	r3, #0
 8001558:	d106      	bne.n	8001568 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	6979      	ldr	r1, [r7, #20]
 8001560:	4618      	mov	r0, r3
 8001562:	f002 fda1 	bl	80040a8 <USB_EPStartXfer>
 8001566:	e005      	b.n	8001574 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	6979      	ldr	r1, [r7, #20]
 800156e:	4618      	mov	r0, r3
 8001570:	f002 fd9a 	bl	80040a8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001574:	2300      	movs	r3, #0
}
 8001576:	4618      	mov	r0, r3
 8001578:	3718      	adds	r7, #24
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}

0800157e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800157e:	b580      	push	{r7, lr}
 8001580:	b084      	sub	sp, #16
 8001582:	af00      	add	r7, sp, #0
 8001584:	6078      	str	r0, [r7, #4]
 8001586:	460b      	mov	r3, r1
 8001588:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800158a:	78fb      	ldrb	r3, [r7, #3]
 800158c:	f003 0207 	and.w	r2, r3, #7
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	429a      	cmp	r2, r3
 8001596:	d901      	bls.n	800159c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001598:	2301      	movs	r3, #1
 800159a:	e03e      	b.n	800161a <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800159c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	da0e      	bge.n	80015c2 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80015a4:	78fb      	ldrb	r3, [r7, #3]
 80015a6:	f003 0307 	and.w	r3, r3, #7
 80015aa:	1c5a      	adds	r2, r3, #1
 80015ac:	4613      	mov	r3, r2
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	4413      	add	r3, r2
 80015b2:	00db      	lsls	r3, r3, #3
 80015b4:	687a      	ldr	r2, [r7, #4]
 80015b6:	4413      	add	r3, r2
 80015b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	2201      	movs	r2, #1
 80015be:	705a      	strb	r2, [r3, #1]
 80015c0:	e00c      	b.n	80015dc <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80015c2:	78fa      	ldrb	r2, [r7, #3]
 80015c4:	4613      	mov	r3, r2
 80015c6:	009b      	lsls	r3, r3, #2
 80015c8:	4413      	add	r3, r2
 80015ca:	00db      	lsls	r3, r3, #3
 80015cc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80015d0:	687a      	ldr	r2, [r7, #4]
 80015d2:	4413      	add	r3, r2
 80015d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	2200      	movs	r2, #0
 80015da:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	2201      	movs	r2, #1
 80015e0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80015e2:	78fb      	ldrb	r3, [r7, #3]
 80015e4:	f003 0307 	and.w	r3, r3, #7
 80015e8:	b2da      	uxtb	r2, r3
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80015f4:	2b01      	cmp	r3, #1
 80015f6:	d101      	bne.n	80015fc <HAL_PCD_EP_SetStall+0x7e>
 80015f8:	2302      	movs	r3, #2
 80015fa:	e00e      	b.n	800161a <HAL_PCD_EP_SetStall+0x9c>
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2201      	movs	r2, #1
 8001600:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	68f9      	ldr	r1, [r7, #12]
 800160a:	4618      	mov	r0, r3
 800160c:	f004 fb84 	bl	8005d18 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2200      	movs	r2, #0
 8001614:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001618:	2300      	movs	r3, #0
}
 800161a:	4618      	mov	r0, r3
 800161c:	3710      	adds	r7, #16
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}

08001622 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001622:	b580      	push	{r7, lr}
 8001624:	b084      	sub	sp, #16
 8001626:	af00      	add	r7, sp, #0
 8001628:	6078      	str	r0, [r7, #4]
 800162a:	460b      	mov	r3, r1
 800162c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800162e:	78fb      	ldrb	r3, [r7, #3]
 8001630:	f003 020f 	and.w	r2, r3, #15
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	429a      	cmp	r2, r3
 800163a:	d901      	bls.n	8001640 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800163c:	2301      	movs	r3, #1
 800163e:	e040      	b.n	80016c2 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001640:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001644:	2b00      	cmp	r3, #0
 8001646:	da0e      	bge.n	8001666 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001648:	78fb      	ldrb	r3, [r7, #3]
 800164a:	f003 0307 	and.w	r3, r3, #7
 800164e:	1c5a      	adds	r2, r3, #1
 8001650:	4613      	mov	r3, r2
 8001652:	009b      	lsls	r3, r3, #2
 8001654:	4413      	add	r3, r2
 8001656:	00db      	lsls	r3, r3, #3
 8001658:	687a      	ldr	r2, [r7, #4]
 800165a:	4413      	add	r3, r2
 800165c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	2201      	movs	r2, #1
 8001662:	705a      	strb	r2, [r3, #1]
 8001664:	e00e      	b.n	8001684 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001666:	78fb      	ldrb	r3, [r7, #3]
 8001668:	f003 0207 	and.w	r2, r3, #7
 800166c:	4613      	mov	r3, r2
 800166e:	009b      	lsls	r3, r3, #2
 8001670:	4413      	add	r3, r2
 8001672:	00db      	lsls	r3, r3, #3
 8001674:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001678:	687a      	ldr	r2, [r7, #4]
 800167a:	4413      	add	r3, r2
 800167c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	2200      	movs	r2, #0
 8001682:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	2200      	movs	r2, #0
 8001688:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800168a:	78fb      	ldrb	r3, [r7, #3]
 800168c:	f003 0307 	and.w	r3, r3, #7
 8001690:	b2da      	uxtb	r2, r3
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800169c:	2b01      	cmp	r3, #1
 800169e:	d101      	bne.n	80016a4 <HAL_PCD_EP_ClrStall+0x82>
 80016a0:	2302      	movs	r3, #2
 80016a2:	e00e      	b.n	80016c2 <HAL_PCD_EP_ClrStall+0xa0>
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2201      	movs	r2, #1
 80016a8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	68f9      	ldr	r1, [r7, #12]
 80016b2:	4618      	mov	r0, r3
 80016b4:	f004 fb80 	bl	8005db8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2200      	movs	r2, #0
 80016bc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80016c0:	2300      	movs	r3, #0
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	3710      	adds	r7, #16
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}

080016ca <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80016ca:	b580      	push	{r7, lr}
 80016cc:	b08e      	sub	sp, #56	; 0x38
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80016d2:	e2ec      	b.n	8001cae <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80016dc:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80016de:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80016e0:	b2db      	uxtb	r3, r3
 80016e2:	f003 030f 	and.w	r3, r3, #15
 80016e6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 80016ea:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	f040 8161 	bne.w	80019b6 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80016f4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80016f6:	f003 0310 	and.w	r3, r3, #16
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d152      	bne.n	80017a4 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	881b      	ldrh	r3, [r3, #0]
 8001704:	b29b      	uxth	r3, r3
 8001706:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800170a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800170e:	81fb      	strh	r3, [r7, #14]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	89fb      	ldrh	r3, [r7, #14]
 8001716:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800171a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800171e:	b29b      	uxth	r3, r3
 8001720:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	3328      	adds	r3, #40	; 0x28
 8001726:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001730:	b29b      	uxth	r3, r3
 8001732:	461a      	mov	r2, r3
 8001734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	00db      	lsls	r3, r3, #3
 800173a:	4413      	add	r3, r2
 800173c:	3302      	adds	r3, #2
 800173e:	005b      	lsls	r3, r3, #1
 8001740:	687a      	ldr	r2, [r7, #4]
 8001742:	6812      	ldr	r2, [r2, #0]
 8001744:	4413      	add	r3, r2
 8001746:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800174a:	881b      	ldrh	r3, [r3, #0]
 800174c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001752:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001756:	695a      	ldr	r2, [r3, #20]
 8001758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800175a:	69db      	ldr	r3, [r3, #28]
 800175c:	441a      	add	r2, r3
 800175e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001760:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001762:	2100      	movs	r1, #0
 8001764:	6878      	ldr	r0, [r7, #4]
 8001766:	f006 f9f2 	bl	8007b4e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001770:	b2db      	uxtb	r3, r3
 8001772:	2b00      	cmp	r3, #0
 8001774:	f000 829b 	beq.w	8001cae <PCD_EP_ISR_Handler+0x5e4>
 8001778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800177a:	699b      	ldr	r3, [r3, #24]
 800177c:	2b00      	cmp	r3, #0
 800177e:	f040 8296 	bne.w	8001cae <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001788:	b2db      	uxtb	r3, r3
 800178a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800178e:	b2da      	uxtb	r2, r3
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	b292      	uxth	r2, r2
 8001796:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2200      	movs	r2, #0
 800179e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80017a2:	e284      	b.n	8001cae <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80017aa:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	881b      	ldrh	r3, [r3, #0]
 80017b2:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80017b4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80017b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d034      	beq.n	8001828 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80017c6:	b29b      	uxth	r3, r3
 80017c8:	461a      	mov	r2, r3
 80017ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	00db      	lsls	r3, r3, #3
 80017d0:	4413      	add	r3, r2
 80017d2:	3306      	adds	r3, #6
 80017d4:	005b      	lsls	r3, r3, #1
 80017d6:	687a      	ldr	r2, [r7, #4]
 80017d8:	6812      	ldr	r2, [r2, #0]
 80017da:	4413      	add	r3, r2
 80017dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80017e0:	881b      	ldrh	r3, [r3, #0]
 80017e2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80017e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e8:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6818      	ldr	r0, [r3, #0]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80017f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f6:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80017f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017fa:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80017fc:	b29b      	uxth	r3, r3
 80017fe:	f004 fbf9 	bl	8005ff4 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	881b      	ldrh	r3, [r3, #0]
 8001808:	b29a      	uxth	r2, r3
 800180a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800180e:	4013      	ands	r3, r2
 8001810:	823b      	strh	r3, [r7, #16]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	8a3a      	ldrh	r2, [r7, #16]
 8001818:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800181c:	b292      	uxth	r2, r2
 800181e:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001820:	6878      	ldr	r0, [r7, #4]
 8001822:	f006 f967 	bl	8007af4 <HAL_PCD_SetupStageCallback>
 8001826:	e242      	b.n	8001cae <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001828:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800182c:	2b00      	cmp	r3, #0
 800182e:	f280 823e 	bge.w	8001cae <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	881b      	ldrh	r3, [r3, #0]
 8001838:	b29a      	uxth	r2, r3
 800183a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800183e:	4013      	ands	r3, r2
 8001840:	83bb      	strh	r3, [r7, #28]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	8bba      	ldrh	r2, [r7, #28]
 8001848:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800184c:	b292      	uxth	r2, r2
 800184e:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001858:	b29b      	uxth	r3, r3
 800185a:	461a      	mov	r2, r3
 800185c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	00db      	lsls	r3, r3, #3
 8001862:	4413      	add	r3, r2
 8001864:	3306      	adds	r3, #6
 8001866:	005b      	lsls	r3, r3, #1
 8001868:	687a      	ldr	r2, [r7, #4]
 800186a:	6812      	ldr	r2, [r2, #0]
 800186c:	4413      	add	r3, r2
 800186e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001872:	881b      	ldrh	r3, [r3, #0]
 8001874:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800187a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800187c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800187e:	69db      	ldr	r3, [r3, #28]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d019      	beq.n	80018b8 <PCD_EP_ISR_Handler+0x1ee>
 8001884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001886:	695b      	ldr	r3, [r3, #20]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d015      	beq.n	80018b8 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6818      	ldr	r0, [r3, #0]
 8001890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001892:	6959      	ldr	r1, [r3, #20]
 8001894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001896:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800189a:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800189c:	b29b      	uxth	r3, r3
 800189e:	f004 fba9 	bl	8005ff4 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80018a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a4:	695a      	ldr	r2, [r3, #20]
 80018a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a8:	69db      	ldr	r3, [r3, #28]
 80018aa:	441a      	add	r2, r3
 80018ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ae:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80018b0:	2100      	movs	r1, #0
 80018b2:	6878      	ldr	r0, [r7, #4]
 80018b4:	f006 f930 	bl	8007b18 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	881b      	ldrh	r3, [r3, #0]
 80018be:	b29b      	uxth	r3, r3
 80018c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	f040 81f2 	bne.w	8001cae <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	61bb      	str	r3, [r7, #24]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80018d8:	b29b      	uxth	r3, r3
 80018da:	461a      	mov	r2, r3
 80018dc:	69bb      	ldr	r3, [r7, #24]
 80018de:	4413      	add	r3, r2
 80018e0:	61bb      	str	r3, [r7, #24]
 80018e2:	69bb      	ldr	r3, [r7, #24]
 80018e4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80018e8:	617b      	str	r3, [r7, #20]
 80018ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ec:	691b      	ldr	r3, [r3, #16]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d112      	bne.n	8001918 <PCD_EP_ISR_Handler+0x24e>
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	881b      	ldrh	r3, [r3, #0]
 80018f6:	b29b      	uxth	r3, r3
 80018f8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80018fc:	b29a      	uxth	r2, r3
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	801a      	strh	r2, [r3, #0]
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	881b      	ldrh	r3, [r3, #0]
 8001906:	b29b      	uxth	r3, r3
 8001908:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800190c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001910:	b29a      	uxth	r2, r3
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	801a      	strh	r2, [r3, #0]
 8001916:	e02f      	b.n	8001978 <PCD_EP_ISR_Handler+0x2ae>
 8001918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800191a:	691b      	ldr	r3, [r3, #16]
 800191c:	2b3e      	cmp	r3, #62	; 0x3e
 800191e:	d813      	bhi.n	8001948 <PCD_EP_ISR_Handler+0x27e>
 8001920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001922:	691b      	ldr	r3, [r3, #16]
 8001924:	085b      	lsrs	r3, r3, #1
 8001926:	633b      	str	r3, [r7, #48]	; 0x30
 8001928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800192a:	691b      	ldr	r3, [r3, #16]
 800192c:	f003 0301 	and.w	r3, r3, #1
 8001930:	2b00      	cmp	r3, #0
 8001932:	d002      	beq.n	800193a <PCD_EP_ISR_Handler+0x270>
 8001934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001936:	3301      	adds	r3, #1
 8001938:	633b      	str	r3, [r7, #48]	; 0x30
 800193a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800193c:	b29b      	uxth	r3, r3
 800193e:	029b      	lsls	r3, r3, #10
 8001940:	b29a      	uxth	r2, r3
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	801a      	strh	r2, [r3, #0]
 8001946:	e017      	b.n	8001978 <PCD_EP_ISR_Handler+0x2ae>
 8001948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800194a:	691b      	ldr	r3, [r3, #16]
 800194c:	095b      	lsrs	r3, r3, #5
 800194e:	633b      	str	r3, [r7, #48]	; 0x30
 8001950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001952:	691b      	ldr	r3, [r3, #16]
 8001954:	f003 031f 	and.w	r3, r3, #31
 8001958:	2b00      	cmp	r3, #0
 800195a:	d102      	bne.n	8001962 <PCD_EP_ISR_Handler+0x298>
 800195c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800195e:	3b01      	subs	r3, #1
 8001960:	633b      	str	r3, [r7, #48]	; 0x30
 8001962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001964:	b29b      	uxth	r3, r3
 8001966:	029b      	lsls	r3, r3, #10
 8001968:	b29b      	uxth	r3, r3
 800196a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800196e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001972:	b29a      	uxth	r2, r3
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	881b      	ldrh	r3, [r3, #0]
 800197e:	b29b      	uxth	r3, r3
 8001980:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001984:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001988:	827b      	strh	r3, [r7, #18]
 800198a:	8a7b      	ldrh	r3, [r7, #18]
 800198c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001990:	827b      	strh	r3, [r7, #18]
 8001992:	8a7b      	ldrh	r3, [r7, #18]
 8001994:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001998:	827b      	strh	r3, [r7, #18]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	8a7b      	ldrh	r3, [r7, #18]
 80019a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80019a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80019a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019b0:	b29b      	uxth	r3, r3
 80019b2:	8013      	strh	r3, [r2, #0]
 80019b4:	e17b      	b.n	8001cae <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	461a      	mov	r2, r3
 80019bc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80019c0:	009b      	lsls	r3, r3, #2
 80019c2:	4413      	add	r3, r2
 80019c4:	881b      	ldrh	r3, [r3, #0]
 80019c6:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80019c8:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	f280 80ea 	bge.w	8001ba6 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	461a      	mov	r2, r3
 80019d8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80019dc:	009b      	lsls	r3, r3, #2
 80019de:	4413      	add	r3, r2
 80019e0:	881b      	ldrh	r3, [r3, #0]
 80019e2:	b29a      	uxth	r2, r3
 80019e4:	f640 738f 	movw	r3, #3983	; 0xf8f
 80019e8:	4013      	ands	r3, r2
 80019ea:	853b      	strh	r3, [r7, #40]	; 0x28
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	461a      	mov	r2, r3
 80019f2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80019f6:	009b      	lsls	r3, r3, #2
 80019f8:	4413      	add	r3, r2
 80019fa:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80019fc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001a00:	b292      	uxth	r2, r2
 8001a02:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001a04:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8001a08:	4613      	mov	r3, r2
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	4413      	add	r3, r2
 8001a0e:	00db      	lsls	r3, r3, #3
 8001a10:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001a14:	687a      	ldr	r2, [r7, #4]
 8001a16:	4413      	add	r3, r2
 8001a18:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a1c:	7b1b      	ldrb	r3, [r3, #12]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d122      	bne.n	8001a68 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a2a:	b29b      	uxth	r3, r3
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a30:	781b      	ldrb	r3, [r3, #0]
 8001a32:	00db      	lsls	r3, r3, #3
 8001a34:	4413      	add	r3, r2
 8001a36:	3306      	adds	r3, #6
 8001a38:	005b      	lsls	r3, r3, #1
 8001a3a:	687a      	ldr	r2, [r7, #4]
 8001a3c:	6812      	ldr	r2, [r2, #0]
 8001a3e:	4413      	add	r3, r2
 8001a40:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001a44:	881b      	ldrh	r3, [r3, #0]
 8001a46:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001a4a:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8001a4c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	f000 8087 	beq.w	8001b62 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6818      	ldr	r0, [r3, #0]
 8001a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a5a:	6959      	ldr	r1, [r3, #20]
 8001a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a5e:	88da      	ldrh	r2, [r3, #6]
 8001a60:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001a62:	f004 fac7 	bl	8005ff4 <USB_ReadPMA>
 8001a66:	e07c      	b.n	8001b62 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a6a:	78db      	ldrb	r3, [r3, #3]
 8001a6c:	2b02      	cmp	r3, #2
 8001a6e:	d108      	bne.n	8001a82 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001a70:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001a72:	461a      	mov	r2, r3
 8001a74:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	f000 f927 	bl	8001cca <HAL_PCD_EP_DB_Receive>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	86fb      	strh	r3, [r7, #54]	; 0x36
 8001a80:	e06f      	b.n	8001b62 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	461a      	mov	r2, r3
 8001a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	009b      	lsls	r3, r3, #2
 8001a8e:	4413      	add	r3, r2
 8001a90:	881b      	ldrh	r3, [r3, #0]
 8001a92:	b29b      	uxth	r3, r3
 8001a94:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001a98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a9c:	847b      	strh	r3, [r7, #34]	; 0x22
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	461a      	mov	r2, r3
 8001aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	009b      	lsls	r3, r3, #2
 8001aaa:	441a      	add	r2, r3
 8001aac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001aae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001ab2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001ab6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001aba:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001abe:	b29b      	uxth	r3, r3
 8001ac0:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	461a      	mov	r2, r3
 8001ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	009b      	lsls	r3, r3, #2
 8001ace:	4413      	add	r3, r2
 8001ad0:	881b      	ldrh	r3, [r3, #0]
 8001ad2:	b29b      	uxth	r3, r3
 8001ad4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d021      	beq.n	8001b20 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ae4:	b29b      	uxth	r3, r3
 8001ae6:	461a      	mov	r2, r3
 8001ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	00db      	lsls	r3, r3, #3
 8001aee:	4413      	add	r3, r2
 8001af0:	3302      	adds	r3, #2
 8001af2:	005b      	lsls	r3, r3, #1
 8001af4:	687a      	ldr	r2, [r7, #4]
 8001af6:	6812      	ldr	r2, [r2, #0]
 8001af8:	4413      	add	r3, r2
 8001afa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001afe:	881b      	ldrh	r3, [r3, #0]
 8001b00:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b04:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001b06:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d02a      	beq.n	8001b62 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6818      	ldr	r0, [r3, #0]
 8001b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b12:	6959      	ldr	r1, [r3, #20]
 8001b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b16:	891a      	ldrh	r2, [r3, #8]
 8001b18:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001b1a:	f004 fa6b 	bl	8005ff4 <USB_ReadPMA>
 8001b1e:	e020      	b.n	8001b62 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b28:	b29b      	uxth	r3, r3
 8001b2a:	461a      	mov	r2, r3
 8001b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	00db      	lsls	r3, r3, #3
 8001b32:	4413      	add	r3, r2
 8001b34:	3306      	adds	r3, #6
 8001b36:	005b      	lsls	r3, r3, #1
 8001b38:	687a      	ldr	r2, [r7, #4]
 8001b3a:	6812      	ldr	r2, [r2, #0]
 8001b3c:	4413      	add	r3, r2
 8001b3e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001b42:	881b      	ldrh	r3, [r3, #0]
 8001b44:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b48:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001b4a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d008      	beq.n	8001b62 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6818      	ldr	r0, [r3, #0]
 8001b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b56:	6959      	ldr	r1, [r3, #20]
 8001b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b5a:	895a      	ldrh	r2, [r3, #10]
 8001b5c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001b5e:	f004 fa49 	bl	8005ff4 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b64:	69da      	ldr	r2, [r3, #28]
 8001b66:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001b68:	441a      	add	r2, r3
 8001b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b6c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b70:	695a      	ldr	r2, [r3, #20]
 8001b72:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001b74:	441a      	add	r2, r3
 8001b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b78:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b7c:	699b      	ldr	r3, [r3, #24]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d004      	beq.n	8001b8c <PCD_EP_ISR_Handler+0x4c2>
 8001b82:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b86:	691b      	ldr	r3, [r3, #16]
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	d206      	bcs.n	8001b9a <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	4619      	mov	r1, r3
 8001b92:	6878      	ldr	r0, [r7, #4]
 8001b94:	f005 ffc0 	bl	8007b18 <HAL_PCD_DataOutStageCallback>
 8001b98:	e005      	b.n	8001ba6 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f002 fa81 	bl	80040a8 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001ba6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001ba8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d07e      	beq.n	8001cae <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8001bb0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001bb4:	1c5a      	adds	r2, r3, #1
 8001bb6:	4613      	mov	r3, r2
 8001bb8:	009b      	lsls	r3, r3, #2
 8001bba:	4413      	add	r3, r2
 8001bbc:	00db      	lsls	r3, r3, #3
 8001bbe:	687a      	ldr	r2, [r7, #4]
 8001bc0:	4413      	add	r3, r2
 8001bc2:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	461a      	mov	r2, r3
 8001bca:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001bce:	009b      	lsls	r3, r3, #2
 8001bd0:	4413      	add	r3, r2
 8001bd2:	881b      	ldrh	r3, [r3, #0]
 8001bd4:	b29b      	uxth	r3, r3
 8001bd6:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001bda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001bde:	843b      	strh	r3, [r7, #32]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	461a      	mov	r2, r3
 8001be6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	441a      	add	r2, r3
 8001bee:	8c3b      	ldrh	r3, [r7, #32]
 8001bf0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001bf4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001bf8:	b29b      	uxth	r3, r3
 8001bfa:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8001bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bfe:	78db      	ldrb	r3, [r3, #3]
 8001c00:	2b03      	cmp	r3, #3
 8001c02:	d00c      	beq.n	8001c1e <PCD_EP_ISR_Handler+0x554>
 8001c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c06:	78db      	ldrb	r3, [r3, #3]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d008      	beq.n	8001c1e <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8001c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c0e:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8001c10:	2b02      	cmp	r3, #2
 8001c12:	d146      	bne.n	8001ca2 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8001c14:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001c16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d141      	bne.n	8001ca2 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c26:	b29b      	uxth	r3, r3
 8001c28:	461a      	mov	r2, r3
 8001c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c2c:	781b      	ldrb	r3, [r3, #0]
 8001c2e:	00db      	lsls	r3, r3, #3
 8001c30:	4413      	add	r3, r2
 8001c32:	3302      	adds	r3, #2
 8001c34:	005b      	lsls	r3, r3, #1
 8001c36:	687a      	ldr	r2, [r7, #4]
 8001c38:	6812      	ldr	r2, [r2, #0]
 8001c3a:	4413      	add	r3, r2
 8001c3c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001c40:	881b      	ldrh	r3, [r3, #0]
 8001c42:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c46:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8001c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c4a:	699a      	ldr	r2, [r3, #24]
 8001c4c:	8bfb      	ldrh	r3, [r7, #30]
 8001c4e:	429a      	cmp	r2, r3
 8001c50:	d906      	bls.n	8001c60 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8001c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c54:	699a      	ldr	r2, [r3, #24]
 8001c56:	8bfb      	ldrh	r3, [r7, #30]
 8001c58:	1ad2      	subs	r2, r2, r3
 8001c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c5c:	619a      	str	r2, [r3, #24]
 8001c5e:	e002      	b.n	8001c66 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8001c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c62:	2200      	movs	r2, #0
 8001c64:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8001c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c68:	699b      	ldr	r3, [r3, #24]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d106      	bne.n	8001c7c <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c70:	781b      	ldrb	r3, [r3, #0]
 8001c72:	4619      	mov	r1, r3
 8001c74:	6878      	ldr	r0, [r7, #4]
 8001c76:	f005 ff6a 	bl	8007b4e <HAL_PCD_DataInStageCallback>
 8001c7a:	e018      	b.n	8001cae <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8001c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c7e:	695a      	ldr	r2, [r3, #20]
 8001c80:	8bfb      	ldrh	r3, [r7, #30]
 8001c82:	441a      	add	r2, r3
 8001c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c86:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8001c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c8a:	69da      	ldr	r2, [r3, #28]
 8001c8c:	8bfb      	ldrh	r3, [r7, #30]
 8001c8e:	441a      	add	r2, r3
 8001c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c92:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f002 fa04 	bl	80040a8 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8001ca0:	e005      	b.n	8001cae <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001ca2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ca8:	6878      	ldr	r0, [r7, #4]
 8001caa:	f000 f91b 	bl	8001ee4 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001cb6:	b29b      	uxth	r3, r3
 8001cb8:	b21b      	sxth	r3, r3
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	f6ff ad0a 	blt.w	80016d4 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001cc0:	2300      	movs	r3, #0
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3738      	adds	r7, #56	; 0x38
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}

08001cca <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001cca:	b580      	push	{r7, lr}
 8001ccc:	b088      	sub	sp, #32
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	60f8      	str	r0, [r7, #12]
 8001cd2:	60b9      	str	r1, [r7, #8]
 8001cd4:	4613      	mov	r3, r2
 8001cd6:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001cd8:	88fb      	ldrh	r3, [r7, #6]
 8001cda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d07e      	beq.n	8001de0 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001cea:	b29b      	uxth	r3, r3
 8001cec:	461a      	mov	r2, r3
 8001cee:	68bb      	ldr	r3, [r7, #8]
 8001cf0:	781b      	ldrb	r3, [r3, #0]
 8001cf2:	00db      	lsls	r3, r3, #3
 8001cf4:	4413      	add	r3, r2
 8001cf6:	3302      	adds	r3, #2
 8001cf8:	005b      	lsls	r3, r3, #1
 8001cfa:	68fa      	ldr	r2, [r7, #12]
 8001cfc:	6812      	ldr	r2, [r2, #0]
 8001cfe:	4413      	add	r3, r2
 8001d00:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001d04:	881b      	ldrh	r3, [r3, #0]
 8001d06:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d0a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	699a      	ldr	r2, [r3, #24]
 8001d10:	8b7b      	ldrh	r3, [r7, #26]
 8001d12:	429a      	cmp	r2, r3
 8001d14:	d306      	bcc.n	8001d24 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	699a      	ldr	r2, [r3, #24]
 8001d1a:	8b7b      	ldrh	r3, [r7, #26]
 8001d1c:	1ad2      	subs	r2, r2, r3
 8001d1e:	68bb      	ldr	r3, [r7, #8]
 8001d20:	619a      	str	r2, [r3, #24]
 8001d22:	e002      	b.n	8001d2a <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	2200      	movs	r2, #0
 8001d28:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	699b      	ldr	r3, [r3, #24]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d123      	bne.n	8001d7a <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	461a      	mov	r2, r3
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	009b      	lsls	r3, r3, #2
 8001d3e:	4413      	add	r3, r2
 8001d40:	881b      	ldrh	r3, [r3, #0]
 8001d42:	b29b      	uxth	r3, r3
 8001d44:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001d48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d4c:	833b      	strh	r3, [r7, #24]
 8001d4e:	8b3b      	ldrh	r3, [r7, #24]
 8001d50:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001d54:	833b      	strh	r3, [r7, #24]
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	009b      	lsls	r3, r3, #2
 8001d62:	441a      	add	r2, r3
 8001d64:	8b3b      	ldrh	r3, [r7, #24]
 8001d66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001d6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001d6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d76:	b29b      	uxth	r3, r3
 8001d78:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001d7a:	88fb      	ldrh	r3, [r7, #6]
 8001d7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d01f      	beq.n	8001dc4 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	461a      	mov	r2, r3
 8001d8a:	68bb      	ldr	r3, [r7, #8]
 8001d8c:	781b      	ldrb	r3, [r3, #0]
 8001d8e:	009b      	lsls	r3, r3, #2
 8001d90:	4413      	add	r3, r2
 8001d92:	881b      	ldrh	r3, [r3, #0]
 8001d94:	b29b      	uxth	r3, r3
 8001d96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001d9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d9e:	82fb      	strh	r3, [r7, #22]
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	461a      	mov	r2, r3
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	781b      	ldrb	r3, [r3, #0]
 8001daa:	009b      	lsls	r3, r3, #2
 8001dac:	441a      	add	r2, r3
 8001dae:	8afb      	ldrh	r3, [r7, #22]
 8001db0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001db4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001db8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001dbc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001dc0:	b29b      	uxth	r3, r3
 8001dc2:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001dc4:	8b7b      	ldrh	r3, [r7, #26]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	f000 8087 	beq.w	8001eda <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	6818      	ldr	r0, [r3, #0]
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	6959      	ldr	r1, [r3, #20]
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	891a      	ldrh	r2, [r3, #8]
 8001dd8:	8b7b      	ldrh	r3, [r7, #26]
 8001dda:	f004 f90b 	bl	8005ff4 <USB_ReadPMA>
 8001dde:	e07c      	b.n	8001eda <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001de8:	b29b      	uxth	r3, r3
 8001dea:	461a      	mov	r2, r3
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	781b      	ldrb	r3, [r3, #0]
 8001df0:	00db      	lsls	r3, r3, #3
 8001df2:	4413      	add	r3, r2
 8001df4:	3306      	adds	r3, #6
 8001df6:	005b      	lsls	r3, r3, #1
 8001df8:	68fa      	ldr	r2, [r7, #12]
 8001dfa:	6812      	ldr	r2, [r2, #0]
 8001dfc:	4413      	add	r3, r2
 8001dfe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001e02:	881b      	ldrh	r3, [r3, #0]
 8001e04:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e08:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001e0a:	68bb      	ldr	r3, [r7, #8]
 8001e0c:	699a      	ldr	r2, [r3, #24]
 8001e0e:	8b7b      	ldrh	r3, [r7, #26]
 8001e10:	429a      	cmp	r2, r3
 8001e12:	d306      	bcc.n	8001e22 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	699a      	ldr	r2, [r3, #24]
 8001e18:	8b7b      	ldrh	r3, [r7, #26]
 8001e1a:	1ad2      	subs	r2, r2, r3
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	619a      	str	r2, [r3, #24]
 8001e20:	e002      	b.n	8001e28 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8001e22:	68bb      	ldr	r3, [r7, #8]
 8001e24:	2200      	movs	r2, #0
 8001e26:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	699b      	ldr	r3, [r3, #24]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d123      	bne.n	8001e78 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	461a      	mov	r2, r3
 8001e36:	68bb      	ldr	r3, [r7, #8]
 8001e38:	781b      	ldrb	r3, [r3, #0]
 8001e3a:	009b      	lsls	r3, r3, #2
 8001e3c:	4413      	add	r3, r2
 8001e3e:	881b      	ldrh	r3, [r3, #0]
 8001e40:	b29b      	uxth	r3, r3
 8001e42:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001e46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e4a:	83fb      	strh	r3, [r7, #30]
 8001e4c:	8bfb      	ldrh	r3, [r7, #30]
 8001e4e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001e52:	83fb      	strh	r3, [r7, #30]
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	461a      	mov	r2, r3
 8001e5a:	68bb      	ldr	r3, [r7, #8]
 8001e5c:	781b      	ldrb	r3, [r3, #0]
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	441a      	add	r2, r3
 8001e62:	8bfb      	ldrh	r3, [r7, #30]
 8001e64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001e68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001e6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e74:	b29b      	uxth	r3, r3
 8001e76:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8001e78:	88fb      	ldrh	r3, [r7, #6]
 8001e7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d11f      	bne.n	8001ec2 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	461a      	mov	r2, r3
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	781b      	ldrb	r3, [r3, #0]
 8001e8c:	009b      	lsls	r3, r3, #2
 8001e8e:	4413      	add	r3, r2
 8001e90:	881b      	ldrh	r3, [r3, #0]
 8001e92:	b29b      	uxth	r3, r3
 8001e94:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001e98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e9c:	83bb      	strh	r3, [r7, #28]
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	461a      	mov	r2, r3
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	009b      	lsls	r3, r3, #2
 8001eaa:	441a      	add	r2, r3
 8001eac:	8bbb      	ldrh	r3, [r7, #28]
 8001eae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001eb2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001eb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001eba:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001ebe:	b29b      	uxth	r3, r3
 8001ec0:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001ec2:	8b7b      	ldrh	r3, [r7, #26]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d008      	beq.n	8001eda <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	6818      	ldr	r0, [r3, #0]
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	6959      	ldr	r1, [r3, #20]
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	895a      	ldrh	r2, [r3, #10]
 8001ed4:	8b7b      	ldrh	r3, [r7, #26]
 8001ed6:	f004 f88d 	bl	8005ff4 <USB_ReadPMA>
    }
  }

  return count;
 8001eda:	8b7b      	ldrh	r3, [r7, #26]
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	3720      	adds	r7, #32
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}

08001ee4 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b0a2      	sub	sp, #136	; 0x88
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	60f8      	str	r0, [r7, #12]
 8001eec:	60b9      	str	r1, [r7, #8]
 8001eee:	4613      	mov	r3, r2
 8001ef0:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001ef2:	88fb      	ldrh	r3, [r7, #6]
 8001ef4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	f000 81c7 	beq.w	800228c <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f06:	b29b      	uxth	r3, r3
 8001f08:	461a      	mov	r2, r3
 8001f0a:	68bb      	ldr	r3, [r7, #8]
 8001f0c:	781b      	ldrb	r3, [r3, #0]
 8001f0e:	00db      	lsls	r3, r3, #3
 8001f10:	4413      	add	r3, r2
 8001f12:	3302      	adds	r3, #2
 8001f14:	005b      	lsls	r3, r3, #1
 8001f16:	68fa      	ldr	r2, [r7, #12]
 8001f18:	6812      	ldr	r2, [r2, #0]
 8001f1a:	4413      	add	r3, r2
 8001f1c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f20:	881b      	ldrh	r3, [r3, #0]
 8001f22:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f26:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8001f2a:	68bb      	ldr	r3, [r7, #8]
 8001f2c:	699a      	ldr	r2, [r3, #24]
 8001f2e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001f32:	429a      	cmp	r2, r3
 8001f34:	d907      	bls.n	8001f46 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8001f36:	68bb      	ldr	r3, [r7, #8]
 8001f38:	699a      	ldr	r2, [r3, #24]
 8001f3a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001f3e:	1ad2      	subs	r2, r2, r3
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	619a      	str	r2, [r3, #24]
 8001f44:	e002      	b.n	8001f4c <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	699b      	ldr	r3, [r3, #24]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	f040 80b9 	bne.w	80020c8 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	785b      	ldrb	r3, [r3, #1]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d126      	bne.n	8001fac <HAL_PCD_EP_DB_Transmit+0xc8>
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f6c:	b29b      	uxth	r3, r3
 8001f6e:	461a      	mov	r2, r3
 8001f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f72:	4413      	add	r3, r2
 8001f74:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	781b      	ldrb	r3, [r3, #0]
 8001f7a:	011a      	lsls	r2, r3, #4
 8001f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f7e:	4413      	add	r3, r2
 8001f80:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001f84:	627b      	str	r3, [r7, #36]	; 0x24
 8001f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f88:	881b      	ldrh	r3, [r3, #0]
 8001f8a:	b29b      	uxth	r3, r3
 8001f8c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001f90:	b29a      	uxth	r2, r3
 8001f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f94:	801a      	strh	r2, [r3, #0]
 8001f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f98:	881b      	ldrh	r3, [r3, #0]
 8001f9a:	b29b      	uxth	r3, r3
 8001f9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001fa0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001fa4:	b29a      	uxth	r2, r3
 8001fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa8:	801a      	strh	r2, [r3, #0]
 8001faa:	e01a      	b.n	8001fe2 <HAL_PCD_EP_DB_Transmit+0xfe>
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	785b      	ldrb	r3, [r3, #1]
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d116      	bne.n	8001fe2 <HAL_PCD_EP_DB_Transmit+0xfe>
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	633b      	str	r3, [r7, #48]	; 0x30
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001fc2:	b29b      	uxth	r3, r3
 8001fc4:	461a      	mov	r2, r3
 8001fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fc8:	4413      	add	r3, r2
 8001fca:	633b      	str	r3, [r7, #48]	; 0x30
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	011a      	lsls	r2, r3, #4
 8001fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fd4:	4413      	add	r3, r2
 8001fd6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001fda:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fde:	2200      	movs	r2, #0
 8001fe0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	623b      	str	r3, [r7, #32]
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	785b      	ldrb	r3, [r3, #1]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d126      	bne.n	800203e <HAL_PCD_EP_DB_Transmit+0x15a>
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	61bb      	str	r3, [r7, #24]
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ffe:	b29b      	uxth	r3, r3
 8002000:	461a      	mov	r2, r3
 8002002:	69bb      	ldr	r3, [r7, #24]
 8002004:	4413      	add	r3, r2
 8002006:	61bb      	str	r3, [r7, #24]
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	011a      	lsls	r2, r3, #4
 800200e:	69bb      	ldr	r3, [r7, #24]
 8002010:	4413      	add	r3, r2
 8002012:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002016:	617b      	str	r3, [r7, #20]
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	881b      	ldrh	r3, [r3, #0]
 800201c:	b29b      	uxth	r3, r3
 800201e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002022:	b29a      	uxth	r2, r3
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	801a      	strh	r2, [r3, #0]
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	881b      	ldrh	r3, [r3, #0]
 800202c:	b29b      	uxth	r3, r3
 800202e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002032:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002036:	b29a      	uxth	r2, r3
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	801a      	strh	r2, [r3, #0]
 800203c:	e017      	b.n	800206e <HAL_PCD_EP_DB_Transmit+0x18a>
 800203e:	68bb      	ldr	r3, [r7, #8]
 8002040:	785b      	ldrb	r3, [r3, #1]
 8002042:	2b01      	cmp	r3, #1
 8002044:	d113      	bne.n	800206e <HAL_PCD_EP_DB_Transmit+0x18a>
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800204e:	b29b      	uxth	r3, r3
 8002050:	461a      	mov	r2, r3
 8002052:	6a3b      	ldr	r3, [r7, #32]
 8002054:	4413      	add	r3, r2
 8002056:	623b      	str	r3, [r7, #32]
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	011a      	lsls	r2, r3, #4
 800205e:	6a3b      	ldr	r3, [r7, #32]
 8002060:	4413      	add	r3, r2
 8002062:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002066:	61fb      	str	r3, [r7, #28]
 8002068:	69fb      	ldr	r3, [r7, #28]
 800206a:	2200      	movs	r2, #0
 800206c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	781b      	ldrb	r3, [r3, #0]
 8002072:	4619      	mov	r1, r3
 8002074:	68f8      	ldr	r0, [r7, #12]
 8002076:	f005 fd6a 	bl	8007b4e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800207a:	88fb      	ldrh	r3, [r7, #6]
 800207c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002080:	2b00      	cmp	r3, #0
 8002082:	f000 82d4 	beq.w	800262e <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	461a      	mov	r2, r3
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	781b      	ldrb	r3, [r3, #0]
 8002090:	009b      	lsls	r3, r3, #2
 8002092:	4413      	add	r3, r2
 8002094:	881b      	ldrh	r3, [r3, #0]
 8002096:	b29b      	uxth	r3, r3
 8002098:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800209c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020a0:	827b      	strh	r3, [r7, #18]
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	461a      	mov	r2, r3
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	009b      	lsls	r3, r3, #2
 80020ae:	441a      	add	r2, r3
 80020b0:	8a7b      	ldrh	r3, [r7, #18]
 80020b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80020b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80020ba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80020be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020c2:	b29b      	uxth	r3, r3
 80020c4:	8013      	strh	r3, [r2, #0]
 80020c6:	e2b2      	b.n	800262e <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80020c8:	88fb      	ldrh	r3, [r7, #6]
 80020ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d021      	beq.n	8002116 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	461a      	mov	r2, r3
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	4413      	add	r3, r2
 80020e0:	881b      	ldrh	r3, [r3, #0]
 80020e2:	b29b      	uxth	r3, r3
 80020e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80020e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020ec:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	461a      	mov	r2, r3
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	781b      	ldrb	r3, [r3, #0]
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	441a      	add	r2, r3
 80020fe:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002102:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002106:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800210a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800210e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002112:	b29b      	uxth	r3, r3
 8002114:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800211c:	2b01      	cmp	r3, #1
 800211e:	f040 8286 	bne.w	800262e <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8002122:	68bb      	ldr	r3, [r7, #8]
 8002124:	695a      	ldr	r2, [r3, #20]
 8002126:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800212a:	441a      	add	r2, r3
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	69da      	ldr	r2, [r3, #28]
 8002134:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002138:	441a      	add	r2, r3
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	6a1a      	ldr	r2, [r3, #32]
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	691b      	ldr	r3, [r3, #16]
 8002146:	429a      	cmp	r2, r3
 8002148:	d309      	bcc.n	800215e <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	691b      	ldr	r3, [r3, #16]
 800214e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	6a1a      	ldr	r2, [r3, #32]
 8002154:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002156:	1ad2      	subs	r2, r2, r3
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	621a      	str	r2, [r3, #32]
 800215c:	e015      	b.n	800218a <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	6a1b      	ldr	r3, [r3, #32]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d107      	bne.n	8002176 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8002166:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800216a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	2200      	movs	r2, #0
 8002170:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002174:	e009      	b.n	800218a <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	2200      	movs	r2, #0
 800217a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	6a1b      	ldr	r3, [r3, #32]
 8002182:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	2200      	movs	r2, #0
 8002188:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	785b      	ldrb	r3, [r3, #1]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d155      	bne.n	800223e <HAL_PCD_EP_DB_Transmit+0x35a>
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	63bb      	str	r3, [r7, #56]	; 0x38
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021a0:	b29b      	uxth	r3, r3
 80021a2:	461a      	mov	r2, r3
 80021a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021a6:	4413      	add	r3, r2
 80021a8:	63bb      	str	r3, [r7, #56]	; 0x38
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	781b      	ldrb	r3, [r3, #0]
 80021ae:	011a      	lsls	r2, r3, #4
 80021b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021b2:	4413      	add	r3, r2
 80021b4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80021b8:	637b      	str	r3, [r7, #52]	; 0x34
 80021ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d112      	bne.n	80021e6 <HAL_PCD_EP_DB_Transmit+0x302>
 80021c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021c2:	881b      	ldrh	r3, [r3, #0]
 80021c4:	b29b      	uxth	r3, r3
 80021c6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80021ca:	b29a      	uxth	r2, r3
 80021cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021ce:	801a      	strh	r2, [r3, #0]
 80021d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021d2:	881b      	ldrh	r3, [r3, #0]
 80021d4:	b29b      	uxth	r3, r3
 80021d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80021da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80021de:	b29a      	uxth	r2, r3
 80021e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021e2:	801a      	strh	r2, [r3, #0]
 80021e4:	e047      	b.n	8002276 <HAL_PCD_EP_DB_Transmit+0x392>
 80021e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80021e8:	2b3e      	cmp	r3, #62	; 0x3e
 80021ea:	d811      	bhi.n	8002210 <HAL_PCD_EP_DB_Transmit+0x32c>
 80021ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80021ee:	085b      	lsrs	r3, r3, #1
 80021f0:	64bb      	str	r3, [r7, #72]	; 0x48
 80021f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80021f4:	f003 0301 	and.w	r3, r3, #1
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d002      	beq.n	8002202 <HAL_PCD_EP_DB_Transmit+0x31e>
 80021fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021fe:	3301      	adds	r3, #1
 8002200:	64bb      	str	r3, [r7, #72]	; 0x48
 8002202:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002204:	b29b      	uxth	r3, r3
 8002206:	029b      	lsls	r3, r3, #10
 8002208:	b29a      	uxth	r2, r3
 800220a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800220c:	801a      	strh	r2, [r3, #0]
 800220e:	e032      	b.n	8002276 <HAL_PCD_EP_DB_Transmit+0x392>
 8002210:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002212:	095b      	lsrs	r3, r3, #5
 8002214:	64bb      	str	r3, [r7, #72]	; 0x48
 8002216:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002218:	f003 031f 	and.w	r3, r3, #31
 800221c:	2b00      	cmp	r3, #0
 800221e:	d102      	bne.n	8002226 <HAL_PCD_EP_DB_Transmit+0x342>
 8002220:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002222:	3b01      	subs	r3, #1
 8002224:	64bb      	str	r3, [r7, #72]	; 0x48
 8002226:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002228:	b29b      	uxth	r3, r3
 800222a:	029b      	lsls	r3, r3, #10
 800222c:	b29b      	uxth	r3, r3
 800222e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002232:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002236:	b29a      	uxth	r2, r3
 8002238:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800223a:	801a      	strh	r2, [r3, #0]
 800223c:	e01b      	b.n	8002276 <HAL_PCD_EP_DB_Transmit+0x392>
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	785b      	ldrb	r3, [r3, #1]
 8002242:	2b01      	cmp	r3, #1
 8002244:	d117      	bne.n	8002276 <HAL_PCD_EP_DB_Transmit+0x392>
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	643b      	str	r3, [r7, #64]	; 0x40
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002254:	b29b      	uxth	r3, r3
 8002256:	461a      	mov	r2, r3
 8002258:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800225a:	4413      	add	r3, r2
 800225c:	643b      	str	r3, [r7, #64]	; 0x40
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	781b      	ldrb	r3, [r3, #0]
 8002262:	011a      	lsls	r2, r3, #4
 8002264:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002266:	4413      	add	r3, r2
 8002268:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800226c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800226e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002270:	b29a      	uxth	r2, r3
 8002272:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002274:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	6818      	ldr	r0, [r3, #0]
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	6959      	ldr	r1, [r3, #20]
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	891a      	ldrh	r2, [r3, #8]
 8002282:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002284:	b29b      	uxth	r3, r3
 8002286:	f003 fe70 	bl	8005f6a <USB_WritePMA>
 800228a:	e1d0      	b.n	800262e <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002294:	b29b      	uxth	r3, r3
 8002296:	461a      	mov	r2, r3
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	781b      	ldrb	r3, [r3, #0]
 800229c:	00db      	lsls	r3, r3, #3
 800229e:	4413      	add	r3, r2
 80022a0:	3306      	adds	r3, #6
 80022a2:	005b      	lsls	r3, r3, #1
 80022a4:	68fa      	ldr	r2, [r7, #12]
 80022a6:	6812      	ldr	r2, [r2, #0]
 80022a8:	4413      	add	r3, r2
 80022aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80022ae:	881b      	ldrh	r3, [r3, #0]
 80022b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022b4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	699a      	ldr	r2, [r3, #24]
 80022bc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d307      	bcc.n	80022d4 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	699a      	ldr	r2, [r3, #24]
 80022c8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80022cc:	1ad2      	subs	r2, r2, r3
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	619a      	str	r2, [r3, #24]
 80022d2:	e002      	b.n	80022da <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	2200      	movs	r2, #0
 80022d8:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	699b      	ldr	r3, [r3, #24]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	f040 80c4 	bne.w	800246c <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	785b      	ldrb	r3, [r3, #1]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d126      	bne.n	800233a <HAL_PCD_EP_DB_Transmit+0x456>
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022fa:	b29b      	uxth	r3, r3
 80022fc:	461a      	mov	r2, r3
 80022fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002300:	4413      	add	r3, r2
 8002302:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	011a      	lsls	r2, r3, #4
 800230a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800230c:	4413      	add	r3, r2
 800230e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002312:	66bb      	str	r3, [r7, #104]	; 0x68
 8002314:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002316:	881b      	ldrh	r3, [r3, #0]
 8002318:	b29b      	uxth	r3, r3
 800231a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800231e:	b29a      	uxth	r2, r3
 8002320:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002322:	801a      	strh	r2, [r3, #0]
 8002324:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002326:	881b      	ldrh	r3, [r3, #0]
 8002328:	b29b      	uxth	r3, r3
 800232a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800232e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002332:	b29a      	uxth	r2, r3
 8002334:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002336:	801a      	strh	r2, [r3, #0]
 8002338:	e01a      	b.n	8002370 <HAL_PCD_EP_DB_Transmit+0x48c>
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	785b      	ldrb	r3, [r3, #1]
 800233e:	2b01      	cmp	r3, #1
 8002340:	d116      	bne.n	8002370 <HAL_PCD_EP_DB_Transmit+0x48c>
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	677b      	str	r3, [r7, #116]	; 0x74
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002350:	b29b      	uxth	r3, r3
 8002352:	461a      	mov	r2, r3
 8002354:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002356:	4413      	add	r3, r2
 8002358:	677b      	str	r3, [r7, #116]	; 0x74
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	781b      	ldrb	r3, [r3, #0]
 800235e:	011a      	lsls	r2, r3, #4
 8002360:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002362:	4413      	add	r3, r2
 8002364:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002368:	673b      	str	r3, [r7, #112]	; 0x70
 800236a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800236c:	2200      	movs	r2, #0
 800236e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	67bb      	str	r3, [r7, #120]	; 0x78
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	785b      	ldrb	r3, [r3, #1]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d12f      	bne.n	80023de <HAL_PCD_EP_DB_Transmit+0x4fa>
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800238e:	b29b      	uxth	r3, r3
 8002390:	461a      	mov	r2, r3
 8002392:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002396:	4413      	add	r3, r2
 8002398:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	011a      	lsls	r2, r3, #4
 80023a2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80023a6:	4413      	add	r3, r2
 80023a8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80023ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80023b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80023b4:	881b      	ldrh	r3, [r3, #0]
 80023b6:	b29b      	uxth	r3, r3
 80023b8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80023bc:	b29a      	uxth	r2, r3
 80023be:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80023c2:	801a      	strh	r2, [r3, #0]
 80023c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80023c8:	881b      	ldrh	r3, [r3, #0]
 80023ca:	b29b      	uxth	r3, r3
 80023cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80023d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80023d4:	b29a      	uxth	r2, r3
 80023d6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80023da:	801a      	strh	r2, [r3, #0]
 80023dc:	e017      	b.n	800240e <HAL_PCD_EP_DB_Transmit+0x52a>
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	785b      	ldrb	r3, [r3, #1]
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d113      	bne.n	800240e <HAL_PCD_EP_DB_Transmit+0x52a>
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023ee:	b29b      	uxth	r3, r3
 80023f0:	461a      	mov	r2, r3
 80023f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80023f4:	4413      	add	r3, r2
 80023f6:	67bb      	str	r3, [r7, #120]	; 0x78
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	781b      	ldrb	r3, [r3, #0]
 80023fc:	011a      	lsls	r2, r3, #4
 80023fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002400:	4413      	add	r3, r2
 8002402:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002406:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002408:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800240a:	2200      	movs	r2, #0
 800240c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	781b      	ldrb	r3, [r3, #0]
 8002412:	4619      	mov	r1, r3
 8002414:	68f8      	ldr	r0, [r7, #12]
 8002416:	f005 fb9a 	bl	8007b4e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800241a:	88fb      	ldrh	r3, [r7, #6]
 800241c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002420:	2b00      	cmp	r3, #0
 8002422:	f040 8104 	bne.w	800262e <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	461a      	mov	r2, r3
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	781b      	ldrb	r3, [r3, #0]
 8002430:	009b      	lsls	r3, r3, #2
 8002432:	4413      	add	r3, r2
 8002434:	881b      	ldrh	r3, [r3, #0]
 8002436:	b29b      	uxth	r3, r3
 8002438:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800243c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002440:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	461a      	mov	r2, r3
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	781b      	ldrb	r3, [r3, #0]
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	441a      	add	r2, r3
 8002452:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002456:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800245a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800245e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002462:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002466:	b29b      	uxth	r3, r3
 8002468:	8013      	strh	r3, [r2, #0]
 800246a:	e0e0      	b.n	800262e <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800246c:	88fb      	ldrh	r3, [r7, #6]
 800246e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d121      	bne.n	80024ba <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	461a      	mov	r2, r3
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	009b      	lsls	r3, r3, #2
 8002482:	4413      	add	r3, r2
 8002484:	881b      	ldrh	r3, [r3, #0]
 8002486:	b29b      	uxth	r3, r3
 8002488:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800248c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002490:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	461a      	mov	r2, r3
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	441a      	add	r2, r3
 80024a2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80024a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80024aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80024ae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80024b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024b6:	b29b      	uxth	r3, r3
 80024b8:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	f040 80b4 	bne.w	800262e <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	695a      	ldr	r2, [r3, #20]
 80024ca:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80024ce:	441a      	add	r2, r3
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	69da      	ldr	r2, [r3, #28]
 80024d8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80024dc:	441a      	add	r2, r3
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	6a1a      	ldr	r2, [r3, #32]
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	691b      	ldr	r3, [r3, #16]
 80024ea:	429a      	cmp	r2, r3
 80024ec:	d309      	bcc.n	8002502 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	691b      	ldr	r3, [r3, #16]
 80024f2:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	6a1a      	ldr	r2, [r3, #32]
 80024f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80024fa:	1ad2      	subs	r2, r2, r3
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	621a      	str	r2, [r3, #32]
 8002500:	e015      	b.n	800252e <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	6a1b      	ldr	r3, [r3, #32]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d107      	bne.n	800251a <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 800250a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800250e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	2200      	movs	r2, #0
 8002514:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002518:	e009      	b.n	800252e <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	6a1b      	ldr	r3, [r3, #32]
 800251e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	2200      	movs	r2, #0
 8002524:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	2200      	movs	r2, #0
 800252a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	667b      	str	r3, [r7, #100]	; 0x64
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	785b      	ldrb	r3, [r3, #1]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d155      	bne.n	80025e8 <HAL_PCD_EP_DB_Transmit+0x704>
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800254a:	b29b      	uxth	r3, r3
 800254c:	461a      	mov	r2, r3
 800254e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002550:	4413      	add	r3, r2
 8002552:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	781b      	ldrb	r3, [r3, #0]
 8002558:	011a      	lsls	r2, r3, #4
 800255a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800255c:	4413      	add	r3, r2
 800255e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002562:	65bb      	str	r3, [r7, #88]	; 0x58
 8002564:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002566:	2b00      	cmp	r3, #0
 8002568:	d112      	bne.n	8002590 <HAL_PCD_EP_DB_Transmit+0x6ac>
 800256a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800256c:	881b      	ldrh	r3, [r3, #0]
 800256e:	b29b      	uxth	r3, r3
 8002570:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002574:	b29a      	uxth	r2, r3
 8002576:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002578:	801a      	strh	r2, [r3, #0]
 800257a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800257c:	881b      	ldrh	r3, [r3, #0]
 800257e:	b29b      	uxth	r3, r3
 8002580:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002584:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002588:	b29a      	uxth	r2, r3
 800258a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800258c:	801a      	strh	r2, [r3, #0]
 800258e:	e044      	b.n	800261a <HAL_PCD_EP_DB_Transmit+0x736>
 8002590:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002592:	2b3e      	cmp	r3, #62	; 0x3e
 8002594:	d811      	bhi.n	80025ba <HAL_PCD_EP_DB_Transmit+0x6d6>
 8002596:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002598:	085b      	lsrs	r3, r3, #1
 800259a:	657b      	str	r3, [r7, #84]	; 0x54
 800259c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800259e:	f003 0301 	and.w	r3, r3, #1
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d002      	beq.n	80025ac <HAL_PCD_EP_DB_Transmit+0x6c8>
 80025a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025a8:	3301      	adds	r3, #1
 80025aa:	657b      	str	r3, [r7, #84]	; 0x54
 80025ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025ae:	b29b      	uxth	r3, r3
 80025b0:	029b      	lsls	r3, r3, #10
 80025b2:	b29a      	uxth	r2, r3
 80025b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80025b6:	801a      	strh	r2, [r3, #0]
 80025b8:	e02f      	b.n	800261a <HAL_PCD_EP_DB_Transmit+0x736>
 80025ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80025bc:	095b      	lsrs	r3, r3, #5
 80025be:	657b      	str	r3, [r7, #84]	; 0x54
 80025c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80025c2:	f003 031f 	and.w	r3, r3, #31
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d102      	bne.n	80025d0 <HAL_PCD_EP_DB_Transmit+0x6ec>
 80025ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025cc:	3b01      	subs	r3, #1
 80025ce:	657b      	str	r3, [r7, #84]	; 0x54
 80025d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025d2:	b29b      	uxth	r3, r3
 80025d4:	029b      	lsls	r3, r3, #10
 80025d6:	b29b      	uxth	r3, r3
 80025d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80025dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80025e0:	b29a      	uxth	r2, r3
 80025e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80025e4:	801a      	strh	r2, [r3, #0]
 80025e6:	e018      	b.n	800261a <HAL_PCD_EP_DB_Transmit+0x736>
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	785b      	ldrb	r3, [r3, #1]
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	d114      	bne.n	800261a <HAL_PCD_EP_DB_Transmit+0x736>
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025f8:	b29b      	uxth	r3, r3
 80025fa:	461a      	mov	r2, r3
 80025fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80025fe:	4413      	add	r3, r2
 8002600:	667b      	str	r3, [r7, #100]	; 0x64
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	781b      	ldrb	r3, [r3, #0]
 8002606:	011a      	lsls	r2, r3, #4
 8002608:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800260a:	4413      	add	r3, r2
 800260c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002610:	663b      	str	r3, [r7, #96]	; 0x60
 8002612:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002614:	b29a      	uxth	r2, r3
 8002616:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002618:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	6818      	ldr	r0, [r3, #0]
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	6959      	ldr	r1, [r3, #20]
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	895a      	ldrh	r2, [r3, #10]
 8002626:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002628:	b29b      	uxth	r3, r3
 800262a:	f003 fc9e 	bl	8005f6a <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	461a      	mov	r2, r3
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	781b      	ldrb	r3, [r3, #0]
 8002638:	009b      	lsls	r3, r3, #2
 800263a:	4413      	add	r3, r2
 800263c:	881b      	ldrh	r3, [r3, #0]
 800263e:	b29b      	uxth	r3, r3
 8002640:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002644:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002648:	823b      	strh	r3, [r7, #16]
 800264a:	8a3b      	ldrh	r3, [r7, #16]
 800264c:	f083 0310 	eor.w	r3, r3, #16
 8002650:	823b      	strh	r3, [r7, #16]
 8002652:	8a3b      	ldrh	r3, [r7, #16]
 8002654:	f083 0320 	eor.w	r3, r3, #32
 8002658:	823b      	strh	r3, [r7, #16]
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	461a      	mov	r2, r3
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	781b      	ldrb	r3, [r3, #0]
 8002664:	009b      	lsls	r3, r3, #2
 8002666:	441a      	add	r2, r3
 8002668:	8a3b      	ldrh	r3, [r7, #16]
 800266a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800266e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002672:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002676:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800267a:	b29b      	uxth	r3, r3
 800267c:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800267e:	2300      	movs	r3, #0
}
 8002680:	4618      	mov	r0, r3
 8002682:	3788      	adds	r7, #136	; 0x88
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}

08002688 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002688:	b480      	push	{r7}
 800268a:	b087      	sub	sp, #28
 800268c:	af00      	add	r7, sp, #0
 800268e:	60f8      	str	r0, [r7, #12]
 8002690:	607b      	str	r3, [r7, #4]
 8002692:	460b      	mov	r3, r1
 8002694:	817b      	strh	r3, [r7, #10]
 8002696:	4613      	mov	r3, r2
 8002698:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800269a:	897b      	ldrh	r3, [r7, #10]
 800269c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026a0:	b29b      	uxth	r3, r3
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d00b      	beq.n	80026be <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80026a6:	897b      	ldrh	r3, [r7, #10]
 80026a8:	f003 0307 	and.w	r3, r3, #7
 80026ac:	1c5a      	adds	r2, r3, #1
 80026ae:	4613      	mov	r3, r2
 80026b0:	009b      	lsls	r3, r3, #2
 80026b2:	4413      	add	r3, r2
 80026b4:	00db      	lsls	r3, r3, #3
 80026b6:	68fa      	ldr	r2, [r7, #12]
 80026b8:	4413      	add	r3, r2
 80026ba:	617b      	str	r3, [r7, #20]
 80026bc:	e009      	b.n	80026d2 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80026be:	897a      	ldrh	r2, [r7, #10]
 80026c0:	4613      	mov	r3, r2
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	4413      	add	r3, r2
 80026c6:	00db      	lsls	r3, r3, #3
 80026c8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80026cc:	68fa      	ldr	r2, [r7, #12]
 80026ce:	4413      	add	r3, r2
 80026d0:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80026d2:	893b      	ldrh	r3, [r7, #8]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d107      	bne.n	80026e8 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	2200      	movs	r2, #0
 80026dc:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	b29a      	uxth	r2, r3
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	80da      	strh	r2, [r3, #6]
 80026e6:	e00b      	b.n	8002700 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	2201      	movs	r2, #1
 80026ec:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	b29a      	uxth	r2, r3
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	0c1b      	lsrs	r3, r3, #16
 80026fa:	b29a      	uxth	r2, r3
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002700:	2300      	movs	r3, #0
}
 8002702:	4618      	mov	r0, r3
 8002704:	371c      	adds	r7, #28
 8002706:	46bd      	mov	sp, r7
 8002708:	bc80      	pop	{r7}
 800270a:	4770      	bx	lr

0800270c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b088      	sub	sp, #32
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d101      	bne.n	800271e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e31d      	b.n	8002d5a <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800271e:	4b94      	ldr	r3, [pc, #592]	; (8002970 <HAL_RCC_OscConfig+0x264>)
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	f003 030c 	and.w	r3, r3, #12
 8002726:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002728:	4b91      	ldr	r3, [pc, #580]	; (8002970 <HAL_RCC_OscConfig+0x264>)
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002730:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 0301 	and.w	r3, r3, #1
 800273a:	2b00      	cmp	r3, #0
 800273c:	d07b      	beq.n	8002836 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800273e:	69bb      	ldr	r3, [r7, #24]
 8002740:	2b08      	cmp	r3, #8
 8002742:	d006      	beq.n	8002752 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002744:	69bb      	ldr	r3, [r7, #24]
 8002746:	2b0c      	cmp	r3, #12
 8002748:	d10f      	bne.n	800276a <HAL_RCC_OscConfig+0x5e>
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002750:	d10b      	bne.n	800276a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002752:	4b87      	ldr	r3, [pc, #540]	; (8002970 <HAL_RCC_OscConfig+0x264>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800275a:	2b00      	cmp	r3, #0
 800275c:	d06a      	beq.n	8002834 <HAL_RCC_OscConfig+0x128>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d166      	bne.n	8002834 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	e2f7      	b.n	8002d5a <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	2b01      	cmp	r3, #1
 8002770:	d106      	bne.n	8002780 <HAL_RCC_OscConfig+0x74>
 8002772:	4b7f      	ldr	r3, [pc, #508]	; (8002970 <HAL_RCC_OscConfig+0x264>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a7e      	ldr	r2, [pc, #504]	; (8002970 <HAL_RCC_OscConfig+0x264>)
 8002778:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800277c:	6013      	str	r3, [r2, #0]
 800277e:	e02d      	b.n	80027dc <HAL_RCC_OscConfig+0xd0>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d10c      	bne.n	80027a2 <HAL_RCC_OscConfig+0x96>
 8002788:	4b79      	ldr	r3, [pc, #484]	; (8002970 <HAL_RCC_OscConfig+0x264>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a78      	ldr	r2, [pc, #480]	; (8002970 <HAL_RCC_OscConfig+0x264>)
 800278e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002792:	6013      	str	r3, [r2, #0]
 8002794:	4b76      	ldr	r3, [pc, #472]	; (8002970 <HAL_RCC_OscConfig+0x264>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a75      	ldr	r2, [pc, #468]	; (8002970 <HAL_RCC_OscConfig+0x264>)
 800279a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800279e:	6013      	str	r3, [r2, #0]
 80027a0:	e01c      	b.n	80027dc <HAL_RCC_OscConfig+0xd0>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	2b05      	cmp	r3, #5
 80027a8:	d10c      	bne.n	80027c4 <HAL_RCC_OscConfig+0xb8>
 80027aa:	4b71      	ldr	r3, [pc, #452]	; (8002970 <HAL_RCC_OscConfig+0x264>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a70      	ldr	r2, [pc, #448]	; (8002970 <HAL_RCC_OscConfig+0x264>)
 80027b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027b4:	6013      	str	r3, [r2, #0]
 80027b6:	4b6e      	ldr	r3, [pc, #440]	; (8002970 <HAL_RCC_OscConfig+0x264>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a6d      	ldr	r2, [pc, #436]	; (8002970 <HAL_RCC_OscConfig+0x264>)
 80027bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027c0:	6013      	str	r3, [r2, #0]
 80027c2:	e00b      	b.n	80027dc <HAL_RCC_OscConfig+0xd0>
 80027c4:	4b6a      	ldr	r3, [pc, #424]	; (8002970 <HAL_RCC_OscConfig+0x264>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a69      	ldr	r2, [pc, #420]	; (8002970 <HAL_RCC_OscConfig+0x264>)
 80027ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027ce:	6013      	str	r3, [r2, #0]
 80027d0:	4b67      	ldr	r3, [pc, #412]	; (8002970 <HAL_RCC_OscConfig+0x264>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a66      	ldr	r2, [pc, #408]	; (8002970 <HAL_RCC_OscConfig+0x264>)
 80027d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d013      	beq.n	800280c <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027e4:	f7fe f884 	bl	80008f0 <HAL_GetTick>
 80027e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80027ea:	e008      	b.n	80027fe <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027ec:	f7fe f880 	bl	80008f0 <HAL_GetTick>
 80027f0:	4602      	mov	r2, r0
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	2b64      	cmp	r3, #100	; 0x64
 80027f8:	d901      	bls.n	80027fe <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 80027fa:	2303      	movs	r3, #3
 80027fc:	e2ad      	b.n	8002d5a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80027fe:	4b5c      	ldr	r3, [pc, #368]	; (8002970 <HAL_RCC_OscConfig+0x264>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002806:	2b00      	cmp	r3, #0
 8002808:	d0f0      	beq.n	80027ec <HAL_RCC_OscConfig+0xe0>
 800280a:	e014      	b.n	8002836 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800280c:	f7fe f870 	bl	80008f0 <HAL_GetTick>
 8002810:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002812:	e008      	b.n	8002826 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002814:	f7fe f86c 	bl	80008f0 <HAL_GetTick>
 8002818:	4602      	mov	r2, r0
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	1ad3      	subs	r3, r2, r3
 800281e:	2b64      	cmp	r3, #100	; 0x64
 8002820:	d901      	bls.n	8002826 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8002822:	2303      	movs	r3, #3
 8002824:	e299      	b.n	8002d5a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002826:	4b52      	ldr	r3, [pc, #328]	; (8002970 <HAL_RCC_OscConfig+0x264>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800282e:	2b00      	cmp	r3, #0
 8002830:	d1f0      	bne.n	8002814 <HAL_RCC_OscConfig+0x108>
 8002832:	e000      	b.n	8002836 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002834:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 0302 	and.w	r3, r3, #2
 800283e:	2b00      	cmp	r3, #0
 8002840:	d05a      	beq.n	80028f8 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002842:	69bb      	ldr	r3, [r7, #24]
 8002844:	2b04      	cmp	r3, #4
 8002846:	d005      	beq.n	8002854 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002848:	69bb      	ldr	r3, [r7, #24]
 800284a:	2b0c      	cmp	r3, #12
 800284c:	d119      	bne.n	8002882 <HAL_RCC_OscConfig+0x176>
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d116      	bne.n	8002882 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002854:	4b46      	ldr	r3, [pc, #280]	; (8002970 <HAL_RCC_OscConfig+0x264>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 0302 	and.w	r3, r3, #2
 800285c:	2b00      	cmp	r3, #0
 800285e:	d005      	beq.n	800286c <HAL_RCC_OscConfig+0x160>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	68db      	ldr	r3, [r3, #12]
 8002864:	2b01      	cmp	r3, #1
 8002866:	d001      	beq.n	800286c <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8002868:	2301      	movs	r3, #1
 800286a:	e276      	b.n	8002d5a <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800286c:	4b40      	ldr	r3, [pc, #256]	; (8002970 <HAL_RCC_OscConfig+0x264>)
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	691b      	ldr	r3, [r3, #16]
 8002878:	021b      	lsls	r3, r3, #8
 800287a:	493d      	ldr	r1, [pc, #244]	; (8002970 <HAL_RCC_OscConfig+0x264>)
 800287c:	4313      	orrs	r3, r2
 800287e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002880:	e03a      	b.n	80028f8 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	68db      	ldr	r3, [r3, #12]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d020      	beq.n	80028cc <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800288a:	4b3a      	ldr	r3, [pc, #232]	; (8002974 <HAL_RCC_OscConfig+0x268>)
 800288c:	2201      	movs	r2, #1
 800288e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002890:	f7fe f82e 	bl	80008f0 <HAL_GetTick>
 8002894:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002896:	e008      	b.n	80028aa <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002898:	f7fe f82a 	bl	80008f0 <HAL_GetTick>
 800289c:	4602      	mov	r2, r0
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	2b02      	cmp	r3, #2
 80028a4:	d901      	bls.n	80028aa <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80028a6:	2303      	movs	r3, #3
 80028a8:	e257      	b.n	8002d5a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80028aa:	4b31      	ldr	r3, [pc, #196]	; (8002970 <HAL_RCC_OscConfig+0x264>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 0302 	and.w	r3, r3, #2
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d0f0      	beq.n	8002898 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028b6:	4b2e      	ldr	r3, [pc, #184]	; (8002970 <HAL_RCC_OscConfig+0x264>)
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	691b      	ldr	r3, [r3, #16]
 80028c2:	021b      	lsls	r3, r3, #8
 80028c4:	492a      	ldr	r1, [pc, #168]	; (8002970 <HAL_RCC_OscConfig+0x264>)
 80028c6:	4313      	orrs	r3, r2
 80028c8:	604b      	str	r3, [r1, #4]
 80028ca:	e015      	b.n	80028f8 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028cc:	4b29      	ldr	r3, [pc, #164]	; (8002974 <HAL_RCC_OscConfig+0x268>)
 80028ce:	2200      	movs	r2, #0
 80028d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028d2:	f7fe f80d 	bl	80008f0 <HAL_GetTick>
 80028d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80028d8:	e008      	b.n	80028ec <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028da:	f7fe f809 	bl	80008f0 <HAL_GetTick>
 80028de:	4602      	mov	r2, r0
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	1ad3      	subs	r3, r2, r3
 80028e4:	2b02      	cmp	r3, #2
 80028e6:	d901      	bls.n	80028ec <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 80028e8:	2303      	movs	r3, #3
 80028ea:	e236      	b.n	8002d5a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80028ec:	4b20      	ldr	r3, [pc, #128]	; (8002970 <HAL_RCC_OscConfig+0x264>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 0302 	and.w	r3, r3, #2
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d1f0      	bne.n	80028da <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 0310 	and.w	r3, r3, #16
 8002900:	2b00      	cmp	r3, #0
 8002902:	f000 80b8 	beq.w	8002a76 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002906:	69bb      	ldr	r3, [r7, #24]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d170      	bne.n	80029ee <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800290c:	4b18      	ldr	r3, [pc, #96]	; (8002970 <HAL_RCC_OscConfig+0x264>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002914:	2b00      	cmp	r3, #0
 8002916:	d005      	beq.n	8002924 <HAL_RCC_OscConfig+0x218>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	699b      	ldr	r3, [r3, #24]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d101      	bne.n	8002924 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	e21a      	b.n	8002d5a <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6a1a      	ldr	r2, [r3, #32]
 8002928:	4b11      	ldr	r3, [pc, #68]	; (8002970 <HAL_RCC_OscConfig+0x264>)
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8002930:	429a      	cmp	r2, r3
 8002932:	d921      	bls.n	8002978 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6a1b      	ldr	r3, [r3, #32]
 8002938:	4618      	mov	r0, r3
 800293a:	f000 fc7d 	bl	8003238 <RCC_SetFlashLatencyFromMSIRange>
 800293e:	4603      	mov	r3, r0
 8002940:	2b00      	cmp	r3, #0
 8002942:	d001      	beq.n	8002948 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	e208      	b.n	8002d5a <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002948:	4b09      	ldr	r3, [pc, #36]	; (8002970 <HAL_RCC_OscConfig+0x264>)
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6a1b      	ldr	r3, [r3, #32]
 8002954:	4906      	ldr	r1, [pc, #24]	; (8002970 <HAL_RCC_OscConfig+0x264>)
 8002956:	4313      	orrs	r3, r2
 8002958:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800295a:	4b05      	ldr	r3, [pc, #20]	; (8002970 <HAL_RCC_OscConfig+0x264>)
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	69db      	ldr	r3, [r3, #28]
 8002966:	061b      	lsls	r3, r3, #24
 8002968:	4901      	ldr	r1, [pc, #4]	; (8002970 <HAL_RCC_OscConfig+0x264>)
 800296a:	4313      	orrs	r3, r2
 800296c:	604b      	str	r3, [r1, #4]
 800296e:	e020      	b.n	80029b2 <HAL_RCC_OscConfig+0x2a6>
 8002970:	40023800 	.word	0x40023800
 8002974:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002978:	4b99      	ldr	r3, [pc, #612]	; (8002be0 <HAL_RCC_OscConfig+0x4d4>)
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6a1b      	ldr	r3, [r3, #32]
 8002984:	4996      	ldr	r1, [pc, #600]	; (8002be0 <HAL_RCC_OscConfig+0x4d4>)
 8002986:	4313      	orrs	r3, r2
 8002988:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800298a:	4b95      	ldr	r3, [pc, #596]	; (8002be0 <HAL_RCC_OscConfig+0x4d4>)
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	69db      	ldr	r3, [r3, #28]
 8002996:	061b      	lsls	r3, r3, #24
 8002998:	4991      	ldr	r1, [pc, #580]	; (8002be0 <HAL_RCC_OscConfig+0x4d4>)
 800299a:	4313      	orrs	r3, r2
 800299c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6a1b      	ldr	r3, [r3, #32]
 80029a2:	4618      	mov	r0, r3
 80029a4:	f000 fc48 	bl	8003238 <RCC_SetFlashLatencyFromMSIRange>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d001      	beq.n	80029b2 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e1d3      	b.n	8002d5a <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6a1b      	ldr	r3, [r3, #32]
 80029b6:	0b5b      	lsrs	r3, r3, #13
 80029b8:	3301      	adds	r3, #1
 80029ba:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80029be:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80029c2:	4a87      	ldr	r2, [pc, #540]	; (8002be0 <HAL_RCC_OscConfig+0x4d4>)
 80029c4:	6892      	ldr	r2, [r2, #8]
 80029c6:	0912      	lsrs	r2, r2, #4
 80029c8:	f002 020f 	and.w	r2, r2, #15
 80029cc:	4985      	ldr	r1, [pc, #532]	; (8002be4 <HAL_RCC_OscConfig+0x4d8>)
 80029ce:	5c8a      	ldrb	r2, [r1, r2]
 80029d0:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80029d2:	4a85      	ldr	r2, [pc, #532]	; (8002be8 <HAL_RCC_OscConfig+0x4dc>)
 80029d4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80029d6:	4b85      	ldr	r3, [pc, #532]	; (8002bec <HAL_RCC_OscConfig+0x4e0>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4618      	mov	r0, r3
 80029dc:	f7fd ff3c 	bl	8000858 <HAL_InitTick>
 80029e0:	4603      	mov	r3, r0
 80029e2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80029e4:	7bfb      	ldrb	r3, [r7, #15]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d045      	beq.n	8002a76 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 80029ea:	7bfb      	ldrb	r3, [r7, #15]
 80029ec:	e1b5      	b.n	8002d5a <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	699b      	ldr	r3, [r3, #24]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d029      	beq.n	8002a4a <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80029f6:	4b7e      	ldr	r3, [pc, #504]	; (8002bf0 <HAL_RCC_OscConfig+0x4e4>)
 80029f8:	2201      	movs	r2, #1
 80029fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029fc:	f7fd ff78 	bl	80008f0 <HAL_GetTick>
 8002a00:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002a02:	e008      	b.n	8002a16 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a04:	f7fd ff74 	bl	80008f0 <HAL_GetTick>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	1ad3      	subs	r3, r2, r3
 8002a0e:	2b02      	cmp	r3, #2
 8002a10:	d901      	bls.n	8002a16 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8002a12:	2303      	movs	r3, #3
 8002a14:	e1a1      	b.n	8002d5a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002a16:	4b72      	ldr	r3, [pc, #456]	; (8002be0 <HAL_RCC_OscConfig+0x4d4>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d0f0      	beq.n	8002a04 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a22:	4b6f      	ldr	r3, [pc, #444]	; (8002be0 <HAL_RCC_OscConfig+0x4d4>)
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6a1b      	ldr	r3, [r3, #32]
 8002a2e:	496c      	ldr	r1, [pc, #432]	; (8002be0 <HAL_RCC_OscConfig+0x4d4>)
 8002a30:	4313      	orrs	r3, r2
 8002a32:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a34:	4b6a      	ldr	r3, [pc, #424]	; (8002be0 <HAL_RCC_OscConfig+0x4d4>)
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	69db      	ldr	r3, [r3, #28]
 8002a40:	061b      	lsls	r3, r3, #24
 8002a42:	4967      	ldr	r1, [pc, #412]	; (8002be0 <HAL_RCC_OscConfig+0x4d4>)
 8002a44:	4313      	orrs	r3, r2
 8002a46:	604b      	str	r3, [r1, #4]
 8002a48:	e015      	b.n	8002a76 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002a4a:	4b69      	ldr	r3, [pc, #420]	; (8002bf0 <HAL_RCC_OscConfig+0x4e4>)
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a50:	f7fd ff4e 	bl	80008f0 <HAL_GetTick>
 8002a54:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002a56:	e008      	b.n	8002a6a <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a58:	f7fd ff4a 	bl	80008f0 <HAL_GetTick>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	2b02      	cmp	r3, #2
 8002a64:	d901      	bls.n	8002a6a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8002a66:	2303      	movs	r3, #3
 8002a68:	e177      	b.n	8002d5a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002a6a:	4b5d      	ldr	r3, [pc, #372]	; (8002be0 <HAL_RCC_OscConfig+0x4d4>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d1f0      	bne.n	8002a58 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 0308 	and.w	r3, r3, #8
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d030      	beq.n	8002ae4 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	695b      	ldr	r3, [r3, #20]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d016      	beq.n	8002ab8 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a8a:	4b5a      	ldr	r3, [pc, #360]	; (8002bf4 <HAL_RCC_OscConfig+0x4e8>)
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a90:	f7fd ff2e 	bl	80008f0 <HAL_GetTick>
 8002a94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002a96:	e008      	b.n	8002aaa <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a98:	f7fd ff2a 	bl	80008f0 <HAL_GetTick>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	1ad3      	subs	r3, r2, r3
 8002aa2:	2b02      	cmp	r3, #2
 8002aa4:	d901      	bls.n	8002aaa <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002aa6:	2303      	movs	r3, #3
 8002aa8:	e157      	b.n	8002d5a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002aaa:	4b4d      	ldr	r3, [pc, #308]	; (8002be0 <HAL_RCC_OscConfig+0x4d4>)
 8002aac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002aae:	f003 0302 	and.w	r3, r3, #2
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d0f0      	beq.n	8002a98 <HAL_RCC_OscConfig+0x38c>
 8002ab6:	e015      	b.n	8002ae4 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ab8:	4b4e      	ldr	r3, [pc, #312]	; (8002bf4 <HAL_RCC_OscConfig+0x4e8>)
 8002aba:	2200      	movs	r2, #0
 8002abc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002abe:	f7fd ff17 	bl	80008f0 <HAL_GetTick>
 8002ac2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002ac4:	e008      	b.n	8002ad8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ac6:	f7fd ff13 	bl	80008f0 <HAL_GetTick>
 8002aca:	4602      	mov	r2, r0
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	1ad3      	subs	r3, r2, r3
 8002ad0:	2b02      	cmp	r3, #2
 8002ad2:	d901      	bls.n	8002ad8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002ad4:	2303      	movs	r3, #3
 8002ad6:	e140      	b.n	8002d5a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002ad8:	4b41      	ldr	r3, [pc, #260]	; (8002be0 <HAL_RCC_OscConfig+0x4d4>)
 8002ada:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002adc:	f003 0302 	and.w	r3, r3, #2
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d1f0      	bne.n	8002ac6 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 0304 	and.w	r3, r3, #4
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	f000 80b5 	beq.w	8002c5c <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002af2:	2300      	movs	r3, #0
 8002af4:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002af6:	4b3a      	ldr	r3, [pc, #232]	; (8002be0 <HAL_RCC_OscConfig+0x4d4>)
 8002af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002afa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d10d      	bne.n	8002b1e <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b02:	4b37      	ldr	r3, [pc, #220]	; (8002be0 <HAL_RCC_OscConfig+0x4d4>)
 8002b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b06:	4a36      	ldr	r2, [pc, #216]	; (8002be0 <HAL_RCC_OscConfig+0x4d4>)
 8002b08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b0c:	6253      	str	r3, [r2, #36]	; 0x24
 8002b0e:	4b34      	ldr	r3, [pc, #208]	; (8002be0 <HAL_RCC_OscConfig+0x4d4>)
 8002b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b16:	60bb      	str	r3, [r7, #8]
 8002b18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b1e:	4b36      	ldr	r3, [pc, #216]	; (8002bf8 <HAL_RCC_OscConfig+0x4ec>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d118      	bne.n	8002b5c <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b2a:	4b33      	ldr	r3, [pc, #204]	; (8002bf8 <HAL_RCC_OscConfig+0x4ec>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a32      	ldr	r2, [pc, #200]	; (8002bf8 <HAL_RCC_OscConfig+0x4ec>)
 8002b30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b36:	f7fd fedb 	bl	80008f0 <HAL_GetTick>
 8002b3a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b3c:	e008      	b.n	8002b50 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b3e:	f7fd fed7 	bl	80008f0 <HAL_GetTick>
 8002b42:	4602      	mov	r2, r0
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	1ad3      	subs	r3, r2, r3
 8002b48:	2b64      	cmp	r3, #100	; 0x64
 8002b4a:	d901      	bls.n	8002b50 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8002b4c:	2303      	movs	r3, #3
 8002b4e:	e104      	b.n	8002d5a <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b50:	4b29      	ldr	r3, [pc, #164]	; (8002bf8 <HAL_RCC_OscConfig+0x4ec>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d0f0      	beq.n	8002b3e <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d106      	bne.n	8002b72 <HAL_RCC_OscConfig+0x466>
 8002b64:	4b1e      	ldr	r3, [pc, #120]	; (8002be0 <HAL_RCC_OscConfig+0x4d4>)
 8002b66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b68:	4a1d      	ldr	r2, [pc, #116]	; (8002be0 <HAL_RCC_OscConfig+0x4d4>)
 8002b6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b6e:	6353      	str	r3, [r2, #52]	; 0x34
 8002b70:	e02d      	b.n	8002bce <HAL_RCC_OscConfig+0x4c2>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d10c      	bne.n	8002b94 <HAL_RCC_OscConfig+0x488>
 8002b7a:	4b19      	ldr	r3, [pc, #100]	; (8002be0 <HAL_RCC_OscConfig+0x4d4>)
 8002b7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b7e:	4a18      	ldr	r2, [pc, #96]	; (8002be0 <HAL_RCC_OscConfig+0x4d4>)
 8002b80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b84:	6353      	str	r3, [r2, #52]	; 0x34
 8002b86:	4b16      	ldr	r3, [pc, #88]	; (8002be0 <HAL_RCC_OscConfig+0x4d4>)
 8002b88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b8a:	4a15      	ldr	r2, [pc, #84]	; (8002be0 <HAL_RCC_OscConfig+0x4d4>)
 8002b8c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002b90:	6353      	str	r3, [r2, #52]	; 0x34
 8002b92:	e01c      	b.n	8002bce <HAL_RCC_OscConfig+0x4c2>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	2b05      	cmp	r3, #5
 8002b9a:	d10c      	bne.n	8002bb6 <HAL_RCC_OscConfig+0x4aa>
 8002b9c:	4b10      	ldr	r3, [pc, #64]	; (8002be0 <HAL_RCC_OscConfig+0x4d4>)
 8002b9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ba0:	4a0f      	ldr	r2, [pc, #60]	; (8002be0 <HAL_RCC_OscConfig+0x4d4>)
 8002ba2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ba6:	6353      	str	r3, [r2, #52]	; 0x34
 8002ba8:	4b0d      	ldr	r3, [pc, #52]	; (8002be0 <HAL_RCC_OscConfig+0x4d4>)
 8002baa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bac:	4a0c      	ldr	r2, [pc, #48]	; (8002be0 <HAL_RCC_OscConfig+0x4d4>)
 8002bae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bb2:	6353      	str	r3, [r2, #52]	; 0x34
 8002bb4:	e00b      	b.n	8002bce <HAL_RCC_OscConfig+0x4c2>
 8002bb6:	4b0a      	ldr	r3, [pc, #40]	; (8002be0 <HAL_RCC_OscConfig+0x4d4>)
 8002bb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bba:	4a09      	ldr	r2, [pc, #36]	; (8002be0 <HAL_RCC_OscConfig+0x4d4>)
 8002bbc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002bc0:	6353      	str	r3, [r2, #52]	; 0x34
 8002bc2:	4b07      	ldr	r3, [pc, #28]	; (8002be0 <HAL_RCC_OscConfig+0x4d4>)
 8002bc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bc6:	4a06      	ldr	r2, [pc, #24]	; (8002be0 <HAL_RCC_OscConfig+0x4d4>)
 8002bc8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002bcc:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d024      	beq.n	8002c20 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bd6:	f7fd fe8b 	bl	80008f0 <HAL_GetTick>
 8002bda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002bdc:	e019      	b.n	8002c12 <HAL_RCC_OscConfig+0x506>
 8002bde:	bf00      	nop
 8002be0:	40023800 	.word	0x40023800
 8002be4:	080080bc 	.word	0x080080bc
 8002be8:	20000000 	.word	0x20000000
 8002bec:	20000004 	.word	0x20000004
 8002bf0:	42470020 	.word	0x42470020
 8002bf4:	42470680 	.word	0x42470680
 8002bf8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bfc:	f7fd fe78 	bl	80008f0 <HAL_GetTick>
 8002c00:	4602      	mov	r2, r0
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	1ad3      	subs	r3, r2, r3
 8002c06:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d901      	bls.n	8002c12 <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 8002c0e:	2303      	movs	r3, #3
 8002c10:	e0a3      	b.n	8002d5a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002c12:	4b54      	ldr	r3, [pc, #336]	; (8002d64 <HAL_RCC_OscConfig+0x658>)
 8002c14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d0ee      	beq.n	8002bfc <HAL_RCC_OscConfig+0x4f0>
 8002c1e:	e014      	b.n	8002c4a <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c20:	f7fd fe66 	bl	80008f0 <HAL_GetTick>
 8002c24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002c26:	e00a      	b.n	8002c3e <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c28:	f7fd fe62 	bl	80008f0 <HAL_GetTick>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d901      	bls.n	8002c3e <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8002c3a:	2303      	movs	r3, #3
 8002c3c:	e08d      	b.n	8002d5a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002c3e:	4b49      	ldr	r3, [pc, #292]	; (8002d64 <HAL_RCC_OscConfig+0x658>)
 8002c40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c42:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d1ee      	bne.n	8002c28 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002c4a:	7ffb      	ldrb	r3, [r7, #31]
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d105      	bne.n	8002c5c <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c50:	4b44      	ldr	r3, [pc, #272]	; (8002d64 <HAL_RCC_OscConfig+0x658>)
 8002c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c54:	4a43      	ldr	r2, [pc, #268]	; (8002d64 <HAL_RCC_OscConfig+0x658>)
 8002c56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c5a:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d079      	beq.n	8002d58 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c64:	69bb      	ldr	r3, [r7, #24]
 8002c66:	2b0c      	cmp	r3, #12
 8002c68:	d056      	beq.n	8002d18 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c6e:	2b02      	cmp	r3, #2
 8002c70:	d13b      	bne.n	8002cea <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c72:	4b3d      	ldr	r3, [pc, #244]	; (8002d68 <HAL_RCC_OscConfig+0x65c>)
 8002c74:	2200      	movs	r2, #0
 8002c76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c78:	f7fd fe3a 	bl	80008f0 <HAL_GetTick>
 8002c7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002c7e:	e008      	b.n	8002c92 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c80:	f7fd fe36 	bl	80008f0 <HAL_GetTick>
 8002c84:	4602      	mov	r2, r0
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	2b02      	cmp	r3, #2
 8002c8c:	d901      	bls.n	8002c92 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8002c8e:	2303      	movs	r3, #3
 8002c90:	e063      	b.n	8002d5a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002c92:	4b34      	ldr	r3, [pc, #208]	; (8002d64 <HAL_RCC_OscConfig+0x658>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d1f0      	bne.n	8002c80 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c9e:	4b31      	ldr	r3, [pc, #196]	; (8002d64 <HAL_RCC_OscConfig+0x658>)
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cae:	4319      	orrs	r1, r3
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb4:	430b      	orrs	r3, r1
 8002cb6:	492b      	ldr	r1, [pc, #172]	; (8002d64 <HAL_RCC_OscConfig+0x658>)
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002cbc:	4b2a      	ldr	r3, [pc, #168]	; (8002d68 <HAL_RCC_OscConfig+0x65c>)
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cc2:	f7fd fe15 	bl	80008f0 <HAL_GetTick>
 8002cc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002cc8:	e008      	b.n	8002cdc <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cca:	f7fd fe11 	bl	80008f0 <HAL_GetTick>
 8002cce:	4602      	mov	r2, r0
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	1ad3      	subs	r3, r2, r3
 8002cd4:	2b02      	cmp	r3, #2
 8002cd6:	d901      	bls.n	8002cdc <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8002cd8:	2303      	movs	r3, #3
 8002cda:	e03e      	b.n	8002d5a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002cdc:	4b21      	ldr	r3, [pc, #132]	; (8002d64 <HAL_RCC_OscConfig+0x658>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d0f0      	beq.n	8002cca <HAL_RCC_OscConfig+0x5be>
 8002ce8:	e036      	b.n	8002d58 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cea:	4b1f      	ldr	r3, [pc, #124]	; (8002d68 <HAL_RCC_OscConfig+0x65c>)
 8002cec:	2200      	movs	r2, #0
 8002cee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cf0:	f7fd fdfe 	bl	80008f0 <HAL_GetTick>
 8002cf4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002cf6:	e008      	b.n	8002d0a <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cf8:	f7fd fdfa 	bl	80008f0 <HAL_GetTick>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	2b02      	cmp	r3, #2
 8002d04:	d901      	bls.n	8002d0a <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8002d06:	2303      	movs	r3, #3
 8002d08:	e027      	b.n	8002d5a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d0a:	4b16      	ldr	r3, [pc, #88]	; (8002d64 <HAL_RCC_OscConfig+0x658>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d1f0      	bne.n	8002cf8 <HAL_RCC_OscConfig+0x5ec>
 8002d16:	e01f      	b.n	8002d58 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d101      	bne.n	8002d24 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	e01a      	b.n	8002d5a <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002d24:	4b0f      	ldr	r3, [pc, #60]	; (8002d64 <HAL_RCC_OscConfig+0x658>)
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d10d      	bne.n	8002d54 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d42:	429a      	cmp	r2, r3
 8002d44:	d106      	bne.n	8002d54 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002d50:	429a      	cmp	r2, r3
 8002d52:	d001      	beq.n	8002d58 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	e000      	b.n	8002d5a <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8002d58:	2300      	movs	r3, #0
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	3720      	adds	r7, #32
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}
 8002d62:	bf00      	nop
 8002d64:	40023800 	.word	0x40023800
 8002d68:	42470060 	.word	0x42470060

08002d6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b084      	sub	sp, #16
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
 8002d74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d101      	bne.n	8002d80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e11a      	b.n	8002fb6 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d80:	4b8f      	ldr	r3, [pc, #572]	; (8002fc0 <HAL_RCC_ClockConfig+0x254>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 0301 	and.w	r3, r3, #1
 8002d88:	683a      	ldr	r2, [r7, #0]
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	d919      	bls.n	8002dc2 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d105      	bne.n	8002da0 <HAL_RCC_ClockConfig+0x34>
 8002d94:	4b8a      	ldr	r3, [pc, #552]	; (8002fc0 <HAL_RCC_ClockConfig+0x254>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a89      	ldr	r2, [pc, #548]	; (8002fc0 <HAL_RCC_ClockConfig+0x254>)
 8002d9a:	f043 0304 	orr.w	r3, r3, #4
 8002d9e:	6013      	str	r3, [r2, #0]
 8002da0:	4b87      	ldr	r3, [pc, #540]	; (8002fc0 <HAL_RCC_ClockConfig+0x254>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f023 0201 	bic.w	r2, r3, #1
 8002da8:	4985      	ldr	r1, [pc, #532]	; (8002fc0 <HAL_RCC_ClockConfig+0x254>)
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	4313      	orrs	r3, r2
 8002dae:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002db0:	4b83      	ldr	r3, [pc, #524]	; (8002fc0 <HAL_RCC_ClockConfig+0x254>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 0301 	and.w	r3, r3, #1
 8002db8:	683a      	ldr	r2, [r7, #0]
 8002dba:	429a      	cmp	r2, r3
 8002dbc:	d001      	beq.n	8002dc2 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e0f9      	b.n	8002fb6 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 0302 	and.w	r3, r3, #2
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d008      	beq.n	8002de0 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002dce:	4b7d      	ldr	r3, [pc, #500]	; (8002fc4 <HAL_RCC_ClockConfig+0x258>)
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	497a      	ldr	r1, [pc, #488]	; (8002fc4 <HAL_RCC_ClockConfig+0x258>)
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 0301 	and.w	r3, r3, #1
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	f000 808e 	beq.w	8002f0a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	2b02      	cmp	r3, #2
 8002df4:	d107      	bne.n	8002e06 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002df6:	4b73      	ldr	r3, [pc, #460]	; (8002fc4 <HAL_RCC_ClockConfig+0x258>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d121      	bne.n	8002e46 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e0d7      	b.n	8002fb6 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	2b03      	cmp	r3, #3
 8002e0c:	d107      	bne.n	8002e1e <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002e0e:	4b6d      	ldr	r3, [pc, #436]	; (8002fc4 <HAL_RCC_ClockConfig+0x258>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d115      	bne.n	8002e46 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e0cb      	b.n	8002fb6 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	2b01      	cmp	r3, #1
 8002e24:	d107      	bne.n	8002e36 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002e26:	4b67      	ldr	r3, [pc, #412]	; (8002fc4 <HAL_RCC_ClockConfig+0x258>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 0302 	and.w	r3, r3, #2
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d109      	bne.n	8002e46 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e0bf      	b.n	8002fb6 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002e36:	4b63      	ldr	r3, [pc, #396]	; (8002fc4 <HAL_RCC_ClockConfig+0x258>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d101      	bne.n	8002e46 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e0b7      	b.n	8002fb6 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e46:	4b5f      	ldr	r3, [pc, #380]	; (8002fc4 <HAL_RCC_ClockConfig+0x258>)
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	f023 0203 	bic.w	r2, r3, #3
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	495c      	ldr	r1, [pc, #368]	; (8002fc4 <HAL_RCC_ClockConfig+0x258>)
 8002e54:	4313      	orrs	r3, r2
 8002e56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e58:	f7fd fd4a 	bl	80008f0 <HAL_GetTick>
 8002e5c:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	2b02      	cmp	r3, #2
 8002e64:	d112      	bne.n	8002e8c <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e66:	e00a      	b.n	8002e7e <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e68:	f7fd fd42 	bl	80008f0 <HAL_GetTick>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	1ad3      	subs	r3, r2, r3
 8002e72:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d901      	bls.n	8002e7e <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	e09b      	b.n	8002fb6 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e7e:	4b51      	ldr	r3, [pc, #324]	; (8002fc4 <HAL_RCC_ClockConfig+0x258>)
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	f003 030c 	and.w	r3, r3, #12
 8002e86:	2b08      	cmp	r3, #8
 8002e88:	d1ee      	bne.n	8002e68 <HAL_RCC_ClockConfig+0xfc>
 8002e8a:	e03e      	b.n	8002f0a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	2b03      	cmp	r3, #3
 8002e92:	d112      	bne.n	8002eba <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e94:	e00a      	b.n	8002eac <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e96:	f7fd fd2b 	bl	80008f0 <HAL_GetTick>
 8002e9a:	4602      	mov	r2, r0
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	1ad3      	subs	r3, r2, r3
 8002ea0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d901      	bls.n	8002eac <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8002ea8:	2303      	movs	r3, #3
 8002eaa:	e084      	b.n	8002fb6 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002eac:	4b45      	ldr	r3, [pc, #276]	; (8002fc4 <HAL_RCC_ClockConfig+0x258>)
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	f003 030c 	and.w	r3, r3, #12
 8002eb4:	2b0c      	cmp	r3, #12
 8002eb6:	d1ee      	bne.n	8002e96 <HAL_RCC_ClockConfig+0x12a>
 8002eb8:	e027      	b.n	8002f0a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	d11d      	bne.n	8002efe <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ec2:	e00a      	b.n	8002eda <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ec4:	f7fd fd14 	bl	80008f0 <HAL_GetTick>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d901      	bls.n	8002eda <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8002ed6:	2303      	movs	r3, #3
 8002ed8:	e06d      	b.n	8002fb6 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002eda:	4b3a      	ldr	r3, [pc, #232]	; (8002fc4 <HAL_RCC_ClockConfig+0x258>)
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	f003 030c 	and.w	r3, r3, #12
 8002ee2:	2b04      	cmp	r3, #4
 8002ee4:	d1ee      	bne.n	8002ec4 <HAL_RCC_ClockConfig+0x158>
 8002ee6:	e010      	b.n	8002f0a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ee8:	f7fd fd02 	bl	80008f0 <HAL_GetTick>
 8002eec:	4602      	mov	r2, r0
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	1ad3      	subs	r3, r2, r3
 8002ef2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d901      	bls.n	8002efe <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8002efa:	2303      	movs	r3, #3
 8002efc:	e05b      	b.n	8002fb6 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002efe:	4b31      	ldr	r3, [pc, #196]	; (8002fc4 <HAL_RCC_ClockConfig+0x258>)
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	f003 030c 	and.w	r3, r3, #12
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d1ee      	bne.n	8002ee8 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f0a:	4b2d      	ldr	r3, [pc, #180]	; (8002fc0 <HAL_RCC_ClockConfig+0x254>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 0301 	and.w	r3, r3, #1
 8002f12:	683a      	ldr	r2, [r7, #0]
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d219      	bcs.n	8002f4c <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	d105      	bne.n	8002f2a <HAL_RCC_ClockConfig+0x1be>
 8002f1e:	4b28      	ldr	r3, [pc, #160]	; (8002fc0 <HAL_RCC_ClockConfig+0x254>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a27      	ldr	r2, [pc, #156]	; (8002fc0 <HAL_RCC_ClockConfig+0x254>)
 8002f24:	f043 0304 	orr.w	r3, r3, #4
 8002f28:	6013      	str	r3, [r2, #0]
 8002f2a:	4b25      	ldr	r3, [pc, #148]	; (8002fc0 <HAL_RCC_ClockConfig+0x254>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f023 0201 	bic.w	r2, r3, #1
 8002f32:	4923      	ldr	r1, [pc, #140]	; (8002fc0 <HAL_RCC_ClockConfig+0x254>)
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	4313      	orrs	r3, r2
 8002f38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f3a:	4b21      	ldr	r3, [pc, #132]	; (8002fc0 <HAL_RCC_ClockConfig+0x254>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 0301 	and.w	r3, r3, #1
 8002f42:	683a      	ldr	r2, [r7, #0]
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d001      	beq.n	8002f4c <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e034      	b.n	8002fb6 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 0304 	and.w	r3, r3, #4
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d008      	beq.n	8002f6a <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f58:	4b1a      	ldr	r3, [pc, #104]	; (8002fc4 <HAL_RCC_ClockConfig+0x258>)
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	68db      	ldr	r3, [r3, #12]
 8002f64:	4917      	ldr	r1, [pc, #92]	; (8002fc4 <HAL_RCC_ClockConfig+0x258>)
 8002f66:	4313      	orrs	r3, r2
 8002f68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 0308 	and.w	r3, r3, #8
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d009      	beq.n	8002f8a <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f76:	4b13      	ldr	r3, [pc, #76]	; (8002fc4 <HAL_RCC_ClockConfig+0x258>)
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	691b      	ldr	r3, [r3, #16]
 8002f82:	00db      	lsls	r3, r3, #3
 8002f84:	490f      	ldr	r1, [pc, #60]	; (8002fc4 <HAL_RCC_ClockConfig+0x258>)
 8002f86:	4313      	orrs	r3, r2
 8002f88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002f8a:	f000 f823 	bl	8002fd4 <HAL_RCC_GetSysClockFreq>
 8002f8e:	4602      	mov	r2, r0
 8002f90:	4b0c      	ldr	r3, [pc, #48]	; (8002fc4 <HAL_RCC_ClockConfig+0x258>)
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	091b      	lsrs	r3, r3, #4
 8002f96:	f003 030f 	and.w	r3, r3, #15
 8002f9a:	490b      	ldr	r1, [pc, #44]	; (8002fc8 <HAL_RCC_ClockConfig+0x25c>)
 8002f9c:	5ccb      	ldrb	r3, [r1, r3]
 8002f9e:	fa22 f303 	lsr.w	r3, r2, r3
 8002fa2:	4a0a      	ldr	r2, [pc, #40]	; (8002fcc <HAL_RCC_ClockConfig+0x260>)
 8002fa4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002fa6:	4b0a      	ldr	r3, [pc, #40]	; (8002fd0 <HAL_RCC_ClockConfig+0x264>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4618      	mov	r0, r3
 8002fac:	f7fd fc54 	bl	8000858 <HAL_InitTick>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	72fb      	strb	r3, [r7, #11]

  return status;
 8002fb4:	7afb      	ldrb	r3, [r7, #11]
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3710      	adds	r7, #16
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}
 8002fbe:	bf00      	nop
 8002fc0:	40023c00 	.word	0x40023c00
 8002fc4:	40023800 	.word	0x40023800
 8002fc8:	080080bc 	.word	0x080080bc
 8002fcc:	20000000 	.word	0x20000000
 8002fd0:	20000004 	.word	0x20000004

08002fd4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002fd8:	b092      	sub	sp, #72	; 0x48
 8002fda:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8002fdc:	4b79      	ldr	r3, [pc, #484]	; (80031c4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002fe2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fe4:	f003 030c 	and.w	r3, r3, #12
 8002fe8:	2b0c      	cmp	r3, #12
 8002fea:	d00d      	beq.n	8003008 <HAL_RCC_GetSysClockFreq+0x34>
 8002fec:	2b0c      	cmp	r3, #12
 8002fee:	f200 80d5 	bhi.w	800319c <HAL_RCC_GetSysClockFreq+0x1c8>
 8002ff2:	2b04      	cmp	r3, #4
 8002ff4:	d002      	beq.n	8002ffc <HAL_RCC_GetSysClockFreq+0x28>
 8002ff6:	2b08      	cmp	r3, #8
 8002ff8:	d003      	beq.n	8003002 <HAL_RCC_GetSysClockFreq+0x2e>
 8002ffa:	e0cf      	b.n	800319c <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ffc:	4b72      	ldr	r3, [pc, #456]	; (80031c8 <HAL_RCC_GetSysClockFreq+0x1f4>)
 8002ffe:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8003000:	e0da      	b.n	80031b8 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003002:	4b72      	ldr	r3, [pc, #456]	; (80031cc <HAL_RCC_GetSysClockFreq+0x1f8>)
 8003004:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8003006:	e0d7      	b.n	80031b8 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003008:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800300a:	0c9b      	lsrs	r3, r3, #18
 800300c:	f003 020f 	and.w	r2, r3, #15
 8003010:	4b6f      	ldr	r3, [pc, #444]	; (80031d0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8003012:	5c9b      	ldrb	r3, [r3, r2]
 8003014:	63bb      	str	r3, [r7, #56]	; 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003016:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003018:	0d9b      	lsrs	r3, r3, #22
 800301a:	f003 0303 	and.w	r3, r3, #3
 800301e:	3301      	adds	r3, #1
 8003020:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003022:	4b68      	ldr	r3, [pc, #416]	; (80031c4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800302a:	2b00      	cmp	r3, #0
 800302c:	d05d      	beq.n	80030ea <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800302e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003030:	2200      	movs	r2, #0
 8003032:	4618      	mov	r0, r3
 8003034:	4611      	mov	r1, r2
 8003036:	4604      	mov	r4, r0
 8003038:	460d      	mov	r5, r1
 800303a:	4622      	mov	r2, r4
 800303c:	462b      	mov	r3, r5
 800303e:	f04f 0000 	mov.w	r0, #0
 8003042:	f04f 0100 	mov.w	r1, #0
 8003046:	0159      	lsls	r1, r3, #5
 8003048:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800304c:	0150      	lsls	r0, r2, #5
 800304e:	4602      	mov	r2, r0
 8003050:	460b      	mov	r3, r1
 8003052:	4621      	mov	r1, r4
 8003054:	1a51      	subs	r1, r2, r1
 8003056:	6139      	str	r1, [r7, #16]
 8003058:	4629      	mov	r1, r5
 800305a:	eb63 0301 	sbc.w	r3, r3, r1
 800305e:	617b      	str	r3, [r7, #20]
 8003060:	f04f 0200 	mov.w	r2, #0
 8003064:	f04f 0300 	mov.w	r3, #0
 8003068:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800306c:	4659      	mov	r1, fp
 800306e:	018b      	lsls	r3, r1, #6
 8003070:	4651      	mov	r1, sl
 8003072:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003076:	4651      	mov	r1, sl
 8003078:	018a      	lsls	r2, r1, #6
 800307a:	46d4      	mov	ip, sl
 800307c:	ebb2 080c 	subs.w	r8, r2, ip
 8003080:	4659      	mov	r1, fp
 8003082:	eb63 0901 	sbc.w	r9, r3, r1
 8003086:	f04f 0200 	mov.w	r2, #0
 800308a:	f04f 0300 	mov.w	r3, #0
 800308e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003092:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003096:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800309a:	4690      	mov	r8, r2
 800309c:	4699      	mov	r9, r3
 800309e:	4623      	mov	r3, r4
 80030a0:	eb18 0303 	adds.w	r3, r8, r3
 80030a4:	60bb      	str	r3, [r7, #8]
 80030a6:	462b      	mov	r3, r5
 80030a8:	eb49 0303 	adc.w	r3, r9, r3
 80030ac:	60fb      	str	r3, [r7, #12]
 80030ae:	f04f 0200 	mov.w	r2, #0
 80030b2:	f04f 0300 	mov.w	r3, #0
 80030b6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80030ba:	4629      	mov	r1, r5
 80030bc:	024b      	lsls	r3, r1, #9
 80030be:	4620      	mov	r0, r4
 80030c0:	4629      	mov	r1, r5
 80030c2:	4604      	mov	r4, r0
 80030c4:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 80030c8:	4601      	mov	r1, r0
 80030ca:	024a      	lsls	r2, r1, #9
 80030cc:	4610      	mov	r0, r2
 80030ce:	4619      	mov	r1, r3
 80030d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030d2:	2200      	movs	r2, #0
 80030d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80030d6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80030d8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80030dc:	f7fd f84e 	bl	800017c <__aeabi_uldivmod>
 80030e0:	4602      	mov	r2, r0
 80030e2:	460b      	mov	r3, r1
 80030e4:	4613      	mov	r3, r2
 80030e6:	647b      	str	r3, [r7, #68]	; 0x44
 80030e8:	e055      	b.n	8003196 <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80030ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030ec:	2200      	movs	r2, #0
 80030ee:	623b      	str	r3, [r7, #32]
 80030f0:	627a      	str	r2, [r7, #36]	; 0x24
 80030f2:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80030f6:	4642      	mov	r2, r8
 80030f8:	464b      	mov	r3, r9
 80030fa:	f04f 0000 	mov.w	r0, #0
 80030fe:	f04f 0100 	mov.w	r1, #0
 8003102:	0159      	lsls	r1, r3, #5
 8003104:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003108:	0150      	lsls	r0, r2, #5
 800310a:	4602      	mov	r2, r0
 800310c:	460b      	mov	r3, r1
 800310e:	46c4      	mov	ip, r8
 8003110:	ebb2 0a0c 	subs.w	sl, r2, ip
 8003114:	4640      	mov	r0, r8
 8003116:	4649      	mov	r1, r9
 8003118:	468c      	mov	ip, r1
 800311a:	eb63 0b0c 	sbc.w	fp, r3, ip
 800311e:	f04f 0200 	mov.w	r2, #0
 8003122:	f04f 0300 	mov.w	r3, #0
 8003126:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800312a:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800312e:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003132:	ebb2 040a 	subs.w	r4, r2, sl
 8003136:	eb63 050b 	sbc.w	r5, r3, fp
 800313a:	f04f 0200 	mov.w	r2, #0
 800313e:	f04f 0300 	mov.w	r3, #0
 8003142:	00eb      	lsls	r3, r5, #3
 8003144:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003148:	00e2      	lsls	r2, r4, #3
 800314a:	4614      	mov	r4, r2
 800314c:	461d      	mov	r5, r3
 800314e:	4603      	mov	r3, r0
 8003150:	18e3      	adds	r3, r4, r3
 8003152:	603b      	str	r3, [r7, #0]
 8003154:	460b      	mov	r3, r1
 8003156:	eb45 0303 	adc.w	r3, r5, r3
 800315a:	607b      	str	r3, [r7, #4]
 800315c:	f04f 0200 	mov.w	r2, #0
 8003160:	f04f 0300 	mov.w	r3, #0
 8003164:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003168:	4629      	mov	r1, r5
 800316a:	028b      	lsls	r3, r1, #10
 800316c:	4620      	mov	r0, r4
 800316e:	4629      	mov	r1, r5
 8003170:	4604      	mov	r4, r0
 8003172:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8003176:	4601      	mov	r1, r0
 8003178:	028a      	lsls	r2, r1, #10
 800317a:	4610      	mov	r0, r2
 800317c:	4619      	mov	r1, r3
 800317e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003180:	2200      	movs	r2, #0
 8003182:	61bb      	str	r3, [r7, #24]
 8003184:	61fa      	str	r2, [r7, #28]
 8003186:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800318a:	f7fc fff7 	bl	800017c <__aeabi_uldivmod>
 800318e:	4602      	mov	r2, r0
 8003190:	460b      	mov	r3, r1
 8003192:	4613      	mov	r3, r2
 8003194:	647b      	str	r3, [r7, #68]	; 0x44
      }
      sysclockfreq = pllvco;
 8003196:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003198:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 800319a:	e00d      	b.n	80031b8 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800319c:	4b09      	ldr	r3, [pc, #36]	; (80031c4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	0b5b      	lsrs	r3, r3, #13
 80031a2:	f003 0307 	and.w	r3, r3, #7
 80031a6:	633b      	str	r3, [r7, #48]	; 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80031a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031aa:	3301      	adds	r3, #1
 80031ac:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80031b0:	fa02 f303 	lsl.w	r3, r2, r3
 80031b4:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80031b6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	3748      	adds	r7, #72	; 0x48
 80031be:	46bd      	mov	sp, r7
 80031c0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80031c4:	40023800 	.word	0x40023800
 80031c8:	00f42400 	.word	0x00f42400
 80031cc:	007a1200 	.word	0x007a1200
 80031d0:	080080b0 	.word	0x080080b0

080031d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031d4:	b480      	push	{r7}
 80031d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031d8:	4b02      	ldr	r3, [pc, #8]	; (80031e4 <HAL_RCC_GetHCLKFreq+0x10>)
 80031da:	681b      	ldr	r3, [r3, #0]
}
 80031dc:	4618      	mov	r0, r3
 80031de:	46bd      	mov	sp, r7
 80031e0:	bc80      	pop	{r7}
 80031e2:	4770      	bx	lr
 80031e4:	20000000 	.word	0x20000000

080031e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80031ec:	f7ff fff2 	bl	80031d4 <HAL_RCC_GetHCLKFreq>
 80031f0:	4602      	mov	r2, r0
 80031f2:	4b05      	ldr	r3, [pc, #20]	; (8003208 <HAL_RCC_GetPCLK1Freq+0x20>)
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	0a1b      	lsrs	r3, r3, #8
 80031f8:	f003 0307 	and.w	r3, r3, #7
 80031fc:	4903      	ldr	r1, [pc, #12]	; (800320c <HAL_RCC_GetPCLK1Freq+0x24>)
 80031fe:	5ccb      	ldrb	r3, [r1, r3]
 8003200:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003204:	4618      	mov	r0, r3
 8003206:	bd80      	pop	{r7, pc}
 8003208:	40023800 	.word	0x40023800
 800320c:	080080cc 	.word	0x080080cc

08003210 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003214:	f7ff ffde 	bl	80031d4 <HAL_RCC_GetHCLKFreq>
 8003218:	4602      	mov	r2, r0
 800321a:	4b05      	ldr	r3, [pc, #20]	; (8003230 <HAL_RCC_GetPCLK2Freq+0x20>)
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	0adb      	lsrs	r3, r3, #11
 8003220:	f003 0307 	and.w	r3, r3, #7
 8003224:	4903      	ldr	r1, [pc, #12]	; (8003234 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003226:	5ccb      	ldrb	r3, [r1, r3]
 8003228:	fa22 f303 	lsr.w	r3, r2, r3
}
 800322c:	4618      	mov	r0, r3
 800322e:	bd80      	pop	{r7, pc}
 8003230:	40023800 	.word	0x40023800
 8003234:	080080cc 	.word	0x080080cc

08003238 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8003238:	b480      	push	{r7}
 800323a:	b087      	sub	sp, #28
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003240:	2300      	movs	r3, #0
 8003242:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003244:	4b29      	ldr	r3, [pc, #164]	; (80032ec <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800324c:	2b00      	cmp	r3, #0
 800324e:	d12c      	bne.n	80032aa <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003250:	4b26      	ldr	r3, [pc, #152]	; (80032ec <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003254:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003258:	2b00      	cmp	r3, #0
 800325a:	d005      	beq.n	8003268 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800325c:	4b24      	ldr	r3, [pc, #144]	; (80032f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8003264:	617b      	str	r3, [r7, #20]
 8003266:	e016      	b.n	8003296 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003268:	4b20      	ldr	r3, [pc, #128]	; (80032ec <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800326a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800326c:	4a1f      	ldr	r2, [pc, #124]	; (80032ec <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800326e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003272:	6253      	str	r3, [r2, #36]	; 0x24
 8003274:	4b1d      	ldr	r3, [pc, #116]	; (80032ec <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003278:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800327c:	60fb      	str	r3, [r7, #12]
 800327e:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8003280:	4b1b      	ldr	r3, [pc, #108]	; (80032f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8003288:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 800328a:	4b18      	ldr	r3, [pc, #96]	; (80032ec <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800328c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800328e:	4a17      	ldr	r2, [pc, #92]	; (80032ec <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003290:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003294:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 800329c:	d105      	bne.n	80032aa <RCC_SetFlashLatencyFromMSIRange+0x72>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80032a4:	d101      	bne.n	80032aa <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 80032a6:	2301      	movs	r3, #1
 80032a8:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d105      	bne.n	80032bc <RCC_SetFlashLatencyFromMSIRange+0x84>
 80032b0:	4b10      	ldr	r3, [pc, #64]	; (80032f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a0f      	ldr	r2, [pc, #60]	; (80032f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80032b6:	f043 0304 	orr.w	r3, r3, #4
 80032ba:	6013      	str	r3, [r2, #0]
 80032bc:	4b0d      	ldr	r3, [pc, #52]	; (80032f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f023 0201 	bic.w	r2, r3, #1
 80032c4:	490b      	ldr	r1, [pc, #44]	; (80032f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	4313      	orrs	r3, r2
 80032ca:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80032cc:	4b09      	ldr	r3, [pc, #36]	; (80032f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f003 0301 	and.w	r3, r3, #1
 80032d4:	693a      	ldr	r2, [r7, #16]
 80032d6:	429a      	cmp	r2, r3
 80032d8:	d001      	beq.n	80032de <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e000      	b.n	80032e0 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 80032de:	2300      	movs	r3, #0
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	371c      	adds	r7, #28
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bc80      	pop	{r7}
 80032e8:	4770      	bx	lr
 80032ea:	bf00      	nop
 80032ec:	40023800 	.word	0x40023800
 80032f0:	40007000 	.word	0x40007000
 80032f4:	40023c00 	.word	0x40023c00

080032f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b082      	sub	sp, #8
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d101      	bne.n	800330a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	e03f      	b.n	800338a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003310:	b2db      	uxtb	r3, r3
 8003312:	2b00      	cmp	r3, #0
 8003314:	d106      	bne.n	8003324 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2200      	movs	r2, #0
 800331a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	f7fd f9e0 	bl	80006e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2224      	movs	r2, #36	; 0x24
 8003328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	68da      	ldr	r2, [r3, #12]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800333a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800333c:	6878      	ldr	r0, [r7, #4]
 800333e:	f000 f829 	bl	8003394 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	691a      	ldr	r2, [r3, #16]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003350:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	695a      	ldr	r2, [r3, #20]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003360:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	68da      	ldr	r2, [r3, #12]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003370:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2200      	movs	r2, #0
 8003376:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2220      	movs	r2, #32
 800337c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2220      	movs	r2, #32
 8003384:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003388:	2300      	movs	r3, #0
}
 800338a:	4618      	mov	r0, r3
 800338c:	3708      	adds	r7, #8
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}
	...

08003394 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b084      	sub	sp, #16
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	691b      	ldr	r3, [r3, #16]
 80033a2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	68da      	ldr	r2, [r3, #12]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	430a      	orrs	r2, r1
 80033b0:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	689a      	ldr	r2, [r3, #8]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	691b      	ldr	r3, [r3, #16]
 80033ba:	431a      	orrs	r2, r3
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	695b      	ldr	r3, [r3, #20]
 80033c0:	431a      	orrs	r2, r3
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	69db      	ldr	r3, [r3, #28]
 80033c6:	4313      	orrs	r3, r2
 80033c8:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	68db      	ldr	r3, [r3, #12]
 80033d0:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80033d4:	f023 030c 	bic.w	r3, r3, #12
 80033d8:	687a      	ldr	r2, [r7, #4]
 80033da:	6812      	ldr	r2, [r2, #0]
 80033dc:	68b9      	ldr	r1, [r7, #8]
 80033de:	430b      	orrs	r3, r1
 80033e0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	695b      	ldr	r3, [r3, #20]
 80033e8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	699a      	ldr	r2, [r3, #24]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	430a      	orrs	r2, r1
 80033f6:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a55      	ldr	r2, [pc, #340]	; (8003554 <UART_SetConfig+0x1c0>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d103      	bne.n	800340a <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003402:	f7ff ff05 	bl	8003210 <HAL_RCC_GetPCLK2Freq>
 8003406:	60f8      	str	r0, [r7, #12]
 8003408:	e002      	b.n	8003410 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800340a:	f7ff feed 	bl	80031e8 <HAL_RCC_GetPCLK1Freq>
 800340e:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	69db      	ldr	r3, [r3, #28]
 8003414:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003418:	d14c      	bne.n	80034b4 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800341a:	68fa      	ldr	r2, [r7, #12]
 800341c:	4613      	mov	r3, r2
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	4413      	add	r3, r2
 8003422:	009a      	lsls	r2, r3, #2
 8003424:	441a      	add	r2, r3
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	005b      	lsls	r3, r3, #1
 800342c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003430:	4a49      	ldr	r2, [pc, #292]	; (8003558 <UART_SetConfig+0x1c4>)
 8003432:	fba2 2303 	umull	r2, r3, r2, r3
 8003436:	095b      	lsrs	r3, r3, #5
 8003438:	0119      	lsls	r1, r3, #4
 800343a:	68fa      	ldr	r2, [r7, #12]
 800343c:	4613      	mov	r3, r2
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	4413      	add	r3, r2
 8003442:	009a      	lsls	r2, r3, #2
 8003444:	441a      	add	r2, r3
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	005b      	lsls	r3, r3, #1
 800344c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003450:	4b41      	ldr	r3, [pc, #260]	; (8003558 <UART_SetConfig+0x1c4>)
 8003452:	fba3 0302 	umull	r0, r3, r3, r2
 8003456:	095b      	lsrs	r3, r3, #5
 8003458:	2064      	movs	r0, #100	; 0x64
 800345a:	fb00 f303 	mul.w	r3, r0, r3
 800345e:	1ad3      	subs	r3, r2, r3
 8003460:	00db      	lsls	r3, r3, #3
 8003462:	3332      	adds	r3, #50	; 0x32
 8003464:	4a3c      	ldr	r2, [pc, #240]	; (8003558 <UART_SetConfig+0x1c4>)
 8003466:	fba2 2303 	umull	r2, r3, r2, r3
 800346a:	095b      	lsrs	r3, r3, #5
 800346c:	005b      	lsls	r3, r3, #1
 800346e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003472:	4419      	add	r1, r3
 8003474:	68fa      	ldr	r2, [r7, #12]
 8003476:	4613      	mov	r3, r2
 8003478:	009b      	lsls	r3, r3, #2
 800347a:	4413      	add	r3, r2
 800347c:	009a      	lsls	r2, r3, #2
 800347e:	441a      	add	r2, r3
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	005b      	lsls	r3, r3, #1
 8003486:	fbb2 f2f3 	udiv	r2, r2, r3
 800348a:	4b33      	ldr	r3, [pc, #204]	; (8003558 <UART_SetConfig+0x1c4>)
 800348c:	fba3 0302 	umull	r0, r3, r3, r2
 8003490:	095b      	lsrs	r3, r3, #5
 8003492:	2064      	movs	r0, #100	; 0x64
 8003494:	fb00 f303 	mul.w	r3, r0, r3
 8003498:	1ad3      	subs	r3, r2, r3
 800349a:	00db      	lsls	r3, r3, #3
 800349c:	3332      	adds	r3, #50	; 0x32
 800349e:	4a2e      	ldr	r2, [pc, #184]	; (8003558 <UART_SetConfig+0x1c4>)
 80034a0:	fba2 2303 	umull	r2, r3, r2, r3
 80034a4:	095b      	lsrs	r3, r3, #5
 80034a6:	f003 0207 	and.w	r2, r3, #7
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	440a      	add	r2, r1
 80034b0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80034b2:	e04a      	b.n	800354a <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80034b4:	68fa      	ldr	r2, [r7, #12]
 80034b6:	4613      	mov	r3, r2
 80034b8:	009b      	lsls	r3, r3, #2
 80034ba:	4413      	add	r3, r2
 80034bc:	009a      	lsls	r2, r3, #2
 80034be:	441a      	add	r2, r3
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80034ca:	4a23      	ldr	r2, [pc, #140]	; (8003558 <UART_SetConfig+0x1c4>)
 80034cc:	fba2 2303 	umull	r2, r3, r2, r3
 80034d0:	095b      	lsrs	r3, r3, #5
 80034d2:	0119      	lsls	r1, r3, #4
 80034d4:	68fa      	ldr	r2, [r7, #12]
 80034d6:	4613      	mov	r3, r2
 80034d8:	009b      	lsls	r3, r3, #2
 80034da:	4413      	add	r3, r2
 80034dc:	009a      	lsls	r2, r3, #2
 80034de:	441a      	add	r2, r3
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	009b      	lsls	r3, r3, #2
 80034e6:	fbb2 f2f3 	udiv	r2, r2, r3
 80034ea:	4b1b      	ldr	r3, [pc, #108]	; (8003558 <UART_SetConfig+0x1c4>)
 80034ec:	fba3 0302 	umull	r0, r3, r3, r2
 80034f0:	095b      	lsrs	r3, r3, #5
 80034f2:	2064      	movs	r0, #100	; 0x64
 80034f4:	fb00 f303 	mul.w	r3, r0, r3
 80034f8:	1ad3      	subs	r3, r2, r3
 80034fa:	011b      	lsls	r3, r3, #4
 80034fc:	3332      	adds	r3, #50	; 0x32
 80034fe:	4a16      	ldr	r2, [pc, #88]	; (8003558 <UART_SetConfig+0x1c4>)
 8003500:	fba2 2303 	umull	r2, r3, r2, r3
 8003504:	095b      	lsrs	r3, r3, #5
 8003506:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800350a:	4419      	add	r1, r3
 800350c:	68fa      	ldr	r2, [r7, #12]
 800350e:	4613      	mov	r3, r2
 8003510:	009b      	lsls	r3, r3, #2
 8003512:	4413      	add	r3, r2
 8003514:	009a      	lsls	r2, r3, #2
 8003516:	441a      	add	r2, r3
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	009b      	lsls	r3, r3, #2
 800351e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003522:	4b0d      	ldr	r3, [pc, #52]	; (8003558 <UART_SetConfig+0x1c4>)
 8003524:	fba3 0302 	umull	r0, r3, r3, r2
 8003528:	095b      	lsrs	r3, r3, #5
 800352a:	2064      	movs	r0, #100	; 0x64
 800352c:	fb00 f303 	mul.w	r3, r0, r3
 8003530:	1ad3      	subs	r3, r2, r3
 8003532:	011b      	lsls	r3, r3, #4
 8003534:	3332      	adds	r3, #50	; 0x32
 8003536:	4a08      	ldr	r2, [pc, #32]	; (8003558 <UART_SetConfig+0x1c4>)
 8003538:	fba2 2303 	umull	r2, r3, r2, r3
 800353c:	095b      	lsrs	r3, r3, #5
 800353e:	f003 020f 	and.w	r2, r3, #15
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	440a      	add	r2, r1
 8003548:	609a      	str	r2, [r3, #8]
}
 800354a:	bf00      	nop
 800354c:	3710      	adds	r7, #16
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}
 8003552:	bf00      	nop
 8003554:	40013800 	.word	0x40013800
 8003558:	51eb851f 	.word	0x51eb851f

0800355c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800355c:	b480      	push	{r7}
 800355e:	b085      	sub	sp, #20
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2200      	movs	r2, #0
 8003568:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800356c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003570:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	b29a      	uxth	r2, r3
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800357c:	2300      	movs	r3, #0
}
 800357e:	4618      	mov	r0, r3
 8003580:	3714      	adds	r7, #20
 8003582:	46bd      	mov	sp, r7
 8003584:	bc80      	pop	{r7}
 8003586:	4770      	bx	lr

08003588 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003588:	b480      	push	{r7}
 800358a:	b085      	sub	sp, #20
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003590:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003594:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800359c:	b29a      	uxth	r2, r3
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	b29b      	uxth	r3, r3
 80035a2:	43db      	mvns	r3, r3
 80035a4:	b29b      	uxth	r3, r3
 80035a6:	4013      	ands	r3, r2
 80035a8:	b29a      	uxth	r2, r3
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80035b0:	2300      	movs	r3, #0
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	3714      	adds	r7, #20
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bc80      	pop	{r7}
 80035ba:	4770      	bx	lr

080035bc <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80035bc:	b084      	sub	sp, #16
 80035be:	b480      	push	{r7}
 80035c0:	b083      	sub	sp, #12
 80035c2:	af00      	add	r7, sp, #0
 80035c4:	6078      	str	r0, [r7, #4]
 80035c6:	f107 0014 	add.w	r0, r7, #20
 80035ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2201      	movs	r2, #1
 80035d2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2200      	movs	r2, #0
 80035da:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2200      	movs	r2, #0
 80035e2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2200      	movs	r2, #0
 80035ea:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80035ee:	2300      	movs	r3, #0
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	370c      	adds	r7, #12
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bc80      	pop	{r7}
 80035f8:	b004      	add	sp, #16
 80035fa:	4770      	bx	lr

080035fc <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b09b      	sub	sp, #108	; 0x6c
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
 8003604:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8003606:	2300      	movs	r3, #0
 8003608:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800360c:	687a      	ldr	r2, [r7, #4]
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	781b      	ldrb	r3, [r3, #0]
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	4413      	add	r3, r2
 8003616:	881b      	ldrh	r3, [r3, #0]
 8003618:	b29b      	uxth	r3, r3
 800361a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800361e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003622:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	78db      	ldrb	r3, [r3, #3]
 800362a:	2b03      	cmp	r3, #3
 800362c:	d81f      	bhi.n	800366e <USB_ActivateEndpoint+0x72>
 800362e:	a201      	add	r2, pc, #4	; (adr r2, 8003634 <USB_ActivateEndpoint+0x38>)
 8003630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003634:	08003645 	.word	0x08003645
 8003638:	08003661 	.word	0x08003661
 800363c:	08003677 	.word	0x08003677
 8003640:	08003653 	.word	0x08003653
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003644:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003648:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800364c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003650:	e012      	b.n	8003678 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8003652:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003656:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800365a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800365e:	e00b      	b.n	8003678 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003660:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003664:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003668:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800366c:	e004      	b.n	8003678 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8003674:	e000      	b.n	8003678 <USB_ActivateEndpoint+0x7c>
      break;
 8003676:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8003678:	687a      	ldr	r2, [r7, #4]
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	781b      	ldrb	r3, [r3, #0]
 800367e:	009b      	lsls	r3, r3, #2
 8003680:	441a      	add	r2, r3
 8003682:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003686:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800368a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800368e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003692:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003696:	b29b      	uxth	r3, r3
 8003698:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800369a:	687a      	ldr	r2, [r7, #4]
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	781b      	ldrb	r3, [r3, #0]
 80036a0:	009b      	lsls	r3, r3, #2
 80036a2:	4413      	add	r3, r2
 80036a4:	881b      	ldrh	r3, [r3, #0]
 80036a6:	b29b      	uxth	r3, r3
 80036a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036b0:	b29a      	uxth	r2, r3
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	781b      	ldrb	r3, [r3, #0]
 80036b6:	b29b      	uxth	r3, r3
 80036b8:	4313      	orrs	r3, r2
 80036ba:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80036be:	687a      	ldr	r2, [r7, #4]
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	781b      	ldrb	r3, [r3, #0]
 80036c4:	009b      	lsls	r3, r3, #2
 80036c6:	441a      	add	r2, r3
 80036c8:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80036cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80036d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80036d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036dc:	b29b      	uxth	r3, r3
 80036de:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	7b1b      	ldrb	r3, [r3, #12]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	f040 8149 	bne.w	800397c <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	785b      	ldrb	r3, [r3, #1]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	f000 8084 	beq.w	80037fc <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	617b      	str	r3, [r7, #20]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80036fe:	b29b      	uxth	r3, r3
 8003700:	461a      	mov	r2, r3
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	4413      	add	r3, r2
 8003706:	617b      	str	r3, [r7, #20]
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	781b      	ldrb	r3, [r3, #0]
 800370c:	011a      	lsls	r2, r3, #4
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	4413      	add	r3, r2
 8003712:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003716:	613b      	str	r3, [r7, #16]
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	88db      	ldrh	r3, [r3, #6]
 800371c:	085b      	lsrs	r3, r3, #1
 800371e:	b29b      	uxth	r3, r3
 8003720:	005b      	lsls	r3, r3, #1
 8003722:	b29a      	uxth	r2, r3
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003728:	687a      	ldr	r2, [r7, #4]
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	781b      	ldrb	r3, [r3, #0]
 800372e:	009b      	lsls	r3, r3, #2
 8003730:	4413      	add	r3, r2
 8003732:	881b      	ldrh	r3, [r3, #0]
 8003734:	81fb      	strh	r3, [r7, #14]
 8003736:	89fb      	ldrh	r3, [r7, #14]
 8003738:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800373c:	2b00      	cmp	r3, #0
 800373e:	d01b      	beq.n	8003778 <USB_ActivateEndpoint+0x17c>
 8003740:	687a      	ldr	r2, [r7, #4]
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	781b      	ldrb	r3, [r3, #0]
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	4413      	add	r3, r2
 800374a:	881b      	ldrh	r3, [r3, #0]
 800374c:	b29b      	uxth	r3, r3
 800374e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003752:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003756:	81bb      	strh	r3, [r7, #12]
 8003758:	687a      	ldr	r2, [r7, #4]
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	781b      	ldrb	r3, [r3, #0]
 800375e:	009b      	lsls	r3, r3, #2
 8003760:	441a      	add	r2, r3
 8003762:	89bb      	ldrh	r3, [r7, #12]
 8003764:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003768:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800376c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003770:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003774:	b29b      	uxth	r3, r3
 8003776:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	78db      	ldrb	r3, [r3, #3]
 800377c:	2b01      	cmp	r3, #1
 800377e:	d020      	beq.n	80037c2 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003780:	687a      	ldr	r2, [r7, #4]
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	781b      	ldrb	r3, [r3, #0]
 8003786:	009b      	lsls	r3, r3, #2
 8003788:	4413      	add	r3, r2
 800378a:	881b      	ldrh	r3, [r3, #0]
 800378c:	b29b      	uxth	r3, r3
 800378e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003792:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003796:	813b      	strh	r3, [r7, #8]
 8003798:	893b      	ldrh	r3, [r7, #8]
 800379a:	f083 0320 	eor.w	r3, r3, #32
 800379e:	813b      	strh	r3, [r7, #8]
 80037a0:	687a      	ldr	r2, [r7, #4]
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	781b      	ldrb	r3, [r3, #0]
 80037a6:	009b      	lsls	r3, r3, #2
 80037a8:	441a      	add	r2, r3
 80037aa:	893b      	ldrh	r3, [r7, #8]
 80037ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80037b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80037b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037bc:	b29b      	uxth	r3, r3
 80037be:	8013      	strh	r3, [r2, #0]
 80037c0:	e27f      	b.n	8003cc2 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80037c2:	687a      	ldr	r2, [r7, #4]
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	781b      	ldrb	r3, [r3, #0]
 80037c8:	009b      	lsls	r3, r3, #2
 80037ca:	4413      	add	r3, r2
 80037cc:	881b      	ldrh	r3, [r3, #0]
 80037ce:	b29b      	uxth	r3, r3
 80037d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037d8:	817b      	strh	r3, [r7, #10]
 80037da:	687a      	ldr	r2, [r7, #4]
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	781b      	ldrb	r3, [r3, #0]
 80037e0:	009b      	lsls	r3, r3, #2
 80037e2:	441a      	add	r2, r3
 80037e4:	897b      	ldrh	r3, [r7, #10]
 80037e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80037ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80037ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037f6:	b29b      	uxth	r3, r3
 80037f8:	8013      	strh	r3, [r2, #0]
 80037fa:	e262      	b.n	8003cc2 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003806:	b29b      	uxth	r3, r3
 8003808:	461a      	mov	r2, r3
 800380a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800380c:	4413      	add	r3, r2
 800380e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	781b      	ldrb	r3, [r3, #0]
 8003814:	011a      	lsls	r2, r3, #4
 8003816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003818:	4413      	add	r3, r2
 800381a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800381e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	88db      	ldrh	r3, [r3, #6]
 8003824:	085b      	lsrs	r3, r3, #1
 8003826:	b29b      	uxth	r3, r3
 8003828:	005b      	lsls	r3, r3, #1
 800382a:	b29a      	uxth	r2, r3
 800382c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800382e:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	627b      	str	r3, [r7, #36]	; 0x24
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800383a:	b29b      	uxth	r3, r3
 800383c:	461a      	mov	r2, r3
 800383e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003840:	4413      	add	r3, r2
 8003842:	627b      	str	r3, [r7, #36]	; 0x24
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	781b      	ldrb	r3, [r3, #0]
 8003848:	011a      	lsls	r2, r3, #4
 800384a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800384c:	4413      	add	r3, r2
 800384e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003852:	623b      	str	r3, [r7, #32]
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	691b      	ldr	r3, [r3, #16]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d112      	bne.n	8003882 <USB_ActivateEndpoint+0x286>
 800385c:	6a3b      	ldr	r3, [r7, #32]
 800385e:	881b      	ldrh	r3, [r3, #0]
 8003860:	b29b      	uxth	r3, r3
 8003862:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003866:	b29a      	uxth	r2, r3
 8003868:	6a3b      	ldr	r3, [r7, #32]
 800386a:	801a      	strh	r2, [r3, #0]
 800386c:	6a3b      	ldr	r3, [r7, #32]
 800386e:	881b      	ldrh	r3, [r3, #0]
 8003870:	b29b      	uxth	r3, r3
 8003872:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003876:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800387a:	b29a      	uxth	r2, r3
 800387c:	6a3b      	ldr	r3, [r7, #32]
 800387e:	801a      	strh	r2, [r3, #0]
 8003880:	e02f      	b.n	80038e2 <USB_ActivateEndpoint+0x2e6>
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	691b      	ldr	r3, [r3, #16]
 8003886:	2b3e      	cmp	r3, #62	; 0x3e
 8003888:	d813      	bhi.n	80038b2 <USB_ActivateEndpoint+0x2b6>
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	691b      	ldr	r3, [r3, #16]
 800388e:	085b      	lsrs	r3, r3, #1
 8003890:	663b      	str	r3, [r7, #96]	; 0x60
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	691b      	ldr	r3, [r3, #16]
 8003896:	f003 0301 	and.w	r3, r3, #1
 800389a:	2b00      	cmp	r3, #0
 800389c:	d002      	beq.n	80038a4 <USB_ActivateEndpoint+0x2a8>
 800389e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80038a0:	3301      	adds	r3, #1
 80038a2:	663b      	str	r3, [r7, #96]	; 0x60
 80038a4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80038a6:	b29b      	uxth	r3, r3
 80038a8:	029b      	lsls	r3, r3, #10
 80038aa:	b29a      	uxth	r2, r3
 80038ac:	6a3b      	ldr	r3, [r7, #32]
 80038ae:	801a      	strh	r2, [r3, #0]
 80038b0:	e017      	b.n	80038e2 <USB_ActivateEndpoint+0x2e6>
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	691b      	ldr	r3, [r3, #16]
 80038b6:	095b      	lsrs	r3, r3, #5
 80038b8:	663b      	str	r3, [r7, #96]	; 0x60
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	691b      	ldr	r3, [r3, #16]
 80038be:	f003 031f 	and.w	r3, r3, #31
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d102      	bne.n	80038cc <USB_ActivateEndpoint+0x2d0>
 80038c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80038c8:	3b01      	subs	r3, #1
 80038ca:	663b      	str	r3, [r7, #96]	; 0x60
 80038cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80038ce:	b29b      	uxth	r3, r3
 80038d0:	029b      	lsls	r3, r3, #10
 80038d2:	b29b      	uxth	r3, r3
 80038d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80038d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80038dc:	b29a      	uxth	r2, r3
 80038de:	6a3b      	ldr	r3, [r7, #32]
 80038e0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80038e2:	687a      	ldr	r2, [r7, #4]
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	781b      	ldrb	r3, [r3, #0]
 80038e8:	009b      	lsls	r3, r3, #2
 80038ea:	4413      	add	r3, r2
 80038ec:	881b      	ldrh	r3, [r3, #0]
 80038ee:	83fb      	strh	r3, [r7, #30]
 80038f0:	8bfb      	ldrh	r3, [r7, #30]
 80038f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d01b      	beq.n	8003932 <USB_ActivateEndpoint+0x336>
 80038fa:	687a      	ldr	r2, [r7, #4]
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	781b      	ldrb	r3, [r3, #0]
 8003900:	009b      	lsls	r3, r3, #2
 8003902:	4413      	add	r3, r2
 8003904:	881b      	ldrh	r3, [r3, #0]
 8003906:	b29b      	uxth	r3, r3
 8003908:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800390c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003910:	83bb      	strh	r3, [r7, #28]
 8003912:	687a      	ldr	r2, [r7, #4]
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	781b      	ldrb	r3, [r3, #0]
 8003918:	009b      	lsls	r3, r3, #2
 800391a:	441a      	add	r2, r3
 800391c:	8bbb      	ldrh	r3, [r7, #28]
 800391e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003922:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003926:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800392a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800392e:	b29b      	uxth	r3, r3
 8003930:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003932:	687a      	ldr	r2, [r7, #4]
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	781b      	ldrb	r3, [r3, #0]
 8003938:	009b      	lsls	r3, r3, #2
 800393a:	4413      	add	r3, r2
 800393c:	881b      	ldrh	r3, [r3, #0]
 800393e:	b29b      	uxth	r3, r3
 8003940:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003944:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003948:	837b      	strh	r3, [r7, #26]
 800394a:	8b7b      	ldrh	r3, [r7, #26]
 800394c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003950:	837b      	strh	r3, [r7, #26]
 8003952:	8b7b      	ldrh	r3, [r7, #26]
 8003954:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003958:	837b      	strh	r3, [r7, #26]
 800395a:	687a      	ldr	r2, [r7, #4]
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	781b      	ldrb	r3, [r3, #0]
 8003960:	009b      	lsls	r3, r3, #2
 8003962:	441a      	add	r2, r3
 8003964:	8b7b      	ldrh	r3, [r7, #26]
 8003966:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800396a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800396e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003972:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003976:	b29b      	uxth	r3, r3
 8003978:	8013      	strh	r3, [r2, #0]
 800397a:	e1a2      	b.n	8003cc2 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 800397c:	687a      	ldr	r2, [r7, #4]
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	781b      	ldrb	r3, [r3, #0]
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	4413      	add	r3, r2
 8003986:	881b      	ldrh	r3, [r3, #0]
 8003988:	b29b      	uxth	r3, r3
 800398a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800398e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003992:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8003996:	687a      	ldr	r2, [r7, #4]
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	781b      	ldrb	r3, [r3, #0]
 800399c:	009b      	lsls	r3, r3, #2
 800399e:	441a      	add	r2, r3
 80039a0:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80039a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80039a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80039ac:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80039b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039b4:	b29b      	uxth	r3, r3
 80039b6:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	65bb      	str	r3, [r7, #88]	; 0x58
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039c2:	b29b      	uxth	r3, r3
 80039c4:	461a      	mov	r2, r3
 80039c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80039c8:	4413      	add	r3, r2
 80039ca:	65bb      	str	r3, [r7, #88]	; 0x58
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	781b      	ldrb	r3, [r3, #0]
 80039d0:	011a      	lsls	r2, r3, #4
 80039d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80039d4:	4413      	add	r3, r2
 80039d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80039da:	657b      	str	r3, [r7, #84]	; 0x54
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	891b      	ldrh	r3, [r3, #8]
 80039e0:	085b      	lsrs	r3, r3, #1
 80039e2:	b29b      	uxth	r3, r3
 80039e4:	005b      	lsls	r3, r3, #1
 80039e6:	b29a      	uxth	r2, r3
 80039e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039ea:	801a      	strh	r2, [r3, #0]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	653b      	str	r3, [r7, #80]	; 0x50
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039f6:	b29b      	uxth	r3, r3
 80039f8:	461a      	mov	r2, r3
 80039fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039fc:	4413      	add	r3, r2
 80039fe:	653b      	str	r3, [r7, #80]	; 0x50
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	781b      	ldrb	r3, [r3, #0]
 8003a04:	011a      	lsls	r2, r3, #4
 8003a06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a08:	4413      	add	r3, r2
 8003a0a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003a0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	895b      	ldrh	r3, [r3, #10]
 8003a14:	085b      	lsrs	r3, r3, #1
 8003a16:	b29b      	uxth	r3, r3
 8003a18:	005b      	lsls	r3, r3, #1
 8003a1a:	b29a      	uxth	r2, r3
 8003a1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a1e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	785b      	ldrb	r3, [r3, #1]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	f040 8091 	bne.w	8003b4c <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003a2a:	687a      	ldr	r2, [r7, #4]
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	781b      	ldrb	r3, [r3, #0]
 8003a30:	009b      	lsls	r3, r3, #2
 8003a32:	4413      	add	r3, r2
 8003a34:	881b      	ldrh	r3, [r3, #0]
 8003a36:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8003a38:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8003a3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d01b      	beq.n	8003a7a <USB_ActivateEndpoint+0x47e>
 8003a42:	687a      	ldr	r2, [r7, #4]
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	781b      	ldrb	r3, [r3, #0]
 8003a48:	009b      	lsls	r3, r3, #2
 8003a4a:	4413      	add	r3, r2
 8003a4c:	881b      	ldrh	r3, [r3, #0]
 8003a4e:	b29b      	uxth	r3, r3
 8003a50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a58:	877b      	strh	r3, [r7, #58]	; 0x3a
 8003a5a:	687a      	ldr	r2, [r7, #4]
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	781b      	ldrb	r3, [r3, #0]
 8003a60:	009b      	lsls	r3, r3, #2
 8003a62:	441a      	add	r2, r3
 8003a64:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8003a66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a6e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003a72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a76:	b29b      	uxth	r3, r3
 8003a78:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	781b      	ldrb	r3, [r3, #0]
 8003a80:	009b      	lsls	r3, r3, #2
 8003a82:	4413      	add	r3, r2
 8003a84:	881b      	ldrh	r3, [r3, #0]
 8003a86:	873b      	strh	r3, [r7, #56]	; 0x38
 8003a88:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003a8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d01b      	beq.n	8003aca <USB_ActivateEndpoint+0x4ce>
 8003a92:	687a      	ldr	r2, [r7, #4]
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	781b      	ldrb	r3, [r3, #0]
 8003a98:	009b      	lsls	r3, r3, #2
 8003a9a:	4413      	add	r3, r2
 8003a9c:	881b      	ldrh	r3, [r3, #0]
 8003a9e:	b29b      	uxth	r3, r3
 8003aa0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003aa4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003aa8:	86fb      	strh	r3, [r7, #54]	; 0x36
 8003aaa:	687a      	ldr	r2, [r7, #4]
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	781b      	ldrb	r3, [r3, #0]
 8003ab0:	009b      	lsls	r3, r3, #2
 8003ab2:	441a      	add	r2, r3
 8003ab4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003ab6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003aba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003abe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ac2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003ac6:	b29b      	uxth	r3, r3
 8003ac8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003aca:	687a      	ldr	r2, [r7, #4]
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	781b      	ldrb	r3, [r3, #0]
 8003ad0:	009b      	lsls	r3, r3, #2
 8003ad2:	4413      	add	r3, r2
 8003ad4:	881b      	ldrh	r3, [r3, #0]
 8003ad6:	b29b      	uxth	r3, r3
 8003ad8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003adc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ae0:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003ae2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003ae4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003ae8:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003aea:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003aec:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003af0:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003af2:	687a      	ldr	r2, [r7, #4]
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	781b      	ldrb	r3, [r3, #0]
 8003af8:	009b      	lsls	r3, r3, #2
 8003afa:	441a      	add	r2, r3
 8003afc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003afe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b0e:	b29b      	uxth	r3, r3
 8003b10:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003b12:	687a      	ldr	r2, [r7, #4]
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	781b      	ldrb	r3, [r3, #0]
 8003b18:	009b      	lsls	r3, r3, #2
 8003b1a:	4413      	add	r3, r2
 8003b1c:	881b      	ldrh	r3, [r3, #0]
 8003b1e:	b29b      	uxth	r3, r3
 8003b20:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b28:	867b      	strh	r3, [r7, #50]	; 0x32
 8003b2a:	687a      	ldr	r2, [r7, #4]
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	781b      	ldrb	r3, [r3, #0]
 8003b30:	009b      	lsls	r3, r3, #2
 8003b32:	441a      	add	r2, r3
 8003b34:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8003b36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b46:	b29b      	uxth	r3, r3
 8003b48:	8013      	strh	r3, [r2, #0]
 8003b4a:	e0ba      	b.n	8003cc2 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003b4c:	687a      	ldr	r2, [r7, #4]
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	781b      	ldrb	r3, [r3, #0]
 8003b52:	009b      	lsls	r3, r3, #2
 8003b54:	4413      	add	r3, r2
 8003b56:	881b      	ldrh	r3, [r3, #0]
 8003b58:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8003b5c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003b60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d01d      	beq.n	8003ba4 <USB_ActivateEndpoint+0x5a8>
 8003b68:	687a      	ldr	r2, [r7, #4]
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	781b      	ldrb	r3, [r3, #0]
 8003b6e:	009b      	lsls	r3, r3, #2
 8003b70:	4413      	add	r3, r2
 8003b72:	881b      	ldrh	r3, [r3, #0]
 8003b74:	b29b      	uxth	r3, r3
 8003b76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b7e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8003b82:	687a      	ldr	r2, [r7, #4]
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	781b      	ldrb	r3, [r3, #0]
 8003b88:	009b      	lsls	r3, r3, #2
 8003b8a:	441a      	add	r2, r3
 8003b8c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003b90:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b94:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b98:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003b9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ba0:	b29b      	uxth	r3, r3
 8003ba2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003ba4:	687a      	ldr	r2, [r7, #4]
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	781b      	ldrb	r3, [r3, #0]
 8003baa:	009b      	lsls	r3, r3, #2
 8003bac:	4413      	add	r3, r2
 8003bae:	881b      	ldrh	r3, [r3, #0]
 8003bb0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8003bb4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003bb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d01d      	beq.n	8003bfc <USB_ActivateEndpoint+0x600>
 8003bc0:	687a      	ldr	r2, [r7, #4]
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	781b      	ldrb	r3, [r3, #0]
 8003bc6:	009b      	lsls	r3, r3, #2
 8003bc8:	4413      	add	r3, r2
 8003bca:	881b      	ldrh	r3, [r3, #0]
 8003bcc:	b29b      	uxth	r3, r3
 8003bce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003bd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bd6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003bda:	687a      	ldr	r2, [r7, #4]
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	781b      	ldrb	r3, [r3, #0]
 8003be0:	009b      	lsls	r3, r3, #2
 8003be2:	441a      	add	r2, r3
 8003be4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003be8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003bec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003bf0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003bf4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003bf8:	b29b      	uxth	r3, r3
 8003bfa:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	78db      	ldrb	r3, [r3, #3]
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d024      	beq.n	8003c4e <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003c04:	687a      	ldr	r2, [r7, #4]
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	781b      	ldrb	r3, [r3, #0]
 8003c0a:	009b      	lsls	r3, r3, #2
 8003c0c:	4413      	add	r3, r2
 8003c0e:	881b      	ldrh	r3, [r3, #0]
 8003c10:	b29b      	uxth	r3, r3
 8003c12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c1a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8003c1e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003c22:	f083 0320 	eor.w	r3, r3, #32
 8003c26:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8003c2a:	687a      	ldr	r2, [r7, #4]
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	781b      	ldrb	r3, [r3, #0]
 8003c30:	009b      	lsls	r3, r3, #2
 8003c32:	441a      	add	r2, r3
 8003c34:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003c38:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c3c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c48:	b29b      	uxth	r3, r3
 8003c4a:	8013      	strh	r3, [r2, #0]
 8003c4c:	e01d      	b.n	8003c8a <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003c4e:	687a      	ldr	r2, [r7, #4]
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	781b      	ldrb	r3, [r3, #0]
 8003c54:	009b      	lsls	r3, r3, #2
 8003c56:	4413      	add	r3, r2
 8003c58:	881b      	ldrh	r3, [r3, #0]
 8003c5a:	b29b      	uxth	r3, r3
 8003c5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c64:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8003c68:	687a      	ldr	r2, [r7, #4]
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	781b      	ldrb	r3, [r3, #0]
 8003c6e:	009b      	lsls	r3, r3, #2
 8003c70:	441a      	add	r2, r3
 8003c72:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003c76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c86:	b29b      	uxth	r3, r3
 8003c88:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003c8a:	687a      	ldr	r2, [r7, #4]
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	781b      	ldrb	r3, [r3, #0]
 8003c90:	009b      	lsls	r3, r3, #2
 8003c92:	4413      	add	r3, r2
 8003c94:	881b      	ldrh	r3, [r3, #0]
 8003c96:	b29b      	uxth	r3, r3
 8003c98:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ca0:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8003ca2:	687a      	ldr	r2, [r7, #4]
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	781b      	ldrb	r3, [r3, #0]
 8003ca8:	009b      	lsls	r3, r3, #2
 8003caa:	441a      	add	r2, r3
 8003cac:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003cae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003cb2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003cb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003cba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cbe:	b29b      	uxth	r3, r3
 8003cc0:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8003cc2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	376c      	adds	r7, #108	; 0x6c
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bc80      	pop	{r7}
 8003cce:	4770      	bx	lr

08003cd0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b08d      	sub	sp, #52	; 0x34
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
 8003cd8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	7b1b      	ldrb	r3, [r3, #12]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	f040 808e 	bne.w	8003e00 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	785b      	ldrb	r3, [r3, #1]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d044      	beq.n	8003d76 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003cec:	687a      	ldr	r2, [r7, #4]
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	781b      	ldrb	r3, [r3, #0]
 8003cf2:	009b      	lsls	r3, r3, #2
 8003cf4:	4413      	add	r3, r2
 8003cf6:	881b      	ldrh	r3, [r3, #0]
 8003cf8:	81bb      	strh	r3, [r7, #12]
 8003cfa:	89bb      	ldrh	r3, [r7, #12]
 8003cfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d01b      	beq.n	8003d3c <USB_DeactivateEndpoint+0x6c>
 8003d04:	687a      	ldr	r2, [r7, #4]
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	781b      	ldrb	r3, [r3, #0]
 8003d0a:	009b      	lsls	r3, r3, #2
 8003d0c:	4413      	add	r3, r2
 8003d0e:	881b      	ldrh	r3, [r3, #0]
 8003d10:	b29b      	uxth	r3, r3
 8003d12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d1a:	817b      	strh	r3, [r7, #10]
 8003d1c:	687a      	ldr	r2, [r7, #4]
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	781b      	ldrb	r3, [r3, #0]
 8003d22:	009b      	lsls	r3, r3, #2
 8003d24:	441a      	add	r2, r3
 8003d26:	897b      	ldrh	r3, [r7, #10]
 8003d28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d34:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003d38:	b29b      	uxth	r3, r3
 8003d3a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003d3c:	687a      	ldr	r2, [r7, #4]
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	781b      	ldrb	r3, [r3, #0]
 8003d42:	009b      	lsls	r3, r3, #2
 8003d44:	4413      	add	r3, r2
 8003d46:	881b      	ldrh	r3, [r3, #0]
 8003d48:	b29b      	uxth	r3, r3
 8003d4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d52:	813b      	strh	r3, [r7, #8]
 8003d54:	687a      	ldr	r2, [r7, #4]
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	781b      	ldrb	r3, [r3, #0]
 8003d5a:	009b      	lsls	r3, r3, #2
 8003d5c:	441a      	add	r2, r3
 8003d5e:	893b      	ldrh	r3, [r7, #8]
 8003d60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d70:	b29b      	uxth	r3, r3
 8003d72:	8013      	strh	r3, [r2, #0]
 8003d74:	e192      	b.n	800409c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003d76:	687a      	ldr	r2, [r7, #4]
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	781b      	ldrb	r3, [r3, #0]
 8003d7c:	009b      	lsls	r3, r3, #2
 8003d7e:	4413      	add	r3, r2
 8003d80:	881b      	ldrh	r3, [r3, #0]
 8003d82:	827b      	strh	r3, [r7, #18]
 8003d84:	8a7b      	ldrh	r3, [r7, #18]
 8003d86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d01b      	beq.n	8003dc6 <USB_DeactivateEndpoint+0xf6>
 8003d8e:	687a      	ldr	r2, [r7, #4]
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	781b      	ldrb	r3, [r3, #0]
 8003d94:	009b      	lsls	r3, r3, #2
 8003d96:	4413      	add	r3, r2
 8003d98:	881b      	ldrh	r3, [r3, #0]
 8003d9a:	b29b      	uxth	r3, r3
 8003d9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003da0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003da4:	823b      	strh	r3, [r7, #16]
 8003da6:	687a      	ldr	r2, [r7, #4]
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	781b      	ldrb	r3, [r3, #0]
 8003dac:	009b      	lsls	r3, r3, #2
 8003dae:	441a      	add	r2, r3
 8003db0:	8a3b      	ldrh	r3, [r7, #16]
 8003db2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003db6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003dba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003dbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003dc2:	b29b      	uxth	r3, r3
 8003dc4:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003dc6:	687a      	ldr	r2, [r7, #4]
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	781b      	ldrb	r3, [r3, #0]
 8003dcc:	009b      	lsls	r3, r3, #2
 8003dce:	4413      	add	r3, r2
 8003dd0:	881b      	ldrh	r3, [r3, #0]
 8003dd2:	b29b      	uxth	r3, r3
 8003dd4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003dd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ddc:	81fb      	strh	r3, [r7, #14]
 8003dde:	687a      	ldr	r2, [r7, #4]
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	781b      	ldrb	r3, [r3, #0]
 8003de4:	009b      	lsls	r3, r3, #2
 8003de6:	441a      	add	r2, r3
 8003de8:	89fb      	ldrh	r3, [r7, #14]
 8003dea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003dee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003df2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003df6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003dfa:	b29b      	uxth	r3, r3
 8003dfc:	8013      	strh	r3, [r2, #0]
 8003dfe:	e14d      	b.n	800409c <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	785b      	ldrb	r3, [r3, #1]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	f040 80a5 	bne.w	8003f54 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003e0a:	687a      	ldr	r2, [r7, #4]
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	781b      	ldrb	r3, [r3, #0]
 8003e10:	009b      	lsls	r3, r3, #2
 8003e12:	4413      	add	r3, r2
 8003e14:	881b      	ldrh	r3, [r3, #0]
 8003e16:	843b      	strh	r3, [r7, #32]
 8003e18:	8c3b      	ldrh	r3, [r7, #32]
 8003e1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d01b      	beq.n	8003e5a <USB_DeactivateEndpoint+0x18a>
 8003e22:	687a      	ldr	r2, [r7, #4]
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	781b      	ldrb	r3, [r3, #0]
 8003e28:	009b      	lsls	r3, r3, #2
 8003e2a:	4413      	add	r3, r2
 8003e2c:	881b      	ldrh	r3, [r3, #0]
 8003e2e:	b29b      	uxth	r3, r3
 8003e30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e38:	83fb      	strh	r3, [r7, #30]
 8003e3a:	687a      	ldr	r2, [r7, #4]
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	781b      	ldrb	r3, [r3, #0]
 8003e40:	009b      	lsls	r3, r3, #2
 8003e42:	441a      	add	r2, r3
 8003e44:	8bfb      	ldrh	r3, [r7, #30]
 8003e46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e4e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003e52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e56:	b29b      	uxth	r3, r3
 8003e58:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003e5a:	687a      	ldr	r2, [r7, #4]
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	781b      	ldrb	r3, [r3, #0]
 8003e60:	009b      	lsls	r3, r3, #2
 8003e62:	4413      	add	r3, r2
 8003e64:	881b      	ldrh	r3, [r3, #0]
 8003e66:	83bb      	strh	r3, [r7, #28]
 8003e68:	8bbb      	ldrh	r3, [r7, #28]
 8003e6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d01b      	beq.n	8003eaa <USB_DeactivateEndpoint+0x1da>
 8003e72:	687a      	ldr	r2, [r7, #4]
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	781b      	ldrb	r3, [r3, #0]
 8003e78:	009b      	lsls	r3, r3, #2
 8003e7a:	4413      	add	r3, r2
 8003e7c:	881b      	ldrh	r3, [r3, #0]
 8003e7e:	b29b      	uxth	r3, r3
 8003e80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e88:	837b      	strh	r3, [r7, #26]
 8003e8a:	687a      	ldr	r2, [r7, #4]
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	781b      	ldrb	r3, [r3, #0]
 8003e90:	009b      	lsls	r3, r3, #2
 8003e92:	441a      	add	r2, r3
 8003e94:	8b7b      	ldrh	r3, [r7, #26]
 8003e96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ea2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003ea6:	b29b      	uxth	r3, r3
 8003ea8:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8003eaa:	687a      	ldr	r2, [r7, #4]
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	781b      	ldrb	r3, [r3, #0]
 8003eb0:	009b      	lsls	r3, r3, #2
 8003eb2:	4413      	add	r3, r2
 8003eb4:	881b      	ldrh	r3, [r3, #0]
 8003eb6:	b29b      	uxth	r3, r3
 8003eb8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ebc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ec0:	833b      	strh	r3, [r7, #24]
 8003ec2:	687a      	ldr	r2, [r7, #4]
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	781b      	ldrb	r3, [r3, #0]
 8003ec8:	009b      	lsls	r3, r3, #2
 8003eca:	441a      	add	r2, r3
 8003ecc:	8b3b      	ldrh	r3, [r7, #24]
 8003ece:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ed2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ed6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003eda:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003ede:	b29b      	uxth	r3, r3
 8003ee0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003ee2:	687a      	ldr	r2, [r7, #4]
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	781b      	ldrb	r3, [r3, #0]
 8003ee8:	009b      	lsls	r3, r3, #2
 8003eea:	4413      	add	r3, r2
 8003eec:	881b      	ldrh	r3, [r3, #0]
 8003eee:	b29b      	uxth	r3, r3
 8003ef0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ef4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ef8:	82fb      	strh	r3, [r7, #22]
 8003efa:	687a      	ldr	r2, [r7, #4]
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	781b      	ldrb	r3, [r3, #0]
 8003f00:	009b      	lsls	r3, r3, #2
 8003f02:	441a      	add	r2, r3
 8003f04:	8afb      	ldrh	r3, [r7, #22]
 8003f06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f16:	b29b      	uxth	r3, r3
 8003f18:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003f1a:	687a      	ldr	r2, [r7, #4]
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	781b      	ldrb	r3, [r3, #0]
 8003f20:	009b      	lsls	r3, r3, #2
 8003f22:	4413      	add	r3, r2
 8003f24:	881b      	ldrh	r3, [r3, #0]
 8003f26:	b29b      	uxth	r3, r3
 8003f28:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f30:	82bb      	strh	r3, [r7, #20]
 8003f32:	687a      	ldr	r2, [r7, #4]
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	781b      	ldrb	r3, [r3, #0]
 8003f38:	009b      	lsls	r3, r3, #2
 8003f3a:	441a      	add	r2, r3
 8003f3c:	8abb      	ldrh	r3, [r7, #20]
 8003f3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f4e:	b29b      	uxth	r3, r3
 8003f50:	8013      	strh	r3, [r2, #0]
 8003f52:	e0a3      	b.n	800409c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003f54:	687a      	ldr	r2, [r7, #4]
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	781b      	ldrb	r3, [r3, #0]
 8003f5a:	009b      	lsls	r3, r3, #2
 8003f5c:	4413      	add	r3, r2
 8003f5e:	881b      	ldrh	r3, [r3, #0]
 8003f60:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8003f62:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003f64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d01b      	beq.n	8003fa4 <USB_DeactivateEndpoint+0x2d4>
 8003f6c:	687a      	ldr	r2, [r7, #4]
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	781b      	ldrb	r3, [r3, #0]
 8003f72:	009b      	lsls	r3, r3, #2
 8003f74:	4413      	add	r3, r2
 8003f76:	881b      	ldrh	r3, [r3, #0]
 8003f78:	b29b      	uxth	r3, r3
 8003f7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f82:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8003f84:	687a      	ldr	r2, [r7, #4]
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	781b      	ldrb	r3, [r3, #0]
 8003f8a:	009b      	lsls	r3, r3, #2
 8003f8c:	441a      	add	r2, r3
 8003f8e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003f90:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f94:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f98:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003f9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fa0:	b29b      	uxth	r3, r3
 8003fa2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003fa4:	687a      	ldr	r2, [r7, #4]
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	781b      	ldrb	r3, [r3, #0]
 8003faa:	009b      	lsls	r3, r3, #2
 8003fac:	4413      	add	r3, r2
 8003fae:	881b      	ldrh	r3, [r3, #0]
 8003fb0:	857b      	strh	r3, [r7, #42]	; 0x2a
 8003fb2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003fb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d01b      	beq.n	8003ff4 <USB_DeactivateEndpoint+0x324>
 8003fbc:	687a      	ldr	r2, [r7, #4]
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	781b      	ldrb	r3, [r3, #0]
 8003fc2:	009b      	lsls	r3, r3, #2
 8003fc4:	4413      	add	r3, r2
 8003fc6:	881b      	ldrh	r3, [r3, #0]
 8003fc8:	b29b      	uxth	r3, r3
 8003fca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fd2:	853b      	strh	r3, [r7, #40]	; 0x28
 8003fd4:	687a      	ldr	r2, [r7, #4]
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	781b      	ldrb	r3, [r3, #0]
 8003fda:	009b      	lsls	r3, r3, #2
 8003fdc:	441a      	add	r2, r3
 8003fde:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003fe0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003fe4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003fe8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fec:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003ff0:	b29b      	uxth	r3, r3
 8003ff2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8003ff4:	687a      	ldr	r2, [r7, #4]
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	781b      	ldrb	r3, [r3, #0]
 8003ffa:	009b      	lsls	r3, r3, #2
 8003ffc:	4413      	add	r3, r2
 8003ffe:	881b      	ldrh	r3, [r3, #0]
 8004000:	b29b      	uxth	r3, r3
 8004002:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004006:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800400a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800400c:	687a      	ldr	r2, [r7, #4]
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	781b      	ldrb	r3, [r3, #0]
 8004012:	009b      	lsls	r3, r3, #2
 8004014:	441a      	add	r2, r3
 8004016:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004018:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800401c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004020:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004024:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004028:	b29b      	uxth	r3, r3
 800402a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800402c:	687a      	ldr	r2, [r7, #4]
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	781b      	ldrb	r3, [r3, #0]
 8004032:	009b      	lsls	r3, r3, #2
 8004034:	4413      	add	r3, r2
 8004036:	881b      	ldrh	r3, [r3, #0]
 8004038:	b29b      	uxth	r3, r3
 800403a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800403e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004042:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004044:	687a      	ldr	r2, [r7, #4]
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	781b      	ldrb	r3, [r3, #0]
 800404a:	009b      	lsls	r3, r3, #2
 800404c:	441a      	add	r2, r3
 800404e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004050:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004054:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004058:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800405c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004060:	b29b      	uxth	r3, r3
 8004062:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004064:	687a      	ldr	r2, [r7, #4]
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	781b      	ldrb	r3, [r3, #0]
 800406a:	009b      	lsls	r3, r3, #2
 800406c:	4413      	add	r3, r2
 800406e:	881b      	ldrh	r3, [r3, #0]
 8004070:	b29b      	uxth	r3, r3
 8004072:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004076:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800407a:	847b      	strh	r3, [r7, #34]	; 0x22
 800407c:	687a      	ldr	r2, [r7, #4]
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	781b      	ldrb	r3, [r3, #0]
 8004082:	009b      	lsls	r3, r3, #2
 8004084:	441a      	add	r2, r3
 8004086:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004088:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800408c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004090:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004094:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004098:	b29b      	uxth	r3, r3
 800409a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800409c:	2300      	movs	r3, #0
}
 800409e:	4618      	mov	r0, r3
 80040a0:	3734      	adds	r7, #52	; 0x34
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bc80      	pop	{r7}
 80040a6:	4770      	bx	lr

080040a8 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b0cc      	sub	sp, #304	; 0x130
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80040b2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80040b6:	6018      	str	r0, [r3, #0]
 80040b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80040bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80040c0:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80040c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80040c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	785b      	ldrb	r3, [r3, #1]
 80040ce:	2b01      	cmp	r3, #1
 80040d0:	f041 817d 	bne.w	80053ce <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80040d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80040d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	699a      	ldr	r2, [r3, #24]
 80040e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80040e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	691b      	ldr	r3, [r3, #16]
 80040ec:	429a      	cmp	r2, r3
 80040ee:	d908      	bls.n	8004102 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80040f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80040f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	691b      	ldr	r3, [r3, #16]
 80040fc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8004100:	e007      	b.n	8004112 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8004102:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004106:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	699b      	ldr	r3, [r3, #24]
 800410e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004112:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004116:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	7b1b      	ldrb	r3, [r3, #12]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d152      	bne.n	80041c8 <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004122:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004126:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	6959      	ldr	r1, [r3, #20]
 800412e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004132:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	88da      	ldrh	r2, [r3, #6]
 800413a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800413e:	b29b      	uxth	r3, r3
 8004140:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004144:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004148:	6800      	ldr	r0, [r0, #0]
 800414a:	f001 ff0e 	bl	8005f6a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800414e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004152:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004156:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800415a:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800415e:	6812      	ldr	r2, [r2, #0]
 8004160:	601a      	str	r2, [r3, #0]
 8004162:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004166:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004170:	b29b      	uxth	r3, r3
 8004172:	4619      	mov	r1, r3
 8004174:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004178:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800417c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004180:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8004184:	6812      	ldr	r2, [r2, #0]
 8004186:	440a      	add	r2, r1
 8004188:	601a      	str	r2, [r3, #0]
 800418a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800418e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	781b      	ldrb	r3, [r3, #0]
 8004196:	011a      	lsls	r2, r3, #4
 8004198:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800419c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4413      	add	r3, r2
 80041a4:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80041a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80041ac:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80041b0:	601a      	str	r2, [r3, #0]
 80041b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80041b6:	b29a      	uxth	r2, r3
 80041b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80041bc:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	801a      	strh	r2, [r3, #0]
 80041c4:	f001 b8b5 	b.w	8005332 <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80041c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80041cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	78db      	ldrb	r3, [r3, #3]
 80041d4:	2b02      	cmp	r3, #2
 80041d6:	f040 84c6 	bne.w	8004b66 <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80041da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80041de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	6a1a      	ldr	r2, [r3, #32]
 80041e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80041ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	691b      	ldr	r3, [r3, #16]
 80041f2:	429a      	cmp	r2, r3
 80041f4:	f240 8443 	bls.w	8004a7e <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 80041f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80041fc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004200:	681a      	ldr	r2, [r3, #0]
 8004202:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004206:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	781b      	ldrb	r3, [r3, #0]
 800420e:	009b      	lsls	r3, r3, #2
 8004210:	4413      	add	r3, r2
 8004212:	881b      	ldrh	r3, [r3, #0]
 8004214:	b29b      	uxth	r3, r3
 8004216:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800421a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800421e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8004222:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004226:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800422a:	681a      	ldr	r2, [r3, #0]
 800422c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004230:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	781b      	ldrb	r3, [r3, #0]
 8004238:	009b      	lsls	r3, r3, #2
 800423a:	441a      	add	r2, r3
 800423c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004240:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004244:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004248:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800424c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004250:	b29b      	uxth	r3, r3
 8004252:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004254:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004258:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	6a1a      	ldr	r2, [r3, #32]
 8004260:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004264:	1ad2      	subs	r2, r2, r3
 8004266:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800426a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004272:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004276:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004280:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	781b      	ldrb	r3, [r3, #0]
 8004288:	009b      	lsls	r3, r3, #2
 800428a:	4413      	add	r3, r2
 800428c:	881b      	ldrh	r3, [r3, #0]
 800428e:	b29b      	uxth	r3, r3
 8004290:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004294:	2b00      	cmp	r3, #0
 8004296:	f000 823e 	beq.w	8004716 <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800429a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800429e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80042a2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80042a6:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80042aa:	6812      	ldr	r2, [r2, #0]
 80042ac:	601a      	str	r2, [r3, #0]
 80042ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80042b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	785b      	ldrb	r3, [r3, #1]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	f040 809a 	bne.w	80043f4 <USB_EPStartXfer+0x34c>
 80042c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80042c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80042c8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80042cc:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80042d0:	6812      	ldr	r2, [r2, #0]
 80042d2:	601a      	str	r2, [r3, #0]
 80042d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80042d8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80042e2:	b29b      	uxth	r3, r3
 80042e4:	4619      	mov	r1, r3
 80042e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80042ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80042ee:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80042f2:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 80042f6:	6812      	ldr	r2, [r2, #0]
 80042f8:	440a      	add	r2, r1
 80042fa:	601a      	str	r2, [r3, #0]
 80042fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004300:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	781b      	ldrb	r3, [r3, #0]
 8004308:	011a      	lsls	r2, r3, #4
 800430a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800430e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4413      	add	r3, r2
 8004316:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 800431a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800431e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004322:	601a      	str	r2, [r3, #0]
 8004324:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004328:	2b00      	cmp	r3, #0
 800432a:	d122      	bne.n	8004372 <USB_EPStartXfer+0x2ca>
 800432c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004330:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	881b      	ldrh	r3, [r3, #0]
 8004338:	b29b      	uxth	r3, r3
 800433a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800433e:	b29a      	uxth	r2, r3
 8004340:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004344:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	801a      	strh	r2, [r3, #0]
 800434c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004350:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	881b      	ldrh	r3, [r3, #0]
 8004358:	b29b      	uxth	r3, r3
 800435a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800435e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004362:	b29a      	uxth	r2, r3
 8004364:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004368:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	801a      	strh	r2, [r3, #0]
 8004370:	e079      	b.n	8004466 <USB_EPStartXfer+0x3be>
 8004372:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004376:	2b3e      	cmp	r3, #62	; 0x3e
 8004378:	d81b      	bhi.n	80043b2 <USB_EPStartXfer+0x30a>
 800437a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800437e:	085b      	lsrs	r3, r3, #1
 8004380:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004384:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004388:	f003 0301 	and.w	r3, r3, #1
 800438c:	2b00      	cmp	r3, #0
 800438e:	d004      	beq.n	800439a <USB_EPStartXfer+0x2f2>
 8004390:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004394:	3301      	adds	r3, #1
 8004396:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800439a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800439e:	b29b      	uxth	r3, r3
 80043a0:	029b      	lsls	r3, r3, #10
 80043a2:	b29a      	uxth	r2, r3
 80043a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80043a8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	801a      	strh	r2, [r3, #0]
 80043b0:	e059      	b.n	8004466 <USB_EPStartXfer+0x3be>
 80043b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80043b6:	095b      	lsrs	r3, r3, #5
 80043b8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80043bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80043c0:	f003 031f 	and.w	r3, r3, #31
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d104      	bne.n	80043d2 <USB_EPStartXfer+0x32a>
 80043c8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80043cc:	3b01      	subs	r3, #1
 80043ce:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80043d2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80043d6:	b29b      	uxth	r3, r3
 80043d8:	029b      	lsls	r3, r3, #10
 80043da:	b29b      	uxth	r3, r3
 80043dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80043e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80043e4:	b29a      	uxth	r2, r3
 80043e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80043ea:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	801a      	strh	r2, [r3, #0]
 80043f2:	e038      	b.n	8004466 <USB_EPStartXfer+0x3be>
 80043f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80043f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	785b      	ldrb	r3, [r3, #1]
 8004400:	2b01      	cmp	r3, #1
 8004402:	d130      	bne.n	8004466 <USB_EPStartXfer+0x3be>
 8004404:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004408:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004412:	b29b      	uxth	r3, r3
 8004414:	4619      	mov	r1, r3
 8004416:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800441a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800441e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004422:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8004426:	6812      	ldr	r2, [r2, #0]
 8004428:	440a      	add	r2, r1
 800442a:	601a      	str	r2, [r3, #0]
 800442c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004430:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	781b      	ldrb	r3, [r3, #0]
 8004438:	011a      	lsls	r2, r3, #4
 800443a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800443e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4413      	add	r3, r2
 8004446:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 800444a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800444e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004452:	601a      	str	r2, [r3, #0]
 8004454:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004458:	b29a      	uxth	r2, r3
 800445a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800445e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004466:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800446a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	895b      	ldrh	r3, [r3, #10]
 8004472:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004476:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800447a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	6959      	ldr	r1, [r3, #20]
 8004482:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004486:	b29b      	uxth	r3, r3
 8004488:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800448c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004490:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004494:	6800      	ldr	r0, [r0, #0]
 8004496:	f001 fd68 	bl	8005f6a <USB_WritePMA>
            ep->xfer_buff += len;
 800449a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800449e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	695a      	ldr	r2, [r3, #20]
 80044a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80044aa:	441a      	add	r2, r3
 80044ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80044b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80044b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80044bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	6a1a      	ldr	r2, [r3, #32]
 80044c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80044c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	691b      	ldr	r3, [r3, #16]
 80044d0:	429a      	cmp	r2, r3
 80044d2:	d90f      	bls.n	80044f4 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 80044d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80044d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	6a1a      	ldr	r2, [r3, #32]
 80044e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80044e4:	1ad2      	subs	r2, r2, r3
 80044e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80044ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	621a      	str	r2, [r3, #32]
 80044f2:	e00e      	b.n	8004512 <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 80044f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80044f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	6a1b      	ldr	r3, [r3, #32]
 8004500:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8004504:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004508:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	2200      	movs	r2, #0
 8004510:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004512:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004516:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	785b      	ldrb	r3, [r3, #1]
 800451e:	2b00      	cmp	r3, #0
 8004520:	f040 809a 	bne.w	8004658 <USB_EPStartXfer+0x5b0>
 8004524:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004528:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800452c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004530:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004534:	6812      	ldr	r2, [r2, #0]
 8004536:	601a      	str	r2, [r3, #0]
 8004538:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800453c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004546:	b29b      	uxth	r3, r3
 8004548:	4619      	mov	r1, r3
 800454a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800454e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004552:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004556:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 800455a:	6812      	ldr	r2, [r2, #0]
 800455c:	440a      	add	r2, r1
 800455e:	601a      	str	r2, [r3, #0]
 8004560:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004564:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	781b      	ldrb	r3, [r3, #0]
 800456c:	011a      	lsls	r2, r3, #4
 800456e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004572:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4413      	add	r3, r2
 800457a:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800457e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004582:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004586:	601a      	str	r2, [r3, #0]
 8004588:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800458c:	2b00      	cmp	r3, #0
 800458e:	d122      	bne.n	80045d6 <USB_EPStartXfer+0x52e>
 8004590:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004594:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	881b      	ldrh	r3, [r3, #0]
 800459c:	b29b      	uxth	r3, r3
 800459e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80045a2:	b29a      	uxth	r2, r3
 80045a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80045a8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	801a      	strh	r2, [r3, #0]
 80045b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80045b4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	881b      	ldrh	r3, [r3, #0]
 80045bc:	b29b      	uxth	r3, r3
 80045be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80045c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80045c6:	b29a      	uxth	r2, r3
 80045c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80045cc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	801a      	strh	r2, [r3, #0]
 80045d4:	e083      	b.n	80046de <USB_EPStartXfer+0x636>
 80045d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80045da:	2b3e      	cmp	r3, #62	; 0x3e
 80045dc:	d81b      	bhi.n	8004616 <USB_EPStartXfer+0x56e>
 80045de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80045e2:	085b      	lsrs	r3, r3, #1
 80045e4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80045e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80045ec:	f003 0301 	and.w	r3, r3, #1
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d004      	beq.n	80045fe <USB_EPStartXfer+0x556>
 80045f4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80045f8:	3301      	adds	r3, #1
 80045fa:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80045fe:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004602:	b29b      	uxth	r3, r3
 8004604:	029b      	lsls	r3, r3, #10
 8004606:	b29a      	uxth	r2, r3
 8004608:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800460c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	801a      	strh	r2, [r3, #0]
 8004614:	e063      	b.n	80046de <USB_EPStartXfer+0x636>
 8004616:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800461a:	095b      	lsrs	r3, r3, #5
 800461c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004620:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004624:	f003 031f 	and.w	r3, r3, #31
 8004628:	2b00      	cmp	r3, #0
 800462a:	d104      	bne.n	8004636 <USB_EPStartXfer+0x58e>
 800462c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004630:	3b01      	subs	r3, #1
 8004632:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004636:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800463a:	b29b      	uxth	r3, r3
 800463c:	029b      	lsls	r3, r3, #10
 800463e:	b29b      	uxth	r3, r3
 8004640:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004644:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004648:	b29a      	uxth	r2, r3
 800464a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800464e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	801a      	strh	r2, [r3, #0]
 8004656:	e042      	b.n	80046de <USB_EPStartXfer+0x636>
 8004658:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800465c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	785b      	ldrb	r3, [r3, #1]
 8004664:	2b01      	cmp	r3, #1
 8004666:	d13a      	bne.n	80046de <USB_EPStartXfer+0x636>
 8004668:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800466c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004670:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004674:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004678:	6812      	ldr	r2, [r2, #0]
 800467a:	601a      	str	r2, [r3, #0]
 800467c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004680:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800468a:	b29b      	uxth	r3, r3
 800468c:	4619      	mov	r1, r3
 800468e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004692:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004696:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800469a:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 800469e:	6812      	ldr	r2, [r2, #0]
 80046a0:	440a      	add	r2, r1
 80046a2:	601a      	str	r2, [r3, #0]
 80046a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80046a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	781b      	ldrb	r3, [r3, #0]
 80046b0:	011a      	lsls	r2, r3, #4
 80046b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80046b6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4413      	add	r3, r2
 80046be:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80046c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80046c6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80046ca:	601a      	str	r2, [r3, #0]
 80046cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80046d0:	b29a      	uxth	r2, r3
 80046d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80046d6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80046de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80046e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	891b      	ldrh	r3, [r3, #8]
 80046ea:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80046ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80046f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	6959      	ldr	r1, [r3, #20]
 80046fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80046fe:	b29b      	uxth	r3, r3
 8004700:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004704:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004708:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800470c:	6800      	ldr	r0, [r0, #0]
 800470e:	f001 fc2c 	bl	8005f6a <USB_WritePMA>
 8004712:	f000 be0e 	b.w	8005332 <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004716:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800471a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	785b      	ldrb	r3, [r3, #1]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d16d      	bne.n	8004802 <USB_EPStartXfer+0x75a>
 8004726:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800472a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	64bb      	str	r3, [r7, #72]	; 0x48
 8004732:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004736:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004740:	b29b      	uxth	r3, r3
 8004742:	461a      	mov	r2, r3
 8004744:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004746:	4413      	add	r3, r2
 8004748:	64bb      	str	r3, [r7, #72]	; 0x48
 800474a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800474e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	781b      	ldrb	r3, [r3, #0]
 8004756:	011a      	lsls	r2, r3, #4
 8004758:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800475a:	4413      	add	r3, r2
 800475c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004760:	647b      	str	r3, [r7, #68]	; 0x44
 8004762:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004766:	2b00      	cmp	r3, #0
 8004768:	d112      	bne.n	8004790 <USB_EPStartXfer+0x6e8>
 800476a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800476c:	881b      	ldrh	r3, [r3, #0]
 800476e:	b29b      	uxth	r3, r3
 8004770:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004774:	b29a      	uxth	r2, r3
 8004776:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004778:	801a      	strh	r2, [r3, #0]
 800477a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800477c:	881b      	ldrh	r3, [r3, #0]
 800477e:	b29b      	uxth	r3, r3
 8004780:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004784:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004788:	b29a      	uxth	r2, r3
 800478a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800478c:	801a      	strh	r2, [r3, #0]
 800478e:	e063      	b.n	8004858 <USB_EPStartXfer+0x7b0>
 8004790:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004794:	2b3e      	cmp	r3, #62	; 0x3e
 8004796:	d817      	bhi.n	80047c8 <USB_EPStartXfer+0x720>
 8004798:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800479c:	085b      	lsrs	r3, r3, #1
 800479e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80047a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80047a6:	f003 0301 	and.w	r3, r3, #1
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d004      	beq.n	80047b8 <USB_EPStartXfer+0x710>
 80047ae:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80047b2:	3301      	adds	r3, #1
 80047b4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80047b8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80047bc:	b29b      	uxth	r3, r3
 80047be:	029b      	lsls	r3, r3, #10
 80047c0:	b29a      	uxth	r2, r3
 80047c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047c4:	801a      	strh	r2, [r3, #0]
 80047c6:	e047      	b.n	8004858 <USB_EPStartXfer+0x7b0>
 80047c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80047cc:	095b      	lsrs	r3, r3, #5
 80047ce:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80047d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80047d6:	f003 031f 	and.w	r3, r3, #31
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d104      	bne.n	80047e8 <USB_EPStartXfer+0x740>
 80047de:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80047e2:	3b01      	subs	r3, #1
 80047e4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80047e8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80047ec:	b29b      	uxth	r3, r3
 80047ee:	029b      	lsls	r3, r3, #10
 80047f0:	b29b      	uxth	r3, r3
 80047f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047fa:	b29a      	uxth	r2, r3
 80047fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047fe:	801a      	strh	r2, [r3, #0]
 8004800:	e02a      	b.n	8004858 <USB_EPStartXfer+0x7b0>
 8004802:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004806:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	785b      	ldrb	r3, [r3, #1]
 800480e:	2b01      	cmp	r3, #1
 8004810:	d122      	bne.n	8004858 <USB_EPStartXfer+0x7b0>
 8004812:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004816:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	653b      	str	r3, [r7, #80]	; 0x50
 800481e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004822:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800482c:	b29b      	uxth	r3, r3
 800482e:	461a      	mov	r2, r3
 8004830:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004832:	4413      	add	r3, r2
 8004834:	653b      	str	r3, [r7, #80]	; 0x50
 8004836:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800483a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	781b      	ldrb	r3, [r3, #0]
 8004842:	011a      	lsls	r2, r3, #4
 8004844:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004846:	4413      	add	r3, r2
 8004848:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800484c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800484e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004852:	b29a      	uxth	r2, r3
 8004854:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004856:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004858:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800485c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	891b      	ldrh	r3, [r3, #8]
 8004864:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004868:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800486c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	6959      	ldr	r1, [r3, #20]
 8004874:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004878:	b29b      	uxth	r3, r3
 800487a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800487e:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004882:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004886:	6800      	ldr	r0, [r0, #0]
 8004888:	f001 fb6f 	bl	8005f6a <USB_WritePMA>
            ep->xfer_buff += len;
 800488c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004890:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	695a      	ldr	r2, [r3, #20]
 8004898:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800489c:	441a      	add	r2, r3
 800489e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80048aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	6a1a      	ldr	r2, [r3, #32]
 80048b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	691b      	ldr	r3, [r3, #16]
 80048c2:	429a      	cmp	r2, r3
 80048c4:	d90f      	bls.n	80048e6 <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 80048c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	6a1a      	ldr	r2, [r3, #32]
 80048d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80048d6:	1ad2      	subs	r2, r2, r3
 80048d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	621a      	str	r2, [r3, #32]
 80048e4:	e00e      	b.n	8004904 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 80048e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	6a1b      	ldr	r3, [r3, #32]
 80048f2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 80048f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	2200      	movs	r2, #0
 8004902:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004904:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004908:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	643b      	str	r3, [r7, #64]	; 0x40
 8004910:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004914:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	785b      	ldrb	r3, [r3, #1]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d16d      	bne.n	80049fc <USB_EPStartXfer+0x954>
 8004920:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004924:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	63bb      	str	r3, [r7, #56]	; 0x38
 800492c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004930:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800493a:	b29b      	uxth	r3, r3
 800493c:	461a      	mov	r2, r3
 800493e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004940:	4413      	add	r3, r2
 8004942:	63bb      	str	r3, [r7, #56]	; 0x38
 8004944:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004948:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	781b      	ldrb	r3, [r3, #0]
 8004950:	011a      	lsls	r2, r3, #4
 8004952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004954:	4413      	add	r3, r2
 8004956:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800495a:	637b      	str	r3, [r7, #52]	; 0x34
 800495c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004960:	2b00      	cmp	r3, #0
 8004962:	d112      	bne.n	800498a <USB_EPStartXfer+0x8e2>
 8004964:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004966:	881b      	ldrh	r3, [r3, #0]
 8004968:	b29b      	uxth	r3, r3
 800496a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800496e:	b29a      	uxth	r2, r3
 8004970:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004972:	801a      	strh	r2, [r3, #0]
 8004974:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004976:	881b      	ldrh	r3, [r3, #0]
 8004978:	b29b      	uxth	r3, r3
 800497a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800497e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004982:	b29a      	uxth	r2, r3
 8004984:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004986:	801a      	strh	r2, [r3, #0]
 8004988:	e05d      	b.n	8004a46 <USB_EPStartXfer+0x99e>
 800498a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800498e:	2b3e      	cmp	r3, #62	; 0x3e
 8004990:	d817      	bhi.n	80049c2 <USB_EPStartXfer+0x91a>
 8004992:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004996:	085b      	lsrs	r3, r3, #1
 8004998:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800499c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80049a0:	f003 0301 	and.w	r3, r3, #1
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d004      	beq.n	80049b2 <USB_EPStartXfer+0x90a>
 80049a8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80049ac:	3301      	adds	r3, #1
 80049ae:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80049b2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80049b6:	b29b      	uxth	r3, r3
 80049b8:	029b      	lsls	r3, r3, #10
 80049ba:	b29a      	uxth	r2, r3
 80049bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049be:	801a      	strh	r2, [r3, #0]
 80049c0:	e041      	b.n	8004a46 <USB_EPStartXfer+0x99e>
 80049c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80049c6:	095b      	lsrs	r3, r3, #5
 80049c8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80049cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80049d0:	f003 031f 	and.w	r3, r3, #31
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d104      	bne.n	80049e2 <USB_EPStartXfer+0x93a>
 80049d8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80049dc:	3b01      	subs	r3, #1
 80049de:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80049e2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80049e6:	b29b      	uxth	r3, r3
 80049e8:	029b      	lsls	r3, r3, #10
 80049ea:	b29b      	uxth	r3, r3
 80049ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049f4:	b29a      	uxth	r2, r3
 80049f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049f8:	801a      	strh	r2, [r3, #0]
 80049fa:	e024      	b.n	8004a46 <USB_EPStartXfer+0x99e>
 80049fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a00:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	785b      	ldrb	r3, [r3, #1]
 8004a08:	2b01      	cmp	r3, #1
 8004a0a:	d11c      	bne.n	8004a46 <USB_EPStartXfer+0x99e>
 8004a0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a10:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a1a:	b29b      	uxth	r3, r3
 8004a1c:	461a      	mov	r2, r3
 8004a1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a20:	4413      	add	r3, r2
 8004a22:	643b      	str	r3, [r7, #64]	; 0x40
 8004a24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a28:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	781b      	ldrb	r3, [r3, #0]
 8004a30:	011a      	lsls	r2, r3, #4
 8004a32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a34:	4413      	add	r3, r2
 8004a36:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004a3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a40:	b29a      	uxth	r2, r3
 8004a42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a44:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004a46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a4a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	895b      	ldrh	r3, [r3, #10]
 8004a52:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004a56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a5a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	6959      	ldr	r1, [r3, #20]
 8004a62:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a66:	b29b      	uxth	r3, r3
 8004a68:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004a6c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004a70:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004a74:	6800      	ldr	r0, [r0, #0]
 8004a76:	f001 fa78 	bl	8005f6a <USB_WritePMA>
 8004a7a:	f000 bc5a 	b.w	8005332 <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8004a7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a82:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	6a1b      	ldr	r3, [r3, #32]
 8004a8a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8004a8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a92:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004a96:	681a      	ldr	r2, [r3, #0]
 8004a98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a9c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	781b      	ldrb	r3, [r3, #0]
 8004aa4:	009b      	lsls	r3, r3, #2
 8004aa6:	4413      	add	r3, r2
 8004aa8:	881b      	ldrh	r3, [r3, #0]
 8004aaa:	b29b      	uxth	r3, r3
 8004aac:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8004ab0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ab4:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8004ab8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004abc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004ac0:	681a      	ldr	r2, [r3, #0]
 8004ac2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ac6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	781b      	ldrb	r3, [r3, #0]
 8004ace:	009b      	lsls	r3, r3, #2
 8004ad0:	441a      	add	r2, r3
 8004ad2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8004ad6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ada:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ade:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ae2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ae6:	b29b      	uxth	r3, r3
 8004ae8:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004aea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004aee:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004af6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004afa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b04:	b29b      	uxth	r3, r3
 8004b06:	461a      	mov	r2, r3
 8004b08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b0a:	4413      	add	r3, r2
 8004b0c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004b0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b12:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	781b      	ldrb	r3, [r3, #0]
 8004b1a:	011a      	lsls	r2, r3, #4
 8004b1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b1e:	4413      	add	r3, r2
 8004b20:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004b24:	65bb      	str	r3, [r7, #88]	; 0x58
 8004b26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b2a:	b29a      	uxth	r2, r3
 8004b2c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b2e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004b30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b34:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	891b      	ldrh	r3, [r3, #8]
 8004b3c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004b40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b44:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	6959      	ldr	r1, [r3, #20]
 8004b4c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b50:	b29b      	uxth	r3, r3
 8004b52:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004b56:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004b5a:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004b5e:	6800      	ldr	r0, [r0, #0]
 8004b60:	f001 fa03 	bl	8005f6a <USB_WritePMA>
 8004b64:	e3e5      	b.n	8005332 <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8004b66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b6a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004b6e:	681a      	ldr	r2, [r3, #0]
 8004b70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b74:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	781b      	ldrb	r3, [r3, #0]
 8004b7c:	009b      	lsls	r3, r3, #2
 8004b7e:	4413      	add	r3, r2
 8004b80:	881b      	ldrh	r3, [r3, #0]
 8004b82:	b29b      	uxth	r3, r3
 8004b84:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b8c:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8004b90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b94:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004b98:	681a      	ldr	r2, [r3, #0]
 8004b9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b9e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	781b      	ldrb	r3, [r3, #0]
 8004ba6:	009b      	lsls	r3, r3, #2
 8004ba8:	441a      	add	r2, r3
 8004baa:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8004bae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bb2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bb6:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004bba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bbe:	b29b      	uxth	r3, r3
 8004bc0:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8004bc2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bc6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	6a1a      	ldr	r2, [r3, #32]
 8004bce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004bd2:	1ad2      	subs	r2, r2, r3
 8004bd4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bd8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004be0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004be4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004be8:	681a      	ldr	r2, [r3, #0]
 8004bea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	781b      	ldrb	r3, [r3, #0]
 8004bf6:	009b      	lsls	r3, r3, #2
 8004bf8:	4413      	add	r3, r2
 8004bfa:	881b      	ldrh	r3, [r3, #0]
 8004bfc:	b29b      	uxth	r3, r3
 8004bfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	f000 81bc 	beq.w	8004f80 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004c08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c0c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004c16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c1a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	785b      	ldrb	r3, [r3, #1]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d16d      	bne.n	8004d02 <USB_EPStartXfer+0xc5a>
 8004c26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c2a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	67bb      	str	r3, [r7, #120]	; 0x78
 8004c32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c36:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c40:	b29b      	uxth	r3, r3
 8004c42:	461a      	mov	r2, r3
 8004c44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c46:	4413      	add	r3, r2
 8004c48:	67bb      	str	r3, [r7, #120]	; 0x78
 8004c4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c4e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	781b      	ldrb	r3, [r3, #0]
 8004c56:	011a      	lsls	r2, r3, #4
 8004c58:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c5a:	4413      	add	r3, r2
 8004c5c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004c60:	677b      	str	r3, [r7, #116]	; 0x74
 8004c62:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d112      	bne.n	8004c90 <USB_EPStartXfer+0xbe8>
 8004c6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c6c:	881b      	ldrh	r3, [r3, #0]
 8004c6e:	b29b      	uxth	r3, r3
 8004c70:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004c74:	b29a      	uxth	r2, r3
 8004c76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c78:	801a      	strh	r2, [r3, #0]
 8004c7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c7c:	881b      	ldrh	r3, [r3, #0]
 8004c7e:	b29b      	uxth	r3, r3
 8004c80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c88:	b29a      	uxth	r2, r3
 8004c8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c8c:	801a      	strh	r2, [r3, #0]
 8004c8e:	e060      	b.n	8004d52 <USB_EPStartXfer+0xcaa>
 8004c90:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c94:	2b3e      	cmp	r3, #62	; 0x3e
 8004c96:	d817      	bhi.n	8004cc8 <USB_EPStartXfer+0xc20>
 8004c98:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c9c:	085b      	lsrs	r3, r3, #1
 8004c9e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8004ca2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ca6:	f003 0301 	and.w	r3, r3, #1
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d004      	beq.n	8004cb8 <USB_EPStartXfer+0xc10>
 8004cae:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004cb2:	3301      	adds	r3, #1
 8004cb4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8004cb8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004cbc:	b29b      	uxth	r3, r3
 8004cbe:	029b      	lsls	r3, r3, #10
 8004cc0:	b29a      	uxth	r2, r3
 8004cc2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004cc4:	801a      	strh	r2, [r3, #0]
 8004cc6:	e044      	b.n	8004d52 <USB_EPStartXfer+0xcaa>
 8004cc8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ccc:	095b      	lsrs	r3, r3, #5
 8004cce:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8004cd2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004cd6:	f003 031f 	and.w	r3, r3, #31
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d104      	bne.n	8004ce8 <USB_EPStartXfer+0xc40>
 8004cde:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004ce2:	3b01      	subs	r3, #1
 8004ce4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8004ce8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004cec:	b29b      	uxth	r3, r3
 8004cee:	029b      	lsls	r3, r3, #10
 8004cf0:	b29b      	uxth	r3, r3
 8004cf2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004cf6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004cfa:	b29a      	uxth	r2, r3
 8004cfc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004cfe:	801a      	strh	r2, [r3, #0]
 8004d00:	e027      	b.n	8004d52 <USB_EPStartXfer+0xcaa>
 8004d02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d06:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	785b      	ldrb	r3, [r3, #1]
 8004d0e:	2b01      	cmp	r3, #1
 8004d10:	d11f      	bne.n	8004d52 <USB_EPStartXfer+0xcaa>
 8004d12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d16:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d20:	b29b      	uxth	r3, r3
 8004d22:	461a      	mov	r2, r3
 8004d24:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004d28:	4413      	add	r3, r2
 8004d2a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004d2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d32:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	781b      	ldrb	r3, [r3, #0]
 8004d3a:	011a      	lsls	r2, r3, #4
 8004d3c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004d40:	4413      	add	r3, r2
 8004d42:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004d46:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004d48:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d4c:	b29a      	uxth	r2, r3
 8004d4e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004d50:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8004d52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d56:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	895b      	ldrh	r3, [r3, #10]
 8004d5e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004d62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d66:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	6959      	ldr	r1, [r3, #20]
 8004d6e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d72:	b29b      	uxth	r3, r3
 8004d74:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004d78:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004d7c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004d80:	6800      	ldr	r0, [r0, #0]
 8004d82:	f001 f8f2 	bl	8005f6a <USB_WritePMA>
          ep->xfer_buff += len;
 8004d86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d8a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	695a      	ldr	r2, [r3, #20]
 8004d92:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d96:	441a      	add	r2, r3
 8004d98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d9c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8004da4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004da8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	6a1a      	ldr	r2, [r3, #32]
 8004db0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004db4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	691b      	ldr	r3, [r3, #16]
 8004dbc:	429a      	cmp	r2, r3
 8004dbe:	d90f      	bls.n	8004de0 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 8004dc0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004dc4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	6a1a      	ldr	r2, [r3, #32]
 8004dcc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004dd0:	1ad2      	subs	r2, r2, r3
 8004dd2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004dd6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	621a      	str	r2, [r3, #32]
 8004dde:	e00e      	b.n	8004dfe <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 8004de0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004de4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	6a1b      	ldr	r3, [r3, #32]
 8004dec:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8004df0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004df4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8004dfe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	f000 8295 	beq.w	8005332 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004e08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e0c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	785b      	ldrb	r3, [r3, #1]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d16d      	bne.n	8004ef4 <USB_EPStartXfer+0xe4c>
 8004e18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e1c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	66bb      	str	r3, [r7, #104]	; 0x68
 8004e24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e28:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e32:	b29b      	uxth	r3, r3
 8004e34:	461a      	mov	r2, r3
 8004e36:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004e38:	4413      	add	r3, r2
 8004e3a:	66bb      	str	r3, [r7, #104]	; 0x68
 8004e3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e40:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	781b      	ldrb	r3, [r3, #0]
 8004e48:	011a      	lsls	r2, r3, #4
 8004e4a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004e4c:	4413      	add	r3, r2
 8004e4e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004e52:	667b      	str	r3, [r7, #100]	; 0x64
 8004e54:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d112      	bne.n	8004e82 <USB_EPStartXfer+0xdda>
 8004e5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e5e:	881b      	ldrh	r3, [r3, #0]
 8004e60:	b29b      	uxth	r3, r3
 8004e62:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004e66:	b29a      	uxth	r2, r3
 8004e68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e6a:	801a      	strh	r2, [r3, #0]
 8004e6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e6e:	881b      	ldrh	r3, [r3, #0]
 8004e70:	b29b      	uxth	r3, r3
 8004e72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e7a:	b29a      	uxth	r2, r3
 8004e7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e7e:	801a      	strh	r2, [r3, #0]
 8004e80:	e063      	b.n	8004f4a <USB_EPStartXfer+0xea2>
 8004e82:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e86:	2b3e      	cmp	r3, #62	; 0x3e
 8004e88:	d817      	bhi.n	8004eba <USB_EPStartXfer+0xe12>
 8004e8a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e8e:	085b      	lsrs	r3, r3, #1
 8004e90:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8004e94:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e98:	f003 0301 	and.w	r3, r3, #1
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d004      	beq.n	8004eaa <USB_EPStartXfer+0xe02>
 8004ea0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ea4:	3301      	adds	r3, #1
 8004ea6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8004eaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004eae:	b29b      	uxth	r3, r3
 8004eb0:	029b      	lsls	r3, r3, #10
 8004eb2:	b29a      	uxth	r2, r3
 8004eb4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004eb6:	801a      	strh	r2, [r3, #0]
 8004eb8:	e047      	b.n	8004f4a <USB_EPStartXfer+0xea2>
 8004eba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ebe:	095b      	lsrs	r3, r3, #5
 8004ec0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8004ec4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ec8:	f003 031f 	and.w	r3, r3, #31
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d104      	bne.n	8004eda <USB_EPStartXfer+0xe32>
 8004ed0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ed4:	3b01      	subs	r3, #1
 8004ed6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8004eda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ede:	b29b      	uxth	r3, r3
 8004ee0:	029b      	lsls	r3, r3, #10
 8004ee2:	b29b      	uxth	r3, r3
 8004ee4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ee8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004eec:	b29a      	uxth	r2, r3
 8004eee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ef0:	801a      	strh	r2, [r3, #0]
 8004ef2:	e02a      	b.n	8004f4a <USB_EPStartXfer+0xea2>
 8004ef4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ef8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	785b      	ldrb	r3, [r3, #1]
 8004f00:	2b01      	cmp	r3, #1
 8004f02:	d122      	bne.n	8004f4a <USB_EPStartXfer+0xea2>
 8004f04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f08:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	673b      	str	r3, [r7, #112]	; 0x70
 8004f10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f14:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f1e:	b29b      	uxth	r3, r3
 8004f20:	461a      	mov	r2, r3
 8004f22:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004f24:	4413      	add	r3, r2
 8004f26:	673b      	str	r3, [r7, #112]	; 0x70
 8004f28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f2c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	781b      	ldrb	r3, [r3, #0]
 8004f34:	011a      	lsls	r2, r3, #4
 8004f36:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004f38:	4413      	add	r3, r2
 8004f3a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004f3e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004f40:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f44:	b29a      	uxth	r2, r3
 8004f46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f48:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004f4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f4e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	891b      	ldrh	r3, [r3, #8]
 8004f56:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004f5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f5e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	6959      	ldr	r1, [r3, #20]
 8004f66:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f6a:	b29b      	uxth	r3, r3
 8004f6c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004f70:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004f74:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004f78:	6800      	ldr	r0, [r0, #0]
 8004f7a:	f000 fff6 	bl	8005f6a <USB_WritePMA>
 8004f7e:	e1d8      	b.n	8005332 <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004f80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f84:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	785b      	ldrb	r3, [r3, #1]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d178      	bne.n	8005082 <USB_EPStartXfer+0xfda>
 8004f90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f94:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004f9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fa2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004fac:	b29b      	uxth	r3, r3
 8004fae:	461a      	mov	r2, r3
 8004fb0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004fb4:	4413      	add	r3, r2
 8004fb6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004fba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fbe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	781b      	ldrb	r3, [r3, #0]
 8004fc6:	011a      	lsls	r2, r3, #4
 8004fc8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004fcc:	4413      	add	r3, r2
 8004fce:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004fd2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004fd6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d116      	bne.n	800500c <USB_EPStartXfer+0xf64>
 8004fde:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004fe2:	881b      	ldrh	r3, [r3, #0]
 8004fe4:	b29b      	uxth	r3, r3
 8004fe6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004fea:	b29a      	uxth	r2, r3
 8004fec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004ff0:	801a      	strh	r2, [r3, #0]
 8004ff2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004ff6:	881b      	ldrh	r3, [r3, #0]
 8004ff8:	b29b      	uxth	r3, r3
 8004ffa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ffe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005002:	b29a      	uxth	r2, r3
 8005004:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005008:	801a      	strh	r2, [r3, #0]
 800500a:	e06b      	b.n	80050e4 <USB_EPStartXfer+0x103c>
 800500c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005010:	2b3e      	cmp	r3, #62	; 0x3e
 8005012:	d818      	bhi.n	8005046 <USB_EPStartXfer+0xf9e>
 8005014:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005018:	085b      	lsrs	r3, r3, #1
 800501a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800501e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005022:	f003 0301 	and.w	r3, r3, #1
 8005026:	2b00      	cmp	r3, #0
 8005028:	d004      	beq.n	8005034 <USB_EPStartXfer+0xf8c>
 800502a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800502e:	3301      	adds	r3, #1
 8005030:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005034:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005038:	b29b      	uxth	r3, r3
 800503a:	029b      	lsls	r3, r3, #10
 800503c:	b29a      	uxth	r2, r3
 800503e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005042:	801a      	strh	r2, [r3, #0]
 8005044:	e04e      	b.n	80050e4 <USB_EPStartXfer+0x103c>
 8005046:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800504a:	095b      	lsrs	r3, r3, #5
 800504c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005050:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005054:	f003 031f 	and.w	r3, r3, #31
 8005058:	2b00      	cmp	r3, #0
 800505a:	d104      	bne.n	8005066 <USB_EPStartXfer+0xfbe>
 800505c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005060:	3b01      	subs	r3, #1
 8005062:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005066:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800506a:	b29b      	uxth	r3, r3
 800506c:	029b      	lsls	r3, r3, #10
 800506e:	b29b      	uxth	r3, r3
 8005070:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005074:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005078:	b29a      	uxth	r2, r3
 800507a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800507e:	801a      	strh	r2, [r3, #0]
 8005080:	e030      	b.n	80050e4 <USB_EPStartXfer+0x103c>
 8005082:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005086:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	785b      	ldrb	r3, [r3, #1]
 800508e:	2b01      	cmp	r3, #1
 8005090:	d128      	bne.n	80050e4 <USB_EPStartXfer+0x103c>
 8005092:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005096:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80050a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050a4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050ae:	b29b      	uxth	r3, r3
 80050b0:	461a      	mov	r2, r3
 80050b2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80050b6:	4413      	add	r3, r2
 80050b8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80050bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	781b      	ldrb	r3, [r3, #0]
 80050c8:	011a      	lsls	r2, r3, #4
 80050ca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80050ce:	4413      	add	r3, r2
 80050d0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80050d4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80050d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050dc:	b29a      	uxth	r2, r3
 80050de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80050e2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80050e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	891b      	ldrh	r3, [r3, #8]
 80050f0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80050f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	6959      	ldr	r1, [r3, #20]
 8005100:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005104:	b29b      	uxth	r3, r3
 8005106:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800510a:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800510e:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005112:	6800      	ldr	r0, [r0, #0]
 8005114:	f000 ff29 	bl	8005f6a <USB_WritePMA>
          ep->xfer_buff += len;
 8005118:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800511c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	695a      	ldr	r2, [r3, #20]
 8005124:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005128:	441a      	add	r2, r3
 800512a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800512e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8005136:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800513a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	6a1a      	ldr	r2, [r3, #32]
 8005142:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005146:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	691b      	ldr	r3, [r3, #16]
 800514e:	429a      	cmp	r2, r3
 8005150:	d90f      	bls.n	8005172 <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 8005152:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005156:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	6a1a      	ldr	r2, [r3, #32]
 800515e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005162:	1ad2      	subs	r2, r2, r3
 8005164:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005168:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	621a      	str	r2, [r3, #32]
 8005170:	e00e      	b.n	8005190 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 8005172:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005176:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	6a1b      	ldr	r3, [r3, #32]
 800517e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8005182:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005186:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	2200      	movs	r2, #0
 800518e:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8005190:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005194:	2b00      	cmp	r3, #0
 8005196:	f000 80cc 	beq.w	8005332 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800519a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800519e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80051a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	785b      	ldrb	r3, [r3, #1]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d178      	bne.n	80052aa <USB_EPStartXfer+0x1202>
 80051b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051bc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80051c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051ca:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051d4:	b29b      	uxth	r3, r3
 80051d6:	461a      	mov	r2, r3
 80051d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80051dc:	4413      	add	r3, r2
 80051de:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80051e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	781b      	ldrb	r3, [r3, #0]
 80051ee:	011a      	lsls	r2, r3, #4
 80051f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80051f4:	4413      	add	r3, r2
 80051f6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80051fa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80051fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005202:	2b00      	cmp	r3, #0
 8005204:	d116      	bne.n	8005234 <USB_EPStartXfer+0x118c>
 8005206:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800520a:	881b      	ldrh	r3, [r3, #0]
 800520c:	b29b      	uxth	r3, r3
 800520e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005212:	b29a      	uxth	r2, r3
 8005214:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005218:	801a      	strh	r2, [r3, #0]
 800521a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800521e:	881b      	ldrh	r3, [r3, #0]
 8005220:	b29b      	uxth	r3, r3
 8005222:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005226:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800522a:	b29a      	uxth	r2, r3
 800522c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005230:	801a      	strh	r2, [r3, #0]
 8005232:	e064      	b.n	80052fe <USB_EPStartXfer+0x1256>
 8005234:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005238:	2b3e      	cmp	r3, #62	; 0x3e
 800523a:	d818      	bhi.n	800526e <USB_EPStartXfer+0x11c6>
 800523c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005240:	085b      	lsrs	r3, r3, #1
 8005242:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005246:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800524a:	f003 0301 	and.w	r3, r3, #1
 800524e:	2b00      	cmp	r3, #0
 8005250:	d004      	beq.n	800525c <USB_EPStartXfer+0x11b4>
 8005252:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005256:	3301      	adds	r3, #1
 8005258:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800525c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005260:	b29b      	uxth	r3, r3
 8005262:	029b      	lsls	r3, r3, #10
 8005264:	b29a      	uxth	r2, r3
 8005266:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800526a:	801a      	strh	r2, [r3, #0]
 800526c:	e047      	b.n	80052fe <USB_EPStartXfer+0x1256>
 800526e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005272:	095b      	lsrs	r3, r3, #5
 8005274:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005278:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800527c:	f003 031f 	and.w	r3, r3, #31
 8005280:	2b00      	cmp	r3, #0
 8005282:	d104      	bne.n	800528e <USB_EPStartXfer+0x11e6>
 8005284:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005288:	3b01      	subs	r3, #1
 800528a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800528e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005292:	b29b      	uxth	r3, r3
 8005294:	029b      	lsls	r3, r3, #10
 8005296:	b29b      	uxth	r3, r3
 8005298:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800529c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052a0:	b29a      	uxth	r2, r3
 80052a2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80052a6:	801a      	strh	r2, [r3, #0]
 80052a8:	e029      	b.n	80052fe <USB_EPStartXfer+0x1256>
 80052aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	785b      	ldrb	r3, [r3, #1]
 80052b6:	2b01      	cmp	r3, #1
 80052b8:	d121      	bne.n	80052fe <USB_EPStartXfer+0x1256>
 80052ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052be:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052c8:	b29b      	uxth	r3, r3
 80052ca:	461a      	mov	r2, r3
 80052cc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80052d0:	4413      	add	r3, r2
 80052d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80052d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	781b      	ldrb	r3, [r3, #0]
 80052e2:	011a      	lsls	r2, r3, #4
 80052e4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80052e8:	4413      	add	r3, r2
 80052ea:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80052ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80052f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052f6:	b29a      	uxth	r2, r3
 80052f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80052fc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80052fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005302:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	895b      	ldrh	r3, [r3, #10]
 800530a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800530e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005312:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	6959      	ldr	r1, [r3, #20]
 800531a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800531e:	b29b      	uxth	r3, r3
 8005320:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005324:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005328:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800532c:	6800      	ldr	r0, [r0, #0]
 800532e:	f000 fe1c 	bl	8005f6a <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005332:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005336:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800533a:	681a      	ldr	r2, [r3, #0]
 800533c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005340:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	781b      	ldrb	r3, [r3, #0]
 8005348:	009b      	lsls	r3, r3, #2
 800534a:	4413      	add	r3, r2
 800534c:	881b      	ldrh	r3, [r3, #0]
 800534e:	b29b      	uxth	r3, r3
 8005350:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005354:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8005358:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800535c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005360:	8013      	strh	r3, [r2, #0]
 8005362:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005366:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 800536a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800536e:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8005372:	8812      	ldrh	r2, [r2, #0]
 8005374:	f082 0210 	eor.w	r2, r2, #16
 8005378:	801a      	strh	r2, [r3, #0]
 800537a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800537e:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8005382:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005386:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 800538a:	8812      	ldrh	r2, [r2, #0]
 800538c:	f082 0220 	eor.w	r2, r2, #32
 8005390:	801a      	strh	r2, [r3, #0]
 8005392:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005396:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800539a:	681a      	ldr	r2, [r3, #0]
 800539c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	781b      	ldrb	r3, [r3, #0]
 80053a8:	009b      	lsls	r3, r3, #2
 80053aa:	441a      	add	r2, r3
 80053ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053b0:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 80053b4:	881b      	ldrh	r3, [r3, #0]
 80053b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053c6:	b29b      	uxth	r3, r3
 80053c8:	8013      	strh	r3, [r2, #0]
 80053ca:	f000 bc9f 	b.w	8005d0c <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80053ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	7b1b      	ldrb	r3, [r3, #12]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	f040 80ae 	bne.w	800553c <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80053e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	699a      	ldr	r2, [r3, #24]
 80053ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	691b      	ldr	r3, [r3, #16]
 80053f8:	429a      	cmp	r2, r3
 80053fa:	d917      	bls.n	800542c <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 80053fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005400:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	691b      	ldr	r3, [r3, #16]
 8005408:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 800540c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005410:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	699a      	ldr	r2, [r3, #24]
 8005418:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800541c:	1ad2      	subs	r2, r2, r3
 800541e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005422:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	619a      	str	r2, [r3, #24]
 800542a:	e00e      	b.n	800544a <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 800542c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005430:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	699b      	ldr	r3, [r3, #24]
 8005438:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 800543c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005440:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	2200      	movs	r2, #0
 8005448:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800544a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800544e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005458:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800545c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005466:	b29b      	uxth	r3, r3
 8005468:	461a      	mov	r2, r3
 800546a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800546e:	4413      	add	r3, r2
 8005470:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005474:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005478:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	781b      	ldrb	r3, [r3, #0]
 8005480:	011a      	lsls	r2, r3, #4
 8005482:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005486:	4413      	add	r3, r2
 8005488:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800548c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005490:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005494:	2b00      	cmp	r3, #0
 8005496:	d116      	bne.n	80054c6 <USB_EPStartXfer+0x141e>
 8005498:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800549c:	881b      	ldrh	r3, [r3, #0]
 800549e:	b29b      	uxth	r3, r3
 80054a0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80054a4:	b29a      	uxth	r2, r3
 80054a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80054aa:	801a      	strh	r2, [r3, #0]
 80054ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80054b0:	881b      	ldrh	r3, [r3, #0]
 80054b2:	b29b      	uxth	r3, r3
 80054b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054bc:	b29a      	uxth	r2, r3
 80054be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80054c2:	801a      	strh	r2, [r3, #0]
 80054c4:	e3e8      	b.n	8005c98 <USB_EPStartXfer+0x1bf0>
 80054c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054ca:	2b3e      	cmp	r3, #62	; 0x3e
 80054cc:	d818      	bhi.n	8005500 <USB_EPStartXfer+0x1458>
 80054ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054d2:	085b      	lsrs	r3, r3, #1
 80054d4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80054d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054dc:	f003 0301 	and.w	r3, r3, #1
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d004      	beq.n	80054ee <USB_EPStartXfer+0x1446>
 80054e4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80054e8:	3301      	adds	r3, #1
 80054ea:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80054ee:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80054f2:	b29b      	uxth	r3, r3
 80054f4:	029b      	lsls	r3, r3, #10
 80054f6:	b29a      	uxth	r2, r3
 80054f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80054fc:	801a      	strh	r2, [r3, #0]
 80054fe:	e3cb      	b.n	8005c98 <USB_EPStartXfer+0x1bf0>
 8005500:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005504:	095b      	lsrs	r3, r3, #5
 8005506:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800550a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800550e:	f003 031f 	and.w	r3, r3, #31
 8005512:	2b00      	cmp	r3, #0
 8005514:	d104      	bne.n	8005520 <USB_EPStartXfer+0x1478>
 8005516:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800551a:	3b01      	subs	r3, #1
 800551c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005520:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005524:	b29b      	uxth	r3, r3
 8005526:	029b      	lsls	r3, r3, #10
 8005528:	b29b      	uxth	r3, r3
 800552a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800552e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005532:	b29a      	uxth	r2, r3
 8005534:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005538:	801a      	strh	r2, [r3, #0]
 800553a:	e3ad      	b.n	8005c98 <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800553c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005540:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	78db      	ldrb	r3, [r3, #3]
 8005548:	2b02      	cmp	r3, #2
 800554a:	f040 8200 	bne.w	800594e <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800554e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005552:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	785b      	ldrb	r3, [r3, #1]
 800555a:	2b00      	cmp	r3, #0
 800555c:	f040 8091 	bne.w	8005682 <USB_EPStartXfer+0x15da>
 8005560:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005564:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800556e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005572:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800557c:	b29b      	uxth	r3, r3
 800557e:	461a      	mov	r2, r3
 8005580:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005584:	4413      	add	r3, r2
 8005586:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800558a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800558e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	781b      	ldrb	r3, [r3, #0]
 8005596:	011a      	lsls	r2, r3, #4
 8005598:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800559c:	4413      	add	r3, r2
 800559e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80055a2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80055a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	691b      	ldr	r3, [r3, #16]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d116      	bne.n	80055e4 <USB_EPStartXfer+0x153c>
 80055b6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80055ba:	881b      	ldrh	r3, [r3, #0]
 80055bc:	b29b      	uxth	r3, r3
 80055be:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80055c2:	b29a      	uxth	r2, r3
 80055c4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80055c8:	801a      	strh	r2, [r3, #0]
 80055ca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80055ce:	881b      	ldrh	r3, [r3, #0]
 80055d0:	b29b      	uxth	r3, r3
 80055d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055da:	b29a      	uxth	r2, r3
 80055dc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80055e0:	801a      	strh	r2, [r3, #0]
 80055e2:	e083      	b.n	80056ec <USB_EPStartXfer+0x1644>
 80055e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	691b      	ldr	r3, [r3, #16]
 80055f0:	2b3e      	cmp	r3, #62	; 0x3e
 80055f2:	d820      	bhi.n	8005636 <USB_EPStartXfer+0x158e>
 80055f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	691b      	ldr	r3, [r3, #16]
 8005600:	085b      	lsrs	r3, r3, #1
 8005602:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005606:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800560a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	691b      	ldr	r3, [r3, #16]
 8005612:	f003 0301 	and.w	r3, r3, #1
 8005616:	2b00      	cmp	r3, #0
 8005618:	d004      	beq.n	8005624 <USB_EPStartXfer+0x157c>
 800561a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800561e:	3301      	adds	r3, #1
 8005620:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005624:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005628:	b29b      	uxth	r3, r3
 800562a:	029b      	lsls	r3, r3, #10
 800562c:	b29a      	uxth	r2, r3
 800562e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005632:	801a      	strh	r2, [r3, #0]
 8005634:	e05a      	b.n	80056ec <USB_EPStartXfer+0x1644>
 8005636:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800563a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	691b      	ldr	r3, [r3, #16]
 8005642:	095b      	lsrs	r3, r3, #5
 8005644:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005648:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800564c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	691b      	ldr	r3, [r3, #16]
 8005654:	f003 031f 	and.w	r3, r3, #31
 8005658:	2b00      	cmp	r3, #0
 800565a:	d104      	bne.n	8005666 <USB_EPStartXfer+0x15be>
 800565c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005660:	3b01      	subs	r3, #1
 8005662:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005666:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800566a:	b29b      	uxth	r3, r3
 800566c:	029b      	lsls	r3, r3, #10
 800566e:	b29b      	uxth	r3, r3
 8005670:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005674:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005678:	b29a      	uxth	r2, r3
 800567a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800567e:	801a      	strh	r2, [r3, #0]
 8005680:	e034      	b.n	80056ec <USB_EPStartXfer+0x1644>
 8005682:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005686:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	785b      	ldrb	r3, [r3, #1]
 800568e:	2b01      	cmp	r3, #1
 8005690:	d12c      	bne.n	80056ec <USB_EPStartXfer+0x1644>
 8005692:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005696:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80056a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056a4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056ae:	b29b      	uxth	r3, r3
 80056b0:	461a      	mov	r2, r3
 80056b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80056b6:	4413      	add	r3, r2
 80056b8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80056bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	781b      	ldrb	r3, [r3, #0]
 80056c8:	011a      	lsls	r2, r3, #4
 80056ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80056ce:	4413      	add	r3, r2
 80056d0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80056d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80056d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	691b      	ldr	r3, [r3, #16]
 80056e4:	b29a      	uxth	r2, r3
 80056e6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80056ea:	801a      	strh	r2, [r3, #0]
 80056ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056f0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80056fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	785b      	ldrb	r3, [r3, #1]
 8005706:	2b00      	cmp	r3, #0
 8005708:	f040 8091 	bne.w	800582e <USB_EPStartXfer+0x1786>
 800570c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005710:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800571a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800571e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005728:	b29b      	uxth	r3, r3
 800572a:	461a      	mov	r2, r3
 800572c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005730:	4413      	add	r3, r2
 8005732:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005736:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800573a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	781b      	ldrb	r3, [r3, #0]
 8005742:	011a      	lsls	r2, r3, #4
 8005744:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005748:	4413      	add	r3, r2
 800574a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800574e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005752:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005756:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	691b      	ldr	r3, [r3, #16]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d116      	bne.n	8005790 <USB_EPStartXfer+0x16e8>
 8005762:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005766:	881b      	ldrh	r3, [r3, #0]
 8005768:	b29b      	uxth	r3, r3
 800576a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800576e:	b29a      	uxth	r2, r3
 8005770:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005774:	801a      	strh	r2, [r3, #0]
 8005776:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800577a:	881b      	ldrh	r3, [r3, #0]
 800577c:	b29b      	uxth	r3, r3
 800577e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005782:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005786:	b29a      	uxth	r2, r3
 8005788:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800578c:	801a      	strh	r2, [r3, #0]
 800578e:	e07c      	b.n	800588a <USB_EPStartXfer+0x17e2>
 8005790:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005794:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	691b      	ldr	r3, [r3, #16]
 800579c:	2b3e      	cmp	r3, #62	; 0x3e
 800579e:	d820      	bhi.n	80057e2 <USB_EPStartXfer+0x173a>
 80057a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	691b      	ldr	r3, [r3, #16]
 80057ac:	085b      	lsrs	r3, r3, #1
 80057ae:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80057b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	691b      	ldr	r3, [r3, #16]
 80057be:	f003 0301 	and.w	r3, r3, #1
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d004      	beq.n	80057d0 <USB_EPStartXfer+0x1728>
 80057c6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80057ca:	3301      	adds	r3, #1
 80057cc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80057d0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80057d4:	b29b      	uxth	r3, r3
 80057d6:	029b      	lsls	r3, r3, #10
 80057d8:	b29a      	uxth	r2, r3
 80057da:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80057de:	801a      	strh	r2, [r3, #0]
 80057e0:	e053      	b.n	800588a <USB_EPStartXfer+0x17e2>
 80057e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	691b      	ldr	r3, [r3, #16]
 80057ee:	095b      	lsrs	r3, r3, #5
 80057f0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80057f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	691b      	ldr	r3, [r3, #16]
 8005800:	f003 031f 	and.w	r3, r3, #31
 8005804:	2b00      	cmp	r3, #0
 8005806:	d104      	bne.n	8005812 <USB_EPStartXfer+0x176a>
 8005808:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800580c:	3b01      	subs	r3, #1
 800580e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005812:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005816:	b29b      	uxth	r3, r3
 8005818:	029b      	lsls	r3, r3, #10
 800581a:	b29b      	uxth	r3, r3
 800581c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005820:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005824:	b29a      	uxth	r2, r3
 8005826:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800582a:	801a      	strh	r2, [r3, #0]
 800582c:	e02d      	b.n	800588a <USB_EPStartXfer+0x17e2>
 800582e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005832:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	785b      	ldrb	r3, [r3, #1]
 800583a:	2b01      	cmp	r3, #1
 800583c:	d125      	bne.n	800588a <USB_EPStartXfer+0x17e2>
 800583e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005842:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800584c:	b29b      	uxth	r3, r3
 800584e:	461a      	mov	r2, r3
 8005850:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005854:	4413      	add	r3, r2
 8005856:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800585a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800585e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	781b      	ldrb	r3, [r3, #0]
 8005866:	011a      	lsls	r2, r3, #4
 8005868:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800586c:	4413      	add	r3, r2
 800586e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005872:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005876:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800587a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	691b      	ldr	r3, [r3, #16]
 8005882:	b29a      	uxth	r2, r3
 8005884:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005888:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800588a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800588e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	69db      	ldr	r3, [r3, #28]
 8005896:	2b00      	cmp	r3, #0
 8005898:	f000 81fe 	beq.w	8005c98 <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800589c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058a0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80058a4:	681a      	ldr	r2, [r3, #0]
 80058a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	781b      	ldrb	r3, [r3, #0]
 80058b2:	009b      	lsls	r3, r3, #2
 80058b4:	4413      	add	r3, r2
 80058b6:	881b      	ldrh	r3, [r3, #0]
 80058b8:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80058bc:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80058c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d005      	beq.n	80058d4 <USB_EPStartXfer+0x182c>
 80058c8:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80058cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d10d      	bne.n	80058f0 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80058d4:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80058d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80058dc:	2b00      	cmp	r3, #0
 80058de:	f040 81db 	bne.w	8005c98 <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80058e2:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80058e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	f040 81d4 	bne.w	8005c98 <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 80058f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058f4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80058f8:	681a      	ldr	r2, [r3, #0]
 80058fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	781b      	ldrb	r3, [r3, #0]
 8005906:	009b      	lsls	r3, r3, #2
 8005908:	4413      	add	r3, r2
 800590a:	881b      	ldrh	r3, [r3, #0]
 800590c:	b29b      	uxth	r3, r3
 800590e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005912:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005916:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 800591a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800591e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005922:	681a      	ldr	r2, [r3, #0]
 8005924:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005928:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	781b      	ldrb	r3, [r3, #0]
 8005930:	009b      	lsls	r3, r3, #2
 8005932:	441a      	add	r2, r3
 8005934:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8005938:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800593c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005940:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005944:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005948:	b29b      	uxth	r3, r3
 800594a:	8013      	strh	r3, [r2, #0]
 800594c:	e1a4      	b.n	8005c98 <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800594e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005952:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	78db      	ldrb	r3, [r3, #3]
 800595a:	2b01      	cmp	r3, #1
 800595c:	f040 819a 	bne.w	8005c94 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8005960:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005964:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	699a      	ldr	r2, [r3, #24]
 800596c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005970:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	691b      	ldr	r3, [r3, #16]
 8005978:	429a      	cmp	r2, r3
 800597a:	d917      	bls.n	80059ac <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 800597c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005980:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	691b      	ldr	r3, [r3, #16]
 8005988:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 800598c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005990:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	699a      	ldr	r2, [r3, #24]
 8005998:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800599c:	1ad2      	subs	r2, r2, r3
 800599e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	619a      	str	r2, [r3, #24]
 80059aa:	e00e      	b.n	80059ca <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 80059ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	699b      	ldr	r3, [r3, #24]
 80059b8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 80059bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	2200      	movs	r2, #0
 80059c8:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80059ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	785b      	ldrb	r3, [r3, #1]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d178      	bne.n	8005acc <USB_EPStartXfer+0x1a24>
 80059da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059de:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80059e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059ec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059f6:	b29b      	uxth	r3, r3
 80059f8:	461a      	mov	r2, r3
 80059fa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80059fe:	4413      	add	r3, r2
 8005a00:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005a04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a08:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	781b      	ldrb	r3, [r3, #0]
 8005a10:	011a      	lsls	r2, r3, #4
 8005a12:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005a16:	4413      	add	r3, r2
 8005a18:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005a1c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005a20:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d116      	bne.n	8005a56 <USB_EPStartXfer+0x19ae>
 8005a28:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005a2c:	881b      	ldrh	r3, [r3, #0]
 8005a2e:	b29b      	uxth	r3, r3
 8005a30:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005a34:	b29a      	uxth	r2, r3
 8005a36:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005a3a:	801a      	strh	r2, [r3, #0]
 8005a3c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005a40:	881b      	ldrh	r3, [r3, #0]
 8005a42:	b29b      	uxth	r3, r3
 8005a44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a4c:	b29a      	uxth	r2, r3
 8005a4e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005a52:	801a      	strh	r2, [r3, #0]
 8005a54:	e06b      	b.n	8005b2e <USB_EPStartXfer+0x1a86>
 8005a56:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a5a:	2b3e      	cmp	r3, #62	; 0x3e
 8005a5c:	d818      	bhi.n	8005a90 <USB_EPStartXfer+0x19e8>
 8005a5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a62:	085b      	lsrs	r3, r3, #1
 8005a64:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005a68:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a6c:	f003 0301 	and.w	r3, r3, #1
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d004      	beq.n	8005a7e <USB_EPStartXfer+0x19d6>
 8005a74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a78:	3301      	adds	r3, #1
 8005a7a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005a7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a82:	b29b      	uxth	r3, r3
 8005a84:	029b      	lsls	r3, r3, #10
 8005a86:	b29a      	uxth	r2, r3
 8005a88:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005a8c:	801a      	strh	r2, [r3, #0]
 8005a8e:	e04e      	b.n	8005b2e <USB_EPStartXfer+0x1a86>
 8005a90:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a94:	095b      	lsrs	r3, r3, #5
 8005a96:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005a9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a9e:	f003 031f 	and.w	r3, r3, #31
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d104      	bne.n	8005ab0 <USB_EPStartXfer+0x1a08>
 8005aa6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005aaa:	3b01      	subs	r3, #1
 8005aac:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005ab0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ab4:	b29b      	uxth	r3, r3
 8005ab6:	029b      	lsls	r3, r3, #10
 8005ab8:	b29b      	uxth	r3, r3
 8005aba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005abe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ac2:	b29a      	uxth	r2, r3
 8005ac4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005ac8:	801a      	strh	r2, [r3, #0]
 8005aca:	e030      	b.n	8005b2e <USB_EPStartXfer+0x1a86>
 8005acc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ad0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	785b      	ldrb	r3, [r3, #1]
 8005ad8:	2b01      	cmp	r3, #1
 8005ada:	d128      	bne.n	8005b2e <USB_EPStartXfer+0x1a86>
 8005adc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ae0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005aea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005aee:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005af8:	b29b      	uxth	r3, r3
 8005afa:	461a      	mov	r2, r3
 8005afc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b00:	4413      	add	r3, r2
 8005b02:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005b06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b0a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	781b      	ldrb	r3, [r3, #0]
 8005b12:	011a      	lsls	r2, r3, #4
 8005b14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b18:	4413      	add	r3, r2
 8005b1a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005b1e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005b22:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b26:	b29a      	uxth	r2, r3
 8005b28:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005b2c:	801a      	strh	r2, [r3, #0]
 8005b2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b32:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005b3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b40:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	785b      	ldrb	r3, [r3, #1]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d178      	bne.n	8005c3e <USB_EPStartXfer+0x1b96>
 8005b4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b50:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005b5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b5e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b68:	b29b      	uxth	r3, r3
 8005b6a:	461a      	mov	r2, r3
 8005b6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b70:	4413      	add	r3, r2
 8005b72:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005b76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b7a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	781b      	ldrb	r3, [r3, #0]
 8005b82:	011a      	lsls	r2, r3, #4
 8005b84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b88:	4413      	add	r3, r2
 8005b8a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005b8e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005b92:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d116      	bne.n	8005bc8 <USB_EPStartXfer+0x1b20>
 8005b9a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005b9e:	881b      	ldrh	r3, [r3, #0]
 8005ba0:	b29b      	uxth	r3, r3
 8005ba2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005ba6:	b29a      	uxth	r2, r3
 8005ba8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005bac:	801a      	strh	r2, [r3, #0]
 8005bae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005bb2:	881b      	ldrh	r3, [r3, #0]
 8005bb4:	b29b      	uxth	r3, r3
 8005bb6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bbe:	b29a      	uxth	r2, r3
 8005bc0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005bc4:	801a      	strh	r2, [r3, #0]
 8005bc6:	e067      	b.n	8005c98 <USB_EPStartXfer+0x1bf0>
 8005bc8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bcc:	2b3e      	cmp	r3, #62	; 0x3e
 8005bce:	d818      	bhi.n	8005c02 <USB_EPStartXfer+0x1b5a>
 8005bd0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bd4:	085b      	lsrs	r3, r3, #1
 8005bd6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005bda:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bde:	f003 0301 	and.w	r3, r3, #1
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d004      	beq.n	8005bf0 <USB_EPStartXfer+0x1b48>
 8005be6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005bea:	3301      	adds	r3, #1
 8005bec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005bf0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005bf4:	b29b      	uxth	r3, r3
 8005bf6:	029b      	lsls	r3, r3, #10
 8005bf8:	b29a      	uxth	r2, r3
 8005bfa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005bfe:	801a      	strh	r2, [r3, #0]
 8005c00:	e04a      	b.n	8005c98 <USB_EPStartXfer+0x1bf0>
 8005c02:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c06:	095b      	lsrs	r3, r3, #5
 8005c08:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005c0c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c10:	f003 031f 	and.w	r3, r3, #31
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d104      	bne.n	8005c22 <USB_EPStartXfer+0x1b7a>
 8005c18:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005c1c:	3b01      	subs	r3, #1
 8005c1e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005c22:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005c26:	b29b      	uxth	r3, r3
 8005c28:	029b      	lsls	r3, r3, #10
 8005c2a:	b29b      	uxth	r3, r3
 8005c2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c34:	b29a      	uxth	r2, r3
 8005c36:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005c3a:	801a      	strh	r2, [r3, #0]
 8005c3c:	e02c      	b.n	8005c98 <USB_EPStartXfer+0x1bf0>
 8005c3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c42:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	785b      	ldrb	r3, [r3, #1]
 8005c4a:	2b01      	cmp	r3, #1
 8005c4c:	d124      	bne.n	8005c98 <USB_EPStartXfer+0x1bf0>
 8005c4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c52:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c5c:	b29b      	uxth	r3, r3
 8005c5e:	461a      	mov	r2, r3
 8005c60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c64:	4413      	add	r3, r2
 8005c66:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005c6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c6e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	781b      	ldrb	r3, [r3, #0]
 8005c76:	011a      	lsls	r2, r3, #4
 8005c78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c7c:	4413      	add	r3, r2
 8005c7e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005c82:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005c86:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c8a:	b29a      	uxth	r2, r3
 8005c8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c90:	801a      	strh	r2, [r3, #0]
 8005c92:	e001      	b.n	8005c98 <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 8005c94:	2301      	movs	r3, #1
 8005c96:	e03a      	b.n	8005d0e <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005c98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c9c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005ca0:	681a      	ldr	r2, [r3, #0]
 8005ca2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ca6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	781b      	ldrb	r3, [r3, #0]
 8005cae:	009b      	lsls	r3, r3, #2
 8005cb0:	4413      	add	r3, r2
 8005cb2:	881b      	ldrh	r3, [r3, #0]
 8005cb4:	b29b      	uxth	r3, r3
 8005cb6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005cba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cbe:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8005cc2:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8005cc6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005cca:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8005cce:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8005cd2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005cd6:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8005cda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cde:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005ce2:	681a      	ldr	r2, [r3, #0]
 8005ce4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ce8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	781b      	ldrb	r3, [r3, #0]
 8005cf0:	009b      	lsls	r3, r3, #2
 8005cf2:	441a      	add	r2, r3
 8005cf4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8005cf8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cfc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d08:	b29b      	uxth	r3, r3
 8005d0a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005d0c:	2300      	movs	r3, #0
}
 8005d0e:	4618      	mov	r0, r3
 8005d10:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8005d14:	46bd      	mov	sp, r7
 8005d16:	bd80      	pop	{r7, pc}

08005d18 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005d18:	b480      	push	{r7}
 8005d1a:	b085      	sub	sp, #20
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
 8005d20:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	785b      	ldrb	r3, [r3, #1]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d020      	beq.n	8005d6c <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8005d2a:	687a      	ldr	r2, [r7, #4]
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	781b      	ldrb	r3, [r3, #0]
 8005d30:	009b      	lsls	r3, r3, #2
 8005d32:	4413      	add	r3, r2
 8005d34:	881b      	ldrh	r3, [r3, #0]
 8005d36:	b29b      	uxth	r3, r3
 8005d38:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d40:	81bb      	strh	r3, [r7, #12]
 8005d42:	89bb      	ldrh	r3, [r7, #12]
 8005d44:	f083 0310 	eor.w	r3, r3, #16
 8005d48:	81bb      	strh	r3, [r7, #12]
 8005d4a:	687a      	ldr	r2, [r7, #4]
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	781b      	ldrb	r3, [r3, #0]
 8005d50:	009b      	lsls	r3, r3, #2
 8005d52:	441a      	add	r2, r3
 8005d54:	89bb      	ldrh	r3, [r7, #12]
 8005d56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d66:	b29b      	uxth	r3, r3
 8005d68:	8013      	strh	r3, [r2, #0]
 8005d6a:	e01f      	b.n	8005dac <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005d6c:	687a      	ldr	r2, [r7, #4]
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	781b      	ldrb	r3, [r3, #0]
 8005d72:	009b      	lsls	r3, r3, #2
 8005d74:	4413      	add	r3, r2
 8005d76:	881b      	ldrh	r3, [r3, #0]
 8005d78:	b29b      	uxth	r3, r3
 8005d7a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d82:	81fb      	strh	r3, [r7, #14]
 8005d84:	89fb      	ldrh	r3, [r7, #14]
 8005d86:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005d8a:	81fb      	strh	r3, [r7, #14]
 8005d8c:	687a      	ldr	r2, [r7, #4]
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	781b      	ldrb	r3, [r3, #0]
 8005d92:	009b      	lsls	r3, r3, #2
 8005d94:	441a      	add	r2, r3
 8005d96:	89fb      	ldrh	r3, [r7, #14]
 8005d98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005da0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005da4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005da8:	b29b      	uxth	r3, r3
 8005daa:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005dac:	2300      	movs	r3, #0
}
 8005dae:	4618      	mov	r0, r3
 8005db0:	3714      	adds	r7, #20
 8005db2:	46bd      	mov	sp, r7
 8005db4:	bc80      	pop	{r7}
 8005db6:	4770      	bx	lr

08005db8 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005db8:	b480      	push	{r7}
 8005dba:	b087      	sub	sp, #28
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
 8005dc0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	7b1b      	ldrb	r3, [r3, #12]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	f040 809d 	bne.w	8005f06 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	785b      	ldrb	r3, [r3, #1]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d04c      	beq.n	8005e6e <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005dd4:	687a      	ldr	r2, [r7, #4]
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	781b      	ldrb	r3, [r3, #0]
 8005dda:	009b      	lsls	r3, r3, #2
 8005ddc:	4413      	add	r3, r2
 8005dde:	881b      	ldrh	r3, [r3, #0]
 8005de0:	823b      	strh	r3, [r7, #16]
 8005de2:	8a3b      	ldrh	r3, [r7, #16]
 8005de4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d01b      	beq.n	8005e24 <USB_EPClearStall+0x6c>
 8005dec:	687a      	ldr	r2, [r7, #4]
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	781b      	ldrb	r3, [r3, #0]
 8005df2:	009b      	lsls	r3, r3, #2
 8005df4:	4413      	add	r3, r2
 8005df6:	881b      	ldrh	r3, [r3, #0]
 8005df8:	b29b      	uxth	r3, r3
 8005dfa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005dfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e02:	81fb      	strh	r3, [r7, #14]
 8005e04:	687a      	ldr	r2, [r7, #4]
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	781b      	ldrb	r3, [r3, #0]
 8005e0a:	009b      	lsls	r3, r3, #2
 8005e0c:	441a      	add	r2, r3
 8005e0e:	89fb      	ldrh	r3, [r7, #14]
 8005e10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e1c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005e20:	b29b      	uxth	r3, r3
 8005e22:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	78db      	ldrb	r3, [r3, #3]
 8005e28:	2b01      	cmp	r3, #1
 8005e2a:	d06c      	beq.n	8005f06 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005e2c:	687a      	ldr	r2, [r7, #4]
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	781b      	ldrb	r3, [r3, #0]
 8005e32:	009b      	lsls	r3, r3, #2
 8005e34:	4413      	add	r3, r2
 8005e36:	881b      	ldrh	r3, [r3, #0]
 8005e38:	b29b      	uxth	r3, r3
 8005e3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e42:	81bb      	strh	r3, [r7, #12]
 8005e44:	89bb      	ldrh	r3, [r7, #12]
 8005e46:	f083 0320 	eor.w	r3, r3, #32
 8005e4a:	81bb      	strh	r3, [r7, #12]
 8005e4c:	687a      	ldr	r2, [r7, #4]
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	781b      	ldrb	r3, [r3, #0]
 8005e52:	009b      	lsls	r3, r3, #2
 8005e54:	441a      	add	r2, r3
 8005e56:	89bb      	ldrh	r3, [r7, #12]
 8005e58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e68:	b29b      	uxth	r3, r3
 8005e6a:	8013      	strh	r3, [r2, #0]
 8005e6c:	e04b      	b.n	8005f06 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005e6e:	687a      	ldr	r2, [r7, #4]
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	781b      	ldrb	r3, [r3, #0]
 8005e74:	009b      	lsls	r3, r3, #2
 8005e76:	4413      	add	r3, r2
 8005e78:	881b      	ldrh	r3, [r3, #0]
 8005e7a:	82fb      	strh	r3, [r7, #22]
 8005e7c:	8afb      	ldrh	r3, [r7, #22]
 8005e7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d01b      	beq.n	8005ebe <USB_EPClearStall+0x106>
 8005e86:	687a      	ldr	r2, [r7, #4]
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	781b      	ldrb	r3, [r3, #0]
 8005e8c:	009b      	lsls	r3, r3, #2
 8005e8e:	4413      	add	r3, r2
 8005e90:	881b      	ldrh	r3, [r3, #0]
 8005e92:	b29b      	uxth	r3, r3
 8005e94:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e9c:	82bb      	strh	r3, [r7, #20]
 8005e9e:	687a      	ldr	r2, [r7, #4]
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	781b      	ldrb	r3, [r3, #0]
 8005ea4:	009b      	lsls	r3, r3, #2
 8005ea6:	441a      	add	r2, r3
 8005ea8:	8abb      	ldrh	r3, [r7, #20]
 8005eaa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005eae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005eb2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005eb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005eba:	b29b      	uxth	r3, r3
 8005ebc:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005ebe:	687a      	ldr	r2, [r7, #4]
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	781b      	ldrb	r3, [r3, #0]
 8005ec4:	009b      	lsls	r3, r3, #2
 8005ec6:	4413      	add	r3, r2
 8005ec8:	881b      	ldrh	r3, [r3, #0]
 8005eca:	b29b      	uxth	r3, r3
 8005ecc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ed0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ed4:	827b      	strh	r3, [r7, #18]
 8005ed6:	8a7b      	ldrh	r3, [r7, #18]
 8005ed8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005edc:	827b      	strh	r3, [r7, #18]
 8005ede:	8a7b      	ldrh	r3, [r7, #18]
 8005ee0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005ee4:	827b      	strh	r3, [r7, #18]
 8005ee6:	687a      	ldr	r2, [r7, #4]
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	781b      	ldrb	r3, [r3, #0]
 8005eec:	009b      	lsls	r3, r3, #2
 8005eee:	441a      	add	r2, r3
 8005ef0:	8a7b      	ldrh	r3, [r7, #18]
 8005ef2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ef6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005efa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005efe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f02:	b29b      	uxth	r3, r3
 8005f04:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005f06:	2300      	movs	r3, #0
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	371c      	adds	r7, #28
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	bc80      	pop	{r7}
 8005f10:	4770      	bx	lr

08005f12 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8005f12:	b480      	push	{r7}
 8005f14:	b083      	sub	sp, #12
 8005f16:	af00      	add	r7, sp, #0
 8005f18:	6078      	str	r0, [r7, #4]
 8005f1a:	460b      	mov	r3, r1
 8005f1c:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8005f1e:	78fb      	ldrb	r3, [r7, #3]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d103      	bne.n	8005f2c <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2280      	movs	r2, #128	; 0x80
 8005f28:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8005f2c:	2300      	movs	r3, #0
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	370c      	adds	r7, #12
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bc80      	pop	{r7}
 8005f36:	4770      	bx	lr

08005f38 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8005f38:	b480      	push	{r7}
 8005f3a:	b083      	sub	sp, #12
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005f40:	2300      	movs	r3, #0
}
 8005f42:	4618      	mov	r0, r3
 8005f44:	370c      	adds	r7, #12
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bc80      	pop	{r7}
 8005f4a:	4770      	bx	lr

08005f4c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b085      	sub	sp, #20
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005f5a:	b29b      	uxth	r3, r3
 8005f5c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
}
 8005f60:	4618      	mov	r0, r3
 8005f62:	3714      	adds	r7, #20
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bc80      	pop	{r7}
 8005f68:	4770      	bx	lr

08005f6a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005f6a:	b480      	push	{r7}
 8005f6c:	b08d      	sub	sp, #52	; 0x34
 8005f6e:	af00      	add	r7, sp, #0
 8005f70:	60f8      	str	r0, [r7, #12]
 8005f72:	60b9      	str	r1, [r7, #8]
 8005f74:	4611      	mov	r1, r2
 8005f76:	461a      	mov	r2, r3
 8005f78:	460b      	mov	r3, r1
 8005f7a:	80fb      	strh	r3, [r7, #6]
 8005f7c:	4613      	mov	r3, r2
 8005f7e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005f80:	88bb      	ldrh	r3, [r7, #4]
 8005f82:	3301      	adds	r3, #1
 8005f84:	085b      	lsrs	r3, r3, #1
 8005f86:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005f8c:	68bb      	ldr	r3, [r7, #8]
 8005f8e:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005f90:	88fb      	ldrh	r3, [r7, #6]
 8005f92:	005a      	lsls	r2, r3, #1
 8005f94:	69fb      	ldr	r3, [r7, #28]
 8005f96:	4413      	add	r3, r2
 8005f98:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f9c:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8005f9e:	6a3b      	ldr	r3, [r7, #32]
 8005fa0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005fa2:	e01e      	b.n	8005fe2 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8005fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa6:	781b      	ldrb	r3, [r3, #0]
 8005fa8:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8005faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fac:	3301      	adds	r3, #1
 8005fae:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8005fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb2:	781b      	ldrb	r3, [r3, #0]
 8005fb4:	b29b      	uxth	r3, r3
 8005fb6:	021b      	lsls	r3, r3, #8
 8005fb8:	b29b      	uxth	r3, r3
 8005fba:	461a      	mov	r2, r3
 8005fbc:	69bb      	ldr	r3, [r7, #24]
 8005fbe:	4313      	orrs	r3, r2
 8005fc0:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8005fc2:	697b      	ldr	r3, [r7, #20]
 8005fc4:	b29a      	uxth	r2, r3
 8005fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fc8:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8005fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fcc:	3302      	adds	r3, #2
 8005fce:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8005fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fd2:	3302      	adds	r3, #2
 8005fd4:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8005fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd8:	3301      	adds	r3, #1
 8005fda:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8005fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fde:	3b01      	subs	r3, #1
 8005fe0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d1dd      	bne.n	8005fa4 <USB_WritePMA+0x3a>
  }
}
 8005fe8:	bf00      	nop
 8005fea:	bf00      	nop
 8005fec:	3734      	adds	r7, #52	; 0x34
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bc80      	pop	{r7}
 8005ff2:	4770      	bx	lr

08005ff4 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	b08b      	sub	sp, #44	; 0x2c
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	60f8      	str	r0, [r7, #12]
 8005ffc:	60b9      	str	r1, [r7, #8]
 8005ffe:	4611      	mov	r1, r2
 8006000:	461a      	mov	r2, r3
 8006002:	460b      	mov	r3, r1
 8006004:	80fb      	strh	r3, [r7, #6]
 8006006:	4613      	mov	r3, r2
 8006008:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800600a:	88bb      	ldrh	r3, [r7, #4]
 800600c:	085b      	lsrs	r3, r3, #1
 800600e:	b29b      	uxth	r3, r3
 8006010:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800601a:	88fb      	ldrh	r3, [r7, #6]
 800601c:	005a      	lsls	r2, r3, #1
 800601e:	697b      	ldr	r3, [r7, #20]
 8006020:	4413      	add	r3, r2
 8006022:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006026:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8006028:	69bb      	ldr	r3, [r7, #24]
 800602a:	627b      	str	r3, [r7, #36]	; 0x24
 800602c:	e01b      	b.n	8006066 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800602e:	6a3b      	ldr	r3, [r7, #32]
 8006030:	881b      	ldrh	r3, [r3, #0]
 8006032:	b29b      	uxth	r3, r3
 8006034:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006036:	6a3b      	ldr	r3, [r7, #32]
 8006038:	3302      	adds	r3, #2
 800603a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800603c:	693b      	ldr	r3, [r7, #16]
 800603e:	b2da      	uxtb	r2, r3
 8006040:	69fb      	ldr	r3, [r7, #28]
 8006042:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006044:	69fb      	ldr	r3, [r7, #28]
 8006046:	3301      	adds	r3, #1
 8006048:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800604a:	693b      	ldr	r3, [r7, #16]
 800604c:	0a1b      	lsrs	r3, r3, #8
 800604e:	b2da      	uxtb	r2, r3
 8006050:	69fb      	ldr	r3, [r7, #28]
 8006052:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006054:	69fb      	ldr	r3, [r7, #28]
 8006056:	3301      	adds	r3, #1
 8006058:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800605a:	6a3b      	ldr	r3, [r7, #32]
 800605c:	3302      	adds	r3, #2
 800605e:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8006060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006062:	3b01      	subs	r3, #1
 8006064:	627b      	str	r3, [r7, #36]	; 0x24
 8006066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006068:	2b00      	cmp	r3, #0
 800606a:	d1e0      	bne.n	800602e <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800606c:	88bb      	ldrh	r3, [r7, #4]
 800606e:	f003 0301 	and.w	r3, r3, #1
 8006072:	b29b      	uxth	r3, r3
 8006074:	2b00      	cmp	r3, #0
 8006076:	d007      	beq.n	8006088 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8006078:	6a3b      	ldr	r3, [r7, #32]
 800607a:	881b      	ldrh	r3, [r3, #0]
 800607c:	b29b      	uxth	r3, r3
 800607e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006080:	693b      	ldr	r3, [r7, #16]
 8006082:	b2da      	uxtb	r2, r3
 8006084:	69fb      	ldr	r3, [r7, #28]
 8006086:	701a      	strb	r2, [r3, #0]
  }
}
 8006088:	bf00      	nop
 800608a:	372c      	adds	r7, #44	; 0x2c
 800608c:	46bd      	mov	sp, r7
 800608e:	bc80      	pop	{r7}
 8006090:	4770      	bx	lr

08006092 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006092:	b580      	push	{r7, lr}
 8006094:	b084      	sub	sp, #16
 8006096:	af00      	add	r7, sp, #0
 8006098:	6078      	str	r0, [r7, #4]
 800609a:	460b      	mov	r3, r1
 800609c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800609e:	2300      	movs	r3, #0
 80060a0:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	7c1b      	ldrb	r3, [r3, #16]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d115      	bne.n	80060d6 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80060aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80060ae:	2202      	movs	r2, #2
 80060b0:	2181      	movs	r1, #129	; 0x81
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	f001 fe2f 	bl	8007d16 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2201      	movs	r2, #1
 80060bc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80060be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80060c2:	2202      	movs	r2, #2
 80060c4:	2101      	movs	r1, #1
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	f001 fe25 	bl	8007d16 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2201      	movs	r2, #1
 80060d0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 80060d4:	e012      	b.n	80060fc <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80060d6:	2340      	movs	r3, #64	; 0x40
 80060d8:	2202      	movs	r2, #2
 80060da:	2181      	movs	r1, #129	; 0x81
 80060dc:	6878      	ldr	r0, [r7, #4]
 80060de:	f001 fe1a 	bl	8007d16 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2201      	movs	r2, #1
 80060e6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80060e8:	2340      	movs	r3, #64	; 0x40
 80060ea:	2202      	movs	r2, #2
 80060ec:	2101      	movs	r1, #1
 80060ee:	6878      	ldr	r0, [r7, #4]
 80060f0:	f001 fe11 	bl	8007d16 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2201      	movs	r2, #1
 80060f8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80060fc:	2308      	movs	r3, #8
 80060fe:	2203      	movs	r2, #3
 8006100:	2182      	movs	r1, #130	; 0x82
 8006102:	6878      	ldr	r0, [r7, #4]
 8006104:	f001 fe07 	bl	8007d16 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2201      	movs	r2, #1
 800610c:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 800610e:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006112:	f001 ff27 	bl	8007f64 <USBD_static_malloc>
 8006116:	4602      	mov	r2, r0
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006124:	2b00      	cmp	r3, #0
 8006126:	d102      	bne.n	800612e <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8006128:	2301      	movs	r3, #1
 800612a:	73fb      	strb	r3, [r7, #15]
 800612c:	e026      	b.n	800617c <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006134:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	2200      	movs	r2, #0
 8006144:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	2200      	movs	r2, #0
 800614c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	7c1b      	ldrb	r3, [r3, #16]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d109      	bne.n	800616c <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800615e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006162:	2101      	movs	r1, #1
 8006164:	6878      	ldr	r0, [r7, #4]
 8006166:	f001 fec7 	bl	8007ef8 <USBD_LL_PrepareReceive>
 800616a:	e007      	b.n	800617c <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006172:	2340      	movs	r3, #64	; 0x40
 8006174:	2101      	movs	r1, #1
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	f001 febe 	bl	8007ef8 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800617c:	7bfb      	ldrb	r3, [r7, #15]
}
 800617e:	4618      	mov	r0, r3
 8006180:	3710      	adds	r7, #16
 8006182:	46bd      	mov	sp, r7
 8006184:	bd80      	pop	{r7, pc}

08006186 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006186:	b580      	push	{r7, lr}
 8006188:	b084      	sub	sp, #16
 800618a:	af00      	add	r7, sp, #0
 800618c:	6078      	str	r0, [r7, #4]
 800618e:	460b      	mov	r3, r1
 8006190:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006192:	2300      	movs	r3, #0
 8006194:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006196:	2181      	movs	r1, #129	; 0x81
 8006198:	6878      	ldr	r0, [r7, #4]
 800619a:	f001 fde2 	bl	8007d62 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2200      	movs	r2, #0
 80061a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80061a4:	2101      	movs	r1, #1
 80061a6:	6878      	ldr	r0, [r7, #4]
 80061a8:	f001 fddb 	bl	8007d62 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2200      	movs	r2, #0
 80061b0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80061b4:	2182      	movs	r1, #130	; 0x82
 80061b6:	6878      	ldr	r0, [r7, #4]
 80061b8:	f001 fdd3 	bl	8007d62 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2200      	movs	r2, #0
 80061c0:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d00e      	beq.n	80061ea <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80061d2:	685b      	ldr	r3, [r3, #4]
 80061d4:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80061dc:	4618      	mov	r0, r3
 80061de:	f001 fecd 	bl	8007f7c <USBD_static_free>
    pdev->pClassData = NULL;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2200      	movs	r2, #0
 80061e6:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 80061ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80061ec:	4618      	mov	r0, r3
 80061ee:	3710      	adds	r7, #16
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bd80      	pop	{r7, pc}

080061f4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b086      	sub	sp, #24
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
 80061fc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006204:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006206:	2300      	movs	r3, #0
 8006208:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800620a:	2300      	movs	r3, #0
 800620c:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800620e:	2300      	movs	r3, #0
 8006210:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	781b      	ldrb	r3, [r3, #0]
 8006216:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800621a:	2b00      	cmp	r3, #0
 800621c:	d039      	beq.n	8006292 <USBD_CDC_Setup+0x9e>
 800621e:	2b20      	cmp	r3, #32
 8006220:	d17f      	bne.n	8006322 <USBD_CDC_Setup+0x12e>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	88db      	ldrh	r3, [r3, #6]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d029      	beq.n	800627e <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	781b      	ldrb	r3, [r3, #0]
 800622e:	b25b      	sxtb	r3, r3
 8006230:	2b00      	cmp	r3, #0
 8006232:	da11      	bge.n	8006258 <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800623a:	689b      	ldr	r3, [r3, #8]
 800623c:	683a      	ldr	r2, [r7, #0]
 800623e:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 8006240:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006242:	683a      	ldr	r2, [r7, #0]
 8006244:	88d2      	ldrh	r2, [r2, #6]
 8006246:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006248:	6939      	ldr	r1, [r7, #16]
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	88db      	ldrh	r3, [r3, #6]
 800624e:	461a      	mov	r2, r3
 8006250:	6878      	ldr	r0, [r7, #4]
 8006252:	f001 f994 	bl	800757e <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 8006256:	e06b      	b.n	8006330 <USBD_CDC_Setup+0x13c>
        hcdc->CmdOpCode = req->bRequest;
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	785a      	ldrb	r2, [r3, #1]
 800625c:	693b      	ldr	r3, [r7, #16]
 800625e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	88db      	ldrh	r3, [r3, #6]
 8006266:	b2da      	uxtb	r2, r3
 8006268:	693b      	ldr	r3, [r7, #16]
 800626a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800626e:	6939      	ldr	r1, [r7, #16]
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	88db      	ldrh	r3, [r3, #6]
 8006274:	461a      	mov	r2, r3
 8006276:	6878      	ldr	r0, [r7, #4]
 8006278:	f001 f9af 	bl	80075da <USBD_CtlPrepareRx>
    break;
 800627c:	e058      	b.n	8006330 <USBD_CDC_Setup+0x13c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006284:	689b      	ldr	r3, [r3, #8]
 8006286:	683a      	ldr	r2, [r7, #0]
 8006288:	7850      	ldrb	r0, [r2, #1]
 800628a:	2200      	movs	r2, #0
 800628c:	6839      	ldr	r1, [r7, #0]
 800628e:	4798      	blx	r3
    break;
 8006290:	e04e      	b.n	8006330 <USBD_CDC_Setup+0x13c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	785b      	ldrb	r3, [r3, #1]
 8006296:	2b0b      	cmp	r3, #11
 8006298:	d02e      	beq.n	80062f8 <USBD_CDC_Setup+0x104>
 800629a:	2b0b      	cmp	r3, #11
 800629c:	dc38      	bgt.n	8006310 <USBD_CDC_Setup+0x11c>
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d002      	beq.n	80062a8 <USBD_CDC_Setup+0xb4>
 80062a2:	2b0a      	cmp	r3, #10
 80062a4:	d014      	beq.n	80062d0 <USBD_CDC_Setup+0xdc>
 80062a6:	e033      	b.n	8006310 <USBD_CDC_Setup+0x11c>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80062ae:	2b03      	cmp	r3, #3
 80062b0:	d107      	bne.n	80062c2 <USBD_CDC_Setup+0xce>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 80062b2:	f107 030c 	add.w	r3, r7, #12
 80062b6:	2202      	movs	r2, #2
 80062b8:	4619      	mov	r1, r3
 80062ba:	6878      	ldr	r0, [r7, #4]
 80062bc:	f001 f95f 	bl	800757e <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 80062c0:	e02e      	b.n	8006320 <USBD_CDC_Setup+0x12c>
        USBD_CtlError (pdev, req);
 80062c2:	6839      	ldr	r1, [r7, #0]
 80062c4:	6878      	ldr	r0, [r7, #4]
 80062c6:	f001 f8f0 	bl	80074aa <USBD_CtlError>
			  ret = USBD_FAIL;
 80062ca:	2302      	movs	r3, #2
 80062cc:	75fb      	strb	r3, [r7, #23]
      break;
 80062ce:	e027      	b.n	8006320 <USBD_CDC_Setup+0x12c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80062d6:	2b03      	cmp	r3, #3
 80062d8:	d107      	bne.n	80062ea <USBD_CDC_Setup+0xf6>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 80062da:	f107 030f 	add.w	r3, r7, #15
 80062de:	2201      	movs	r2, #1
 80062e0:	4619      	mov	r1, r3
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	f001 f94b 	bl	800757e <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 80062e8:	e01a      	b.n	8006320 <USBD_CDC_Setup+0x12c>
        USBD_CtlError (pdev, req);
 80062ea:	6839      	ldr	r1, [r7, #0]
 80062ec:	6878      	ldr	r0, [r7, #4]
 80062ee:	f001 f8dc 	bl	80074aa <USBD_CtlError>
			  ret = USBD_FAIL;
 80062f2:	2302      	movs	r3, #2
 80062f4:	75fb      	strb	r3, [r7, #23]
      break;
 80062f6:	e013      	b.n	8006320 <USBD_CDC_Setup+0x12c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80062fe:	2b03      	cmp	r3, #3
 8006300:	d00d      	beq.n	800631e <USBD_CDC_Setup+0x12a>
      {
        USBD_CtlError (pdev, req);
 8006302:	6839      	ldr	r1, [r7, #0]
 8006304:	6878      	ldr	r0, [r7, #4]
 8006306:	f001 f8d0 	bl	80074aa <USBD_CtlError>
			  ret = USBD_FAIL;
 800630a:	2302      	movs	r3, #2
 800630c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800630e:	e006      	b.n	800631e <USBD_CDC_Setup+0x12a>

    default:
      USBD_CtlError (pdev, req);
 8006310:	6839      	ldr	r1, [r7, #0]
 8006312:	6878      	ldr	r0, [r7, #4]
 8006314:	f001 f8c9 	bl	80074aa <USBD_CtlError>
      ret = USBD_FAIL;
 8006318:	2302      	movs	r3, #2
 800631a:	75fb      	strb	r3, [r7, #23]
      break;
 800631c:	e000      	b.n	8006320 <USBD_CDC_Setup+0x12c>
      break;
 800631e:	bf00      	nop
    }
    break;
 8006320:	e006      	b.n	8006330 <USBD_CDC_Setup+0x13c>

  default:
    USBD_CtlError (pdev, req);
 8006322:	6839      	ldr	r1, [r7, #0]
 8006324:	6878      	ldr	r0, [r7, #4]
 8006326:	f001 f8c0 	bl	80074aa <USBD_CtlError>
    ret = USBD_FAIL;
 800632a:	2302      	movs	r3, #2
 800632c:	75fb      	strb	r3, [r7, #23]
    break;
 800632e:	bf00      	nop
  }

  return ret;
 8006330:	7dfb      	ldrb	r3, [r7, #23]
}
 8006332:	4618      	mov	r0, r3
 8006334:	3718      	adds	r7, #24
 8006336:	46bd      	mov	sp, r7
 8006338:	bd80      	pop	{r7, pc}

0800633a <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800633a:	b580      	push	{r7, lr}
 800633c:	b084      	sub	sp, #16
 800633e:	af00      	add	r7, sp, #0
 8006340:	6078      	str	r0, [r7, #4]
 8006342:	460b      	mov	r3, r1
 8006344:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800634c:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8006354:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800635c:	2b00      	cmp	r3, #0
 800635e:	d03a      	beq.n	80063d6 <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006360:	78fa      	ldrb	r2, [r7, #3]
 8006362:	6879      	ldr	r1, [r7, #4]
 8006364:	4613      	mov	r3, r2
 8006366:	009b      	lsls	r3, r3, #2
 8006368:	4413      	add	r3, r2
 800636a:	009b      	lsls	r3, r3, #2
 800636c:	440b      	add	r3, r1
 800636e:	331c      	adds	r3, #28
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d029      	beq.n	80063ca <USBD_CDC_DataIn+0x90>
 8006376:	78fa      	ldrb	r2, [r7, #3]
 8006378:	6879      	ldr	r1, [r7, #4]
 800637a:	4613      	mov	r3, r2
 800637c:	009b      	lsls	r3, r3, #2
 800637e:	4413      	add	r3, r2
 8006380:	009b      	lsls	r3, r3, #2
 8006382:	440b      	add	r3, r1
 8006384:	331c      	adds	r3, #28
 8006386:	681a      	ldr	r2, [r3, #0]
 8006388:	78f9      	ldrb	r1, [r7, #3]
 800638a:	68b8      	ldr	r0, [r7, #8]
 800638c:	460b      	mov	r3, r1
 800638e:	009b      	lsls	r3, r3, #2
 8006390:	440b      	add	r3, r1
 8006392:	00db      	lsls	r3, r3, #3
 8006394:	4403      	add	r3, r0
 8006396:	3338      	adds	r3, #56	; 0x38
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	fbb2 f1f3 	udiv	r1, r2, r3
 800639e:	fb01 f303 	mul.w	r3, r1, r3
 80063a2:	1ad3      	subs	r3, r2, r3
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d110      	bne.n	80063ca <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80063a8:	78fa      	ldrb	r2, [r7, #3]
 80063aa:	6879      	ldr	r1, [r7, #4]
 80063ac:	4613      	mov	r3, r2
 80063ae:	009b      	lsls	r3, r3, #2
 80063b0:	4413      	add	r3, r2
 80063b2:	009b      	lsls	r3, r3, #2
 80063b4:	440b      	add	r3, r1
 80063b6:	331c      	adds	r3, #28
 80063b8:	2200      	movs	r2, #0
 80063ba:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 80063bc:	78f9      	ldrb	r1, [r7, #3]
 80063be:	2300      	movs	r3, #0
 80063c0:	2200      	movs	r2, #0
 80063c2:	6878      	ldr	r0, [r7, #4]
 80063c4:	f001 fd75 	bl	8007eb2 <USBD_LL_Transmit>
 80063c8:	e003      	b.n	80063d2 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	2200      	movs	r2, #0
 80063ce:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 80063d2:	2300      	movs	r3, #0
 80063d4:	e000      	b.n	80063d8 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 80063d6:	2302      	movs	r3, #2
  }
}
 80063d8:	4618      	mov	r0, r3
 80063da:	3710      	adds	r7, #16
 80063dc:	46bd      	mov	sp, r7
 80063de:	bd80      	pop	{r7, pc}

080063e0 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b084      	sub	sp, #16
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
 80063e8:	460b      	mov	r3, r1
 80063ea:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80063f2:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 80063f4:	78fb      	ldrb	r3, [r7, #3]
 80063f6:	4619      	mov	r1, r3
 80063f8:	6878      	ldr	r0, [r7, #4]
 80063fa:	f001 fda0 	bl	8007f3e <USBD_LL_GetRxDataSize>
 80063fe:	4602      	mov	r2, r0
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800640c:	2b00      	cmp	r3, #0
 800640e:	d00d      	beq.n	800642c <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006416:	68db      	ldr	r3, [r3, #12]
 8006418:	68fa      	ldr	r2, [r7, #12]
 800641a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800641e:	68fa      	ldr	r2, [r7, #12]
 8006420:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006424:	4611      	mov	r1, r2
 8006426:	4798      	blx	r3

    return USBD_OK;
 8006428:	2300      	movs	r3, #0
 800642a:	e000      	b.n	800642e <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800642c:	2302      	movs	r3, #2
  }
}
 800642e:	4618      	mov	r0, r3
 8006430:	3710      	adds	r7, #16
 8006432:	46bd      	mov	sp, r7
 8006434:	bd80      	pop	{r7, pc}

08006436 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 8006436:	b580      	push	{r7, lr}
 8006438:	b084      	sub	sp, #16
 800643a:	af00      	add	r7, sp, #0
 800643c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006444:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800644c:	2b00      	cmp	r3, #0
 800644e:	d015      	beq.n	800647c <USBD_CDC_EP0_RxReady+0x46>
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006456:	2bff      	cmp	r3, #255	; 0xff
 8006458:	d010      	beq.n	800647c <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006460:	689b      	ldr	r3, [r3, #8]
 8006462:	68fa      	ldr	r2, [r7, #12]
 8006464:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8006468:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800646a:	68fa      	ldr	r2, [r7, #12]
 800646c:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006470:	b292      	uxth	r2, r2
 8006472:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	22ff      	movs	r2, #255	; 0xff
 8006478:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800647c:	2300      	movs	r3, #0
}
 800647e:	4618      	mov	r0, r3
 8006480:	3710      	adds	r7, #16
 8006482:	46bd      	mov	sp, r7
 8006484:	bd80      	pop	{r7, pc}
	...

08006488 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 8006488:	b480      	push	{r7}
 800648a:	b083      	sub	sp, #12
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2243      	movs	r2, #67	; 0x43
 8006494:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8006496:	4b03      	ldr	r3, [pc, #12]	; (80064a4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006498:	4618      	mov	r0, r3
 800649a:	370c      	adds	r7, #12
 800649c:	46bd      	mov	sp, r7
 800649e:	bc80      	pop	{r7}
 80064a0:	4770      	bx	lr
 80064a2:	bf00      	nop
 80064a4:	20000094 	.word	0x20000094

080064a8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 80064a8:	b480      	push	{r7}
 80064aa:	b083      	sub	sp, #12
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2243      	movs	r2, #67	; 0x43
 80064b4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80064b6:	4b03      	ldr	r3, [pc, #12]	; (80064c4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80064b8:	4618      	mov	r0, r3
 80064ba:	370c      	adds	r7, #12
 80064bc:	46bd      	mov	sp, r7
 80064be:	bc80      	pop	{r7}
 80064c0:	4770      	bx	lr
 80064c2:	bf00      	nop
 80064c4:	20000050 	.word	0x20000050

080064c8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 80064c8:	b480      	push	{r7}
 80064ca:	b083      	sub	sp, #12
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2243      	movs	r2, #67	; 0x43
 80064d4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80064d6:	4b03      	ldr	r3, [pc, #12]	; (80064e4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80064d8:	4618      	mov	r0, r3
 80064da:	370c      	adds	r7, #12
 80064dc:	46bd      	mov	sp, r7
 80064de:	bc80      	pop	{r7}
 80064e0:	4770      	bx	lr
 80064e2:	bf00      	nop
 80064e4:	200000d8 	.word	0x200000d8

080064e8 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 80064e8:	b480      	push	{r7}
 80064ea:	b083      	sub	sp, #12
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	220a      	movs	r2, #10
 80064f4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80064f6:	4b03      	ldr	r3, [pc, #12]	; (8006504 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80064f8:	4618      	mov	r0, r3
 80064fa:	370c      	adds	r7, #12
 80064fc:	46bd      	mov	sp, r7
 80064fe:	bc80      	pop	{r7}
 8006500:	4770      	bx	lr
 8006502:	bf00      	nop
 8006504:	2000000c 	.word	0x2000000c

08006508 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 8006508:	b480      	push	{r7}
 800650a:	b085      	sub	sp, #20
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
 8006510:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8006512:	2302      	movs	r3, #2
 8006514:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d005      	beq.n	8006528 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	683a      	ldr	r2, [r7, #0]
 8006520:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 8006524:	2300      	movs	r3, #0
 8006526:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006528:	7bfb      	ldrb	r3, [r7, #15]
}
 800652a:	4618      	mov	r0, r3
 800652c:	3714      	adds	r7, #20
 800652e:	46bd      	mov	sp, r7
 8006530:	bc80      	pop	{r7}
 8006532:	4770      	bx	lr

08006534 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 8006534:	b480      	push	{r7}
 8006536:	b087      	sub	sp, #28
 8006538:	af00      	add	r7, sp, #0
 800653a:	60f8      	str	r0, [r7, #12]
 800653c:	60b9      	str	r1, [r7, #8]
 800653e:	4613      	mov	r3, r2
 8006540:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006548:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800654a:	697b      	ldr	r3, [r7, #20]
 800654c:	68ba      	ldr	r2, [r7, #8]
 800654e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006552:	88fa      	ldrh	r2, [r7, #6]
 8006554:	697b      	ldr	r3, [r7, #20]
 8006556:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800655a:	2300      	movs	r3, #0
}
 800655c:	4618      	mov	r0, r3
 800655e:	371c      	adds	r7, #28
 8006560:	46bd      	mov	sp, r7
 8006562:	bc80      	pop	{r7}
 8006564:	4770      	bx	lr

08006566 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 8006566:	b480      	push	{r7}
 8006568:	b085      	sub	sp, #20
 800656a:	af00      	add	r7, sp, #0
 800656c:	6078      	str	r0, [r7, #4]
 800656e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006576:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	683a      	ldr	r2, [r7, #0]
 800657c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8006580:	2300      	movs	r3, #0
}
 8006582:	4618      	mov	r0, r3
 8006584:	3714      	adds	r7, #20
 8006586:	46bd      	mov	sp, r7
 8006588:	bc80      	pop	{r7}
 800658a:	4770      	bx	lr

0800658c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b084      	sub	sp, #16
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800659a:	60fb      	str	r3, [r7, #12]

  if(pdev->pClassData != NULL)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d01c      	beq.n	80065e0 <USBD_CDC_TransmitPacket+0x54>
  {
    if(hcdc->TxState == 0U)
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d115      	bne.n	80065dc <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	2201      	movs	r2, #1
 80065b4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80065ce:	b29b      	uxth	r3, r3
 80065d0:	2181      	movs	r1, #129	; 0x81
 80065d2:	6878      	ldr	r0, [r7, #4]
 80065d4:	f001 fc6d 	bl	8007eb2 <USBD_LL_Transmit>

      return USBD_OK;
 80065d8:	2300      	movs	r3, #0
 80065da:	e002      	b.n	80065e2 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 80065dc:	2301      	movs	r3, #1
 80065de:	e000      	b.n	80065e2 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 80065e0:	2302      	movs	r3, #2
  }
}
 80065e2:	4618      	mov	r0, r3
 80065e4:	3710      	adds	r7, #16
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bd80      	pop	{r7, pc}

080065ea <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80065ea:	b580      	push	{r7, lr}
 80065ec:	b084      	sub	sp, #16
 80065ee:	af00      	add	r7, sp, #0
 80065f0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80065f8:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006600:	2b00      	cmp	r3, #0
 8006602:	d017      	beq.n	8006634 <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	7c1b      	ldrb	r3, [r3, #16]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d109      	bne.n	8006620 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006612:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006616:	2101      	movs	r1, #1
 8006618:	6878      	ldr	r0, [r7, #4]
 800661a:	f001 fc6d 	bl	8007ef8 <USBD_LL_PrepareReceive>
 800661e:	e007      	b.n	8006630 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006626:	2340      	movs	r3, #64	; 0x40
 8006628:	2101      	movs	r1, #1
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	f001 fc64 	bl	8007ef8 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8006630:	2300      	movs	r3, #0
 8006632:	e000      	b.n	8006636 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8006634:	2302      	movs	r3, #2
  }
}
 8006636:	4618      	mov	r0, r3
 8006638:	3710      	adds	r7, #16
 800663a:	46bd      	mov	sp, r7
 800663c:	bd80      	pop	{r7, pc}

0800663e <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800663e:	b580      	push	{r7, lr}
 8006640:	b084      	sub	sp, #16
 8006642:	af00      	add	r7, sp, #0
 8006644:	60f8      	str	r0, [r7, #12]
 8006646:	60b9      	str	r1, [r7, #8]
 8006648:	4613      	mov	r3, r2
 800664a:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d101      	bne.n	8006656 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006652:	2302      	movs	r3, #2
 8006654:	e01a      	b.n	800668c <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800665c:	2b00      	cmp	r3, #0
 800665e:	d003      	beq.n	8006668 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	2200      	movs	r2, #0
 8006664:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d003      	beq.n	8006676 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	68ba      	ldr	r2, [r7, #8]
 8006672:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	2201      	movs	r2, #1
 800667a:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	79fa      	ldrb	r2, [r7, #7]
 8006682:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006684:	68f8      	ldr	r0, [r7, #12]
 8006686:	f001 fad1 	bl	8007c2c <USBD_LL_Init>

  return USBD_OK;
 800668a:	2300      	movs	r3, #0
}
 800668c:	4618      	mov	r0, r3
 800668e:	3710      	adds	r7, #16
 8006690:	46bd      	mov	sp, r7
 8006692:	bd80      	pop	{r7, pc}

08006694 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006694:	b480      	push	{r7}
 8006696:	b085      	sub	sp, #20
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
 800669c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 800669e:	2300      	movs	r3, #0
 80066a0:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d006      	beq.n	80066b6 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	683a      	ldr	r2, [r7, #0]
 80066ac:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 80066b0:	2300      	movs	r3, #0
 80066b2:	73fb      	strb	r3, [r7, #15]
 80066b4:	e001      	b.n	80066ba <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80066b6:	2302      	movs	r3, #2
 80066b8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80066ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80066bc:	4618      	mov	r0, r3
 80066be:	3714      	adds	r7, #20
 80066c0:	46bd      	mov	sp, r7
 80066c2:	bc80      	pop	{r7}
 80066c4:	4770      	bx	lr

080066c6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 80066c6:	b580      	push	{r7, lr}
 80066c8:	b082      	sub	sp, #8
 80066ca:	af00      	add	r7, sp, #0
 80066cc:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80066ce:	6878      	ldr	r0, [r7, #4]
 80066d0:	f001 fb06 	bl	8007ce0 <USBD_LL_Start>

  return USBD_OK;
 80066d4:	2300      	movs	r3, #0
}
 80066d6:	4618      	mov	r0, r3
 80066d8:	3708      	adds	r7, #8
 80066da:	46bd      	mov	sp, r7
 80066dc:	bd80      	pop	{r7, pc}

080066de <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 80066de:	b480      	push	{r7}
 80066e0:	b083      	sub	sp, #12
 80066e2:	af00      	add	r7, sp, #0
 80066e4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80066e6:	2300      	movs	r3, #0
}
 80066e8:	4618      	mov	r0, r3
 80066ea:	370c      	adds	r7, #12
 80066ec:	46bd      	mov	sp, r7
 80066ee:	bc80      	pop	{r7}
 80066f0:	4770      	bx	lr

080066f2 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80066f2:	b580      	push	{r7, lr}
 80066f4:	b084      	sub	sp, #16
 80066f6:	af00      	add	r7, sp, #0
 80066f8:	6078      	str	r0, [r7, #4]
 80066fa:	460b      	mov	r3, r1
 80066fc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 80066fe:	2302      	movs	r3, #2
 8006700:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006708:	2b00      	cmp	r3, #0
 800670a:	d00c      	beq.n	8006726 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	78fa      	ldrb	r2, [r7, #3]
 8006716:	4611      	mov	r1, r2
 8006718:	6878      	ldr	r0, [r7, #4]
 800671a:	4798      	blx	r3
 800671c:	4603      	mov	r3, r0
 800671e:	2b00      	cmp	r3, #0
 8006720:	d101      	bne.n	8006726 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8006722:	2300      	movs	r3, #0
 8006724:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8006726:	7bfb      	ldrb	r3, [r7, #15]
}
 8006728:	4618      	mov	r0, r3
 800672a:	3710      	adds	r7, #16
 800672c:	46bd      	mov	sp, r7
 800672e:	bd80      	pop	{r7, pc}

08006730 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b082      	sub	sp, #8
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
 8006738:	460b      	mov	r3, r1
 800673a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006742:	685b      	ldr	r3, [r3, #4]
 8006744:	78fa      	ldrb	r2, [r7, #3]
 8006746:	4611      	mov	r1, r2
 8006748:	6878      	ldr	r0, [r7, #4]
 800674a:	4798      	blx	r3
  return USBD_OK;
 800674c:	2300      	movs	r3, #0
}
 800674e:	4618      	mov	r0, r3
 8006750:	3708      	adds	r7, #8
 8006752:	46bd      	mov	sp, r7
 8006754:	bd80      	pop	{r7, pc}

08006756 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006756:	b580      	push	{r7, lr}
 8006758:	b082      	sub	sp, #8
 800675a:	af00      	add	r7, sp, #0
 800675c:	6078      	str	r0, [r7, #4]
 800675e:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006766:	6839      	ldr	r1, [r7, #0]
 8006768:	4618      	mov	r0, r3
 800676a:	f000 fe62 	bl	8007432 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2201      	movs	r2, #1
 8006772:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 800677c:	461a      	mov	r2, r3
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 800678a:	f003 031f 	and.w	r3, r3, #31
 800678e:	2b02      	cmp	r3, #2
 8006790:	d016      	beq.n	80067c0 <USBD_LL_SetupStage+0x6a>
 8006792:	2b02      	cmp	r3, #2
 8006794:	d81c      	bhi.n	80067d0 <USBD_LL_SetupStage+0x7a>
 8006796:	2b00      	cmp	r3, #0
 8006798:	d002      	beq.n	80067a0 <USBD_LL_SetupStage+0x4a>
 800679a:	2b01      	cmp	r3, #1
 800679c:	d008      	beq.n	80067b0 <USBD_LL_SetupStage+0x5a>
 800679e:	e017      	b.n	80067d0 <USBD_LL_SetupStage+0x7a>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80067a6:	4619      	mov	r1, r3
 80067a8:	6878      	ldr	r0, [r7, #4]
 80067aa:	f000 f9c5 	bl	8006b38 <USBD_StdDevReq>
    break;
 80067ae:	e01a      	b.n	80067e6 <USBD_LL_SetupStage+0x90>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80067b6:	4619      	mov	r1, r3
 80067b8:	6878      	ldr	r0, [r7, #4]
 80067ba:	f000 fa27 	bl	8006c0c <USBD_StdItfReq>
    break;
 80067be:	e012      	b.n	80067e6 <USBD_LL_SetupStage+0x90>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80067c6:	4619      	mov	r1, r3
 80067c8:	6878      	ldr	r0, [r7, #4]
 80067ca:	f000 fa67 	bl	8006c9c <USBD_StdEPReq>
    break;
 80067ce:	e00a      	b.n	80067e6 <USBD_LL_SetupStage+0x90>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 80067d6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80067da:	b2db      	uxtb	r3, r3
 80067dc:	4619      	mov	r1, r3
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	f001 fade 	bl	8007da0 <USBD_LL_StallEP>
    break;
 80067e4:	bf00      	nop
  }

  return USBD_OK;
 80067e6:	2300      	movs	r3, #0
}
 80067e8:	4618      	mov	r0, r3
 80067ea:	3708      	adds	r7, #8
 80067ec:	46bd      	mov	sp, r7
 80067ee:	bd80      	pop	{r7, pc}

080067f0 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b086      	sub	sp, #24
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	60f8      	str	r0, [r7, #12]
 80067f8:	460b      	mov	r3, r1
 80067fa:	607a      	str	r2, [r7, #4]
 80067fc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 80067fe:	7afb      	ldrb	r3, [r7, #11]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d14b      	bne.n	800689c <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800680a:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8006812:	2b03      	cmp	r3, #3
 8006814:	d134      	bne.n	8006880 <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 8006816:	697b      	ldr	r3, [r7, #20]
 8006818:	68da      	ldr	r2, [r3, #12]
 800681a:	697b      	ldr	r3, [r7, #20]
 800681c:	691b      	ldr	r3, [r3, #16]
 800681e:	429a      	cmp	r2, r3
 8006820:	d919      	bls.n	8006856 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 8006822:	697b      	ldr	r3, [r7, #20]
 8006824:	68da      	ldr	r2, [r3, #12]
 8006826:	697b      	ldr	r3, [r7, #20]
 8006828:	691b      	ldr	r3, [r3, #16]
 800682a:	1ad2      	subs	r2, r2, r3
 800682c:	697b      	ldr	r3, [r7, #20]
 800682e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006830:	697b      	ldr	r3, [r7, #20]
 8006832:	68da      	ldr	r2, [r3, #12]
 8006834:	697b      	ldr	r3, [r7, #20]
 8006836:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8006838:	429a      	cmp	r2, r3
 800683a:	d203      	bcs.n	8006844 <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800683c:	697b      	ldr	r3, [r7, #20]
 800683e:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 8006840:	b29b      	uxth	r3, r3
 8006842:	e002      	b.n	800684a <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006844:	697b      	ldr	r3, [r7, #20]
 8006846:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8006848:	b29b      	uxth	r3, r3
 800684a:	461a      	mov	r2, r3
 800684c:	6879      	ldr	r1, [r7, #4]
 800684e:	68f8      	ldr	r0, [r7, #12]
 8006850:	f000 fee1 	bl	8007616 <USBD_CtlContinueRx>
 8006854:	e038      	b.n	80068c8 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800685c:	691b      	ldr	r3, [r3, #16]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d00a      	beq.n	8006878 <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8006868:	2b03      	cmp	r3, #3
 800686a:	d105      	bne.n	8006878 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006872:	691b      	ldr	r3, [r3, #16]
 8006874:	68f8      	ldr	r0, [r7, #12]
 8006876:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006878:	68f8      	ldr	r0, [r7, #12]
 800687a:	f000 fede 	bl	800763a <USBD_CtlSendStatus>
 800687e:	e023      	b.n	80068c8 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8006886:	2b05      	cmp	r3, #5
 8006888:	d11e      	bne.n	80068c8 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	2200      	movs	r2, #0
 800688e:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 8006892:	2100      	movs	r1, #0
 8006894:	68f8      	ldr	r0, [r7, #12]
 8006896:	f001 fa83 	bl	8007da0 <USBD_LL_StallEP>
 800689a:	e015      	b.n	80068c8 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80068a2:	699b      	ldr	r3, [r3, #24]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d00d      	beq.n	80068c4 <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 80068ae:	2b03      	cmp	r3, #3
 80068b0:	d108      	bne.n	80068c4 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80068b8:	699b      	ldr	r3, [r3, #24]
 80068ba:	7afa      	ldrb	r2, [r7, #11]
 80068bc:	4611      	mov	r1, r2
 80068be:	68f8      	ldr	r0, [r7, #12]
 80068c0:	4798      	blx	r3
 80068c2:	e001      	b.n	80068c8 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80068c4:	2302      	movs	r3, #2
 80068c6:	e000      	b.n	80068ca <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80068c8:	2300      	movs	r3, #0
}
 80068ca:	4618      	mov	r0, r3
 80068cc:	3718      	adds	r7, #24
 80068ce:	46bd      	mov	sp, r7
 80068d0:	bd80      	pop	{r7, pc}

080068d2 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 80068d2:	b580      	push	{r7, lr}
 80068d4:	b086      	sub	sp, #24
 80068d6:	af00      	add	r7, sp, #0
 80068d8:	60f8      	str	r0, [r7, #12]
 80068da:	460b      	mov	r3, r1
 80068dc:	607a      	str	r2, [r7, #4]
 80068de:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 80068e0:	7afb      	ldrb	r3, [r7, #11]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d17f      	bne.n	80069e6 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	3314      	adds	r3, #20
 80068ea:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 80068f2:	2b02      	cmp	r3, #2
 80068f4:	d15c      	bne.n	80069b0 <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 80068f6:	697b      	ldr	r3, [r7, #20]
 80068f8:	68da      	ldr	r2, [r3, #12]
 80068fa:	697b      	ldr	r3, [r7, #20]
 80068fc:	691b      	ldr	r3, [r3, #16]
 80068fe:	429a      	cmp	r2, r3
 8006900:	d915      	bls.n	800692e <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8006902:	697b      	ldr	r3, [r7, #20]
 8006904:	68da      	ldr	r2, [r3, #12]
 8006906:	697b      	ldr	r3, [r7, #20]
 8006908:	691b      	ldr	r3, [r3, #16]
 800690a:	1ad2      	subs	r2, r2, r3
 800690c:	697b      	ldr	r3, [r7, #20]
 800690e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 8006910:	697b      	ldr	r3, [r7, #20]
 8006912:	68db      	ldr	r3, [r3, #12]
 8006914:	b29b      	uxth	r3, r3
 8006916:	461a      	mov	r2, r3
 8006918:	6879      	ldr	r1, [r7, #4]
 800691a:	68f8      	ldr	r0, [r7, #12]
 800691c:	f000 fe4b 	bl	80075b6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8006920:	2300      	movs	r3, #0
 8006922:	2200      	movs	r2, #0
 8006924:	2100      	movs	r1, #0
 8006926:	68f8      	ldr	r0, [r7, #12]
 8006928:	f001 fae6 	bl	8007ef8 <USBD_LL_PrepareReceive>
 800692c:	e04e      	b.n	80069cc <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 800692e:	697b      	ldr	r3, [r7, #20]
 8006930:	689b      	ldr	r3, [r3, #8]
 8006932:	697a      	ldr	r2, [r7, #20]
 8006934:	6912      	ldr	r2, [r2, #16]
 8006936:	fbb3 f1f2 	udiv	r1, r3, r2
 800693a:	fb01 f202 	mul.w	r2, r1, r2
 800693e:	1a9b      	subs	r3, r3, r2
 8006940:	2b00      	cmp	r3, #0
 8006942:	d11c      	bne.n	800697e <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 8006944:	697b      	ldr	r3, [r7, #20]
 8006946:	689a      	ldr	r2, [r3, #8]
 8006948:	697b      	ldr	r3, [r7, #20]
 800694a:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 800694c:	429a      	cmp	r2, r3
 800694e:	d316      	bcc.n	800697e <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 8006950:	697b      	ldr	r3, [r7, #20]
 8006952:	689a      	ldr	r2, [r3, #8]
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 800695a:	429a      	cmp	r2, r3
 800695c:	d20f      	bcs.n	800697e <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800695e:	2200      	movs	r2, #0
 8006960:	2100      	movs	r1, #0
 8006962:	68f8      	ldr	r0, [r7, #12]
 8006964:	f000 fe27 	bl	80075b6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	2200      	movs	r2, #0
 800696c:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8006970:	2300      	movs	r3, #0
 8006972:	2200      	movs	r2, #0
 8006974:	2100      	movs	r1, #0
 8006976:	68f8      	ldr	r0, [r7, #12]
 8006978:	f001 fabe 	bl	8007ef8 <USBD_LL_PrepareReceive>
 800697c:	e026      	b.n	80069cc <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006984:	68db      	ldr	r3, [r3, #12]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d00a      	beq.n	80069a0 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8006990:	2b03      	cmp	r3, #3
 8006992:	d105      	bne.n	80069a0 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800699a:	68db      	ldr	r3, [r3, #12]
 800699c:	68f8      	ldr	r0, [r7, #12]
 800699e:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80069a0:	2180      	movs	r1, #128	; 0x80
 80069a2:	68f8      	ldr	r0, [r7, #12]
 80069a4:	f001 f9fc 	bl	8007da0 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80069a8:	68f8      	ldr	r0, [r7, #12]
 80069aa:	f000 fe59 	bl	8007660 <USBD_CtlReceiveStatus>
 80069ae:	e00d      	b.n	80069cc <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 80069b6:	2b04      	cmp	r3, #4
 80069b8:	d004      	beq.n	80069c4 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d103      	bne.n	80069cc <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80069c4:	2180      	movs	r1, #128	; 0x80
 80069c6:	68f8      	ldr	r0, [r7, #12]
 80069c8:	f001 f9ea 	bl	8007da0 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 80069d2:	2b01      	cmp	r3, #1
 80069d4:	d11d      	bne.n	8006a12 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80069d6:	68f8      	ldr	r0, [r7, #12]
 80069d8:	f7ff fe81 	bl	80066de <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	2200      	movs	r2, #0
 80069e0:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 80069e4:	e015      	b.n	8006a12 <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80069ec:	695b      	ldr	r3, [r3, #20]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d00d      	beq.n	8006a0e <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 80069f8:	2b03      	cmp	r3, #3
 80069fa:	d108      	bne.n	8006a0e <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006a02:	695b      	ldr	r3, [r3, #20]
 8006a04:	7afa      	ldrb	r2, [r7, #11]
 8006a06:	4611      	mov	r1, r2
 8006a08:	68f8      	ldr	r0, [r7, #12]
 8006a0a:	4798      	blx	r3
 8006a0c:	e001      	b.n	8006a12 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006a0e:	2302      	movs	r3, #2
 8006a10:	e000      	b.n	8006a14 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8006a12:	2300      	movs	r3, #0
}
 8006a14:	4618      	mov	r0, r3
 8006a16:	3718      	adds	r7, #24
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	bd80      	pop	{r7, pc}

08006a1c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b082      	sub	sp, #8
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006a24:	2340      	movs	r3, #64	; 0x40
 8006a26:	2200      	movs	r2, #0
 8006a28:	2100      	movs	r1, #0
 8006a2a:	6878      	ldr	r0, [r7, #4]
 8006a2c:	f001 f973 	bl	8007d16 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2201      	movs	r2, #1
 8006a34:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2240      	movs	r2, #64	; 0x40
 8006a3c:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006a40:	2340      	movs	r3, #64	; 0x40
 8006a42:	2200      	movs	r2, #0
 8006a44:	2180      	movs	r1, #128	; 0x80
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	f001 f965 	bl	8007d16 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2201      	movs	r2, #1
 8006a50:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2240      	movs	r2, #64	; 0x40
 8006a56:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2201      	movs	r2, #1
 8006a5c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2200      	movs	r2, #0
 8006a64:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2200      	movs	r2, #0
 8006a72:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d009      	beq.n	8006a94 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006a86:	685b      	ldr	r3, [r3, #4]
 8006a88:	687a      	ldr	r2, [r7, #4]
 8006a8a:	6852      	ldr	r2, [r2, #4]
 8006a8c:	b2d2      	uxtb	r2, r2
 8006a8e:	4611      	mov	r1, r2
 8006a90:	6878      	ldr	r0, [r7, #4]
 8006a92:	4798      	blx	r3
  }

  return USBD_OK;
 8006a94:	2300      	movs	r3, #0
}
 8006a96:	4618      	mov	r0, r3
 8006a98:	3708      	adds	r7, #8
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	bd80      	pop	{r7, pc}

08006a9e <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 8006a9e:	b480      	push	{r7}
 8006aa0:	b083      	sub	sp, #12
 8006aa2:	af00      	add	r7, sp, #0
 8006aa4:	6078      	str	r0, [r7, #4]
 8006aa6:	460b      	mov	r3, r1
 8006aa8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	78fa      	ldrb	r2, [r7, #3]
 8006aae:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 8006ab0:	2300      	movs	r3, #0
}
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	370c      	adds	r7, #12
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	bc80      	pop	{r7}
 8006aba:	4770      	bx	lr

08006abc <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 8006abc:	b480      	push	{r7}
 8006abe:	b083      	sub	sp, #12
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2204      	movs	r2, #4
 8006ad4:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8006ad8:	2300      	movs	r3, #0
}
 8006ada:	4618      	mov	r0, r3
 8006adc:	370c      	adds	r7, #12
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	bc80      	pop	{r7}
 8006ae2:	4770      	bx	lr

08006ae4 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 8006ae4:	b480      	push	{r7}
 8006ae6:	b083      	sub	sp, #12
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8006af8:	2300      	movs	r3, #0
}
 8006afa:	4618      	mov	r0, r3
 8006afc:	370c      	adds	r7, #12
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bc80      	pop	{r7}
 8006b02:	4770      	bx	lr

08006b04 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b082      	sub	sp, #8
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006b12:	2b03      	cmp	r3, #3
 8006b14:	d10b      	bne.n	8006b2e <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006b1c:	69db      	ldr	r3, [r3, #28]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d005      	beq.n	8006b2e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006b28:	69db      	ldr	r3, [r3, #28]
 8006b2a:	6878      	ldr	r0, [r7, #4]
 8006b2c:	4798      	blx	r3
    }
  }
  return USBD_OK;
 8006b2e:	2300      	movs	r3, #0
}
 8006b30:	4618      	mov	r0, r3
 8006b32:	3708      	adds	r7, #8
 8006b34:	46bd      	mov	sp, r7
 8006b36:	bd80      	pop	{r7, pc}

08006b38 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b084      	sub	sp, #16
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
 8006b40:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006b42:	2300      	movs	r3, #0
 8006b44:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	781b      	ldrb	r3, [r3, #0]
 8006b4a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006b4e:	2b40      	cmp	r3, #64	; 0x40
 8006b50:	d005      	beq.n	8006b5e <USBD_StdDevReq+0x26>
 8006b52:	2b40      	cmp	r3, #64	; 0x40
 8006b54:	d84f      	bhi.n	8006bf6 <USBD_StdDevReq+0xbe>
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d009      	beq.n	8006b6e <USBD_StdDevReq+0x36>
 8006b5a:	2b20      	cmp	r3, #32
 8006b5c:	d14b      	bne.n	8006bf6 <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006b64:	689b      	ldr	r3, [r3, #8]
 8006b66:	6839      	ldr	r1, [r7, #0]
 8006b68:	6878      	ldr	r0, [r7, #4]
 8006b6a:	4798      	blx	r3
    break;
 8006b6c:	e048      	b.n	8006c00 <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	785b      	ldrb	r3, [r3, #1]
 8006b72:	2b09      	cmp	r3, #9
 8006b74:	d839      	bhi.n	8006bea <USBD_StdDevReq+0xb2>
 8006b76:	a201      	add	r2, pc, #4	; (adr r2, 8006b7c <USBD_StdDevReq+0x44>)
 8006b78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b7c:	08006bcd 	.word	0x08006bcd
 8006b80:	08006be1 	.word	0x08006be1
 8006b84:	08006beb 	.word	0x08006beb
 8006b88:	08006bd7 	.word	0x08006bd7
 8006b8c:	08006beb 	.word	0x08006beb
 8006b90:	08006baf 	.word	0x08006baf
 8006b94:	08006ba5 	.word	0x08006ba5
 8006b98:	08006beb 	.word	0x08006beb
 8006b9c:	08006bc3 	.word	0x08006bc3
 8006ba0:	08006bb9 	.word	0x08006bb9
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 8006ba4:	6839      	ldr	r1, [r7, #0]
 8006ba6:	6878      	ldr	r0, [r7, #4]
 8006ba8:	f000 f9da 	bl	8006f60 <USBD_GetDescriptor>
      break;
 8006bac:	e022      	b.n	8006bf4 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 8006bae:	6839      	ldr	r1, [r7, #0]
 8006bb0:	6878      	ldr	r0, [r7, #4]
 8006bb2:	f000 facf 	bl	8007154 <USBD_SetAddress>
      break;
 8006bb6:	e01d      	b.n	8006bf4 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 8006bb8:	6839      	ldr	r1, [r7, #0]
 8006bba:	6878      	ldr	r0, [r7, #4]
 8006bbc:	f000 fb0e 	bl	80071dc <USBD_SetConfig>
      break;
 8006bc0:	e018      	b.n	8006bf4 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 8006bc2:	6839      	ldr	r1, [r7, #0]
 8006bc4:	6878      	ldr	r0, [r7, #4]
 8006bc6:	f000 fb97 	bl	80072f8 <USBD_GetConfig>
      break;
 8006bca:	e013      	b.n	8006bf4 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 8006bcc:	6839      	ldr	r1, [r7, #0]
 8006bce:	6878      	ldr	r0, [r7, #4]
 8006bd0:	f000 fbc7 	bl	8007362 <USBD_GetStatus>
      break;
 8006bd4:	e00e      	b.n	8006bf4 <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 8006bd6:	6839      	ldr	r1, [r7, #0]
 8006bd8:	6878      	ldr	r0, [r7, #4]
 8006bda:	f000 fbf5 	bl	80073c8 <USBD_SetFeature>
      break;
 8006bde:	e009      	b.n	8006bf4 <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 8006be0:	6839      	ldr	r1, [r7, #0]
 8006be2:	6878      	ldr	r0, [r7, #4]
 8006be4:	f000 fc04 	bl	80073f0 <USBD_ClrFeature>
      break;
 8006be8:	e004      	b.n	8006bf4 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 8006bea:	6839      	ldr	r1, [r7, #0]
 8006bec:	6878      	ldr	r0, [r7, #4]
 8006bee:	f000 fc5c 	bl	80074aa <USBD_CtlError>
      break;
 8006bf2:	bf00      	nop
    }
    break;
 8006bf4:	e004      	b.n	8006c00 <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 8006bf6:	6839      	ldr	r1, [r7, #0]
 8006bf8:	6878      	ldr	r0, [r7, #4]
 8006bfa:	f000 fc56 	bl	80074aa <USBD_CtlError>
    break;
 8006bfe:	bf00      	nop
  }

  return ret;
 8006c00:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c02:	4618      	mov	r0, r3
 8006c04:	3710      	adds	r7, #16
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bd80      	pop	{r7, pc}
 8006c0a:	bf00      	nop

08006c0c <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b084      	sub	sp, #16
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
 8006c14:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006c16:	2300      	movs	r3, #0
 8006c18:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	781b      	ldrb	r3, [r3, #0]
 8006c1e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006c22:	2b40      	cmp	r3, #64	; 0x40
 8006c24:	d005      	beq.n	8006c32 <USBD_StdItfReq+0x26>
 8006c26:	2b40      	cmp	r3, #64	; 0x40
 8006c28:	d82e      	bhi.n	8006c88 <USBD_StdItfReq+0x7c>
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d001      	beq.n	8006c32 <USBD_StdItfReq+0x26>
 8006c2e:	2b20      	cmp	r3, #32
 8006c30:	d12a      	bne.n	8006c88 <USBD_StdItfReq+0x7c>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006c38:	3b01      	subs	r3, #1
 8006c3a:	2b02      	cmp	r3, #2
 8006c3c:	d81d      	bhi.n	8006c7a <USBD_StdItfReq+0x6e>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	889b      	ldrh	r3, [r3, #4]
 8006c42:	b2db      	uxtb	r3, r3
 8006c44:	2b01      	cmp	r3, #1
 8006c46:	d813      	bhi.n	8006c70 <USBD_StdItfReq+0x64>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006c4e:	689b      	ldr	r3, [r3, #8]
 8006c50:	6839      	ldr	r1, [r7, #0]
 8006c52:	6878      	ldr	r0, [r7, #4]
 8006c54:	4798      	blx	r3
 8006c56:	4603      	mov	r3, r0
 8006c58:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	88db      	ldrh	r3, [r3, #6]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d110      	bne.n	8006c84 <USBD_StdItfReq+0x78>
 8006c62:	7bfb      	ldrb	r3, [r7, #15]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d10d      	bne.n	8006c84 <USBD_StdItfReq+0x78>
        {
          USBD_CtlSendStatus(pdev);
 8006c68:	6878      	ldr	r0, [r7, #4]
 8006c6a:	f000 fce6 	bl	800763a <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8006c6e:	e009      	b.n	8006c84 <USBD_StdItfReq+0x78>
        USBD_CtlError(pdev, req);
 8006c70:	6839      	ldr	r1, [r7, #0]
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f000 fc19 	bl	80074aa <USBD_CtlError>
      break;
 8006c78:	e004      	b.n	8006c84 <USBD_StdItfReq+0x78>

    default:
      USBD_CtlError(pdev, req);
 8006c7a:	6839      	ldr	r1, [r7, #0]
 8006c7c:	6878      	ldr	r0, [r7, #4]
 8006c7e:	f000 fc14 	bl	80074aa <USBD_CtlError>
      break;
 8006c82:	e000      	b.n	8006c86 <USBD_StdItfReq+0x7a>
      break;
 8006c84:	bf00      	nop
    }
    break;
 8006c86:	e004      	b.n	8006c92 <USBD_StdItfReq+0x86>

  default:
    USBD_CtlError(pdev, req);
 8006c88:	6839      	ldr	r1, [r7, #0]
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	f000 fc0d 	bl	80074aa <USBD_CtlError>
    break;
 8006c90:	bf00      	nop
  }

  return USBD_OK;
 8006c92:	2300      	movs	r3, #0
}
 8006c94:	4618      	mov	r0, r3
 8006c96:	3710      	adds	r7, #16
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	bd80      	pop	{r7, pc}

08006c9c <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b084      	sub	sp, #16
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
 8006ca4:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	889b      	ldrh	r3, [r3, #4]
 8006cae:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	781b      	ldrb	r3, [r3, #0]
 8006cb4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006cb8:	2b40      	cmp	r3, #64	; 0x40
 8006cba:	d007      	beq.n	8006ccc <USBD_StdEPReq+0x30>
 8006cbc:	2b40      	cmp	r3, #64	; 0x40
 8006cbe:	f200 8144 	bhi.w	8006f4a <USBD_StdEPReq+0x2ae>
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d00a      	beq.n	8006cdc <USBD_StdEPReq+0x40>
 8006cc6:	2b20      	cmp	r3, #32
 8006cc8:	f040 813f 	bne.w	8006f4a <USBD_StdEPReq+0x2ae>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006cd2:	689b      	ldr	r3, [r3, #8]
 8006cd4:	6839      	ldr	r1, [r7, #0]
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	4798      	blx	r3
    break;
 8006cda:	e13b      	b.n	8006f54 <USBD_StdEPReq+0x2b8>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	781b      	ldrb	r3, [r3, #0]
 8006ce0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006ce4:	2b20      	cmp	r3, #32
 8006ce6:	d10a      	bne.n	8006cfe <USBD_StdEPReq+0x62>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006cee:	689b      	ldr	r3, [r3, #8]
 8006cf0:	6839      	ldr	r1, [r7, #0]
 8006cf2:	6878      	ldr	r0, [r7, #4]
 8006cf4:	4798      	blx	r3
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	73fb      	strb	r3, [r7, #15]

      return ret;
 8006cfa:	7bfb      	ldrb	r3, [r7, #15]
 8006cfc:	e12b      	b.n	8006f56 <USBD_StdEPReq+0x2ba>
    }

    switch (req->bRequest)
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	785b      	ldrb	r3, [r3, #1]
 8006d02:	2b03      	cmp	r3, #3
 8006d04:	d007      	beq.n	8006d16 <USBD_StdEPReq+0x7a>
 8006d06:	2b03      	cmp	r3, #3
 8006d08:	f300 8119 	bgt.w	8006f3e <USBD_StdEPReq+0x2a2>
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d072      	beq.n	8006df6 <USBD_StdEPReq+0x15a>
 8006d10:	2b01      	cmp	r3, #1
 8006d12:	d03a      	beq.n	8006d8a <USBD_StdEPReq+0xee>
 8006d14:	e113      	b.n	8006f3e <USBD_StdEPReq+0x2a2>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006d1c:	2b02      	cmp	r3, #2
 8006d1e:	d002      	beq.n	8006d26 <USBD_StdEPReq+0x8a>
 8006d20:	2b03      	cmp	r3, #3
 8006d22:	d015      	beq.n	8006d50 <USBD_StdEPReq+0xb4>
 8006d24:	e02b      	b.n	8006d7e <USBD_StdEPReq+0xe2>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006d26:	7bbb      	ldrb	r3, [r7, #14]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d00c      	beq.n	8006d46 <USBD_StdEPReq+0xaa>
 8006d2c:	7bbb      	ldrb	r3, [r7, #14]
 8006d2e:	2b80      	cmp	r3, #128	; 0x80
 8006d30:	d009      	beq.n	8006d46 <USBD_StdEPReq+0xaa>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8006d32:	7bbb      	ldrb	r3, [r7, #14]
 8006d34:	4619      	mov	r1, r3
 8006d36:	6878      	ldr	r0, [r7, #4]
 8006d38:	f001 f832 	bl	8007da0 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8006d3c:	2180      	movs	r1, #128	; 0x80
 8006d3e:	6878      	ldr	r0, [r7, #4]
 8006d40:	f001 f82e 	bl	8007da0 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8006d44:	e020      	b.n	8006d88 <USBD_StdEPReq+0xec>
          USBD_CtlError(pdev, req);
 8006d46:	6839      	ldr	r1, [r7, #0]
 8006d48:	6878      	ldr	r0, [r7, #4]
 8006d4a:	f000 fbae 	bl	80074aa <USBD_CtlError>
        break;
 8006d4e:	e01b      	b.n	8006d88 <USBD_StdEPReq+0xec>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	885b      	ldrh	r3, [r3, #2]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d10e      	bne.n	8006d76 <USBD_StdEPReq+0xda>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006d58:	7bbb      	ldrb	r3, [r7, #14]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d00b      	beq.n	8006d76 <USBD_StdEPReq+0xda>
 8006d5e:	7bbb      	ldrb	r3, [r7, #14]
 8006d60:	2b80      	cmp	r3, #128	; 0x80
 8006d62:	d008      	beq.n	8006d76 <USBD_StdEPReq+0xda>
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	88db      	ldrh	r3, [r3, #6]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d104      	bne.n	8006d76 <USBD_StdEPReq+0xda>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 8006d6c:	7bbb      	ldrb	r3, [r7, #14]
 8006d6e:	4619      	mov	r1, r3
 8006d70:	6878      	ldr	r0, [r7, #4]
 8006d72:	f001 f815 	bl	8007da0 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 8006d76:	6878      	ldr	r0, [r7, #4]
 8006d78:	f000 fc5f 	bl	800763a <USBD_CtlSendStatus>

        break;
 8006d7c:	e004      	b.n	8006d88 <USBD_StdEPReq+0xec>

      default:
        USBD_CtlError(pdev, req);
 8006d7e:	6839      	ldr	r1, [r7, #0]
 8006d80:	6878      	ldr	r0, [r7, #4]
 8006d82:	f000 fb92 	bl	80074aa <USBD_CtlError>
        break;
 8006d86:	bf00      	nop
      }
      break;
 8006d88:	e0de      	b.n	8006f48 <USBD_StdEPReq+0x2ac>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006d90:	2b02      	cmp	r3, #2
 8006d92:	d002      	beq.n	8006d9a <USBD_StdEPReq+0xfe>
 8006d94:	2b03      	cmp	r3, #3
 8006d96:	d015      	beq.n	8006dc4 <USBD_StdEPReq+0x128>
 8006d98:	e026      	b.n	8006de8 <USBD_StdEPReq+0x14c>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006d9a:	7bbb      	ldrb	r3, [r7, #14]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d00c      	beq.n	8006dba <USBD_StdEPReq+0x11e>
 8006da0:	7bbb      	ldrb	r3, [r7, #14]
 8006da2:	2b80      	cmp	r3, #128	; 0x80
 8006da4:	d009      	beq.n	8006dba <USBD_StdEPReq+0x11e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8006da6:	7bbb      	ldrb	r3, [r7, #14]
 8006da8:	4619      	mov	r1, r3
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	f000 fff8 	bl	8007da0 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8006db0:	2180      	movs	r1, #128	; 0x80
 8006db2:	6878      	ldr	r0, [r7, #4]
 8006db4:	f000 fff4 	bl	8007da0 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8006db8:	e01c      	b.n	8006df4 <USBD_StdEPReq+0x158>
          USBD_CtlError(pdev, req);
 8006dba:	6839      	ldr	r1, [r7, #0]
 8006dbc:	6878      	ldr	r0, [r7, #4]
 8006dbe:	f000 fb74 	bl	80074aa <USBD_CtlError>
        break;
 8006dc2:	e017      	b.n	8006df4 <USBD_StdEPReq+0x158>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	885b      	ldrh	r3, [r3, #2]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d112      	bne.n	8006df2 <USBD_StdEPReq+0x156>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8006dcc:	7bbb      	ldrb	r3, [r7, #14]
 8006dce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d004      	beq.n	8006de0 <USBD_StdEPReq+0x144>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 8006dd6:	7bbb      	ldrb	r3, [r7, #14]
 8006dd8:	4619      	mov	r1, r3
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	f000 ffff 	bl	8007dde <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 8006de0:	6878      	ldr	r0, [r7, #4]
 8006de2:	f000 fc2a 	bl	800763a <USBD_CtlSendStatus>
        }
        break;
 8006de6:	e004      	b.n	8006df2 <USBD_StdEPReq+0x156>

      default:
        USBD_CtlError(pdev, req);
 8006de8:	6839      	ldr	r1, [r7, #0]
 8006dea:	6878      	ldr	r0, [r7, #4]
 8006dec:	f000 fb5d 	bl	80074aa <USBD_CtlError>
        break;
 8006df0:	e000      	b.n	8006df4 <USBD_StdEPReq+0x158>
        break;
 8006df2:	bf00      	nop
      }
      break;
 8006df4:	e0a8      	b.n	8006f48 <USBD_StdEPReq+0x2ac>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006dfc:	2b02      	cmp	r3, #2
 8006dfe:	d002      	beq.n	8006e06 <USBD_StdEPReq+0x16a>
 8006e00:	2b03      	cmp	r3, #3
 8006e02:	d031      	beq.n	8006e68 <USBD_StdEPReq+0x1cc>
 8006e04:	e095      	b.n	8006f32 <USBD_StdEPReq+0x296>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006e06:	7bbb      	ldrb	r3, [r7, #14]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d007      	beq.n	8006e1c <USBD_StdEPReq+0x180>
 8006e0c:	7bbb      	ldrb	r3, [r7, #14]
 8006e0e:	2b80      	cmp	r3, #128	; 0x80
 8006e10:	d004      	beq.n	8006e1c <USBD_StdEPReq+0x180>
        {
          USBD_CtlError(pdev, req);
 8006e12:	6839      	ldr	r1, [r7, #0]
 8006e14:	6878      	ldr	r0, [r7, #4]
 8006e16:	f000 fb48 	bl	80074aa <USBD_CtlError>
          break;
 8006e1a:	e08f      	b.n	8006f3c <USBD_StdEPReq+0x2a0>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8006e1c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	da0b      	bge.n	8006e3c <USBD_StdEPReq+0x1a0>
 8006e24:	7bbb      	ldrb	r3, [r7, #14]
 8006e26:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006e2a:	4613      	mov	r3, r2
 8006e2c:	009b      	lsls	r3, r3, #2
 8006e2e:	4413      	add	r3, r2
 8006e30:	009b      	lsls	r3, r3, #2
 8006e32:	3310      	adds	r3, #16
 8006e34:	687a      	ldr	r2, [r7, #4]
 8006e36:	4413      	add	r3, r2
 8006e38:	3304      	adds	r3, #4
 8006e3a:	e00a      	b.n	8006e52 <USBD_StdEPReq+0x1b6>
          &pdev->ep_out[ep_addr & 0x7FU];
 8006e3c:	7bbb      	ldrb	r3, [r7, #14]
 8006e3e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8006e42:	4613      	mov	r3, r2
 8006e44:	009b      	lsls	r3, r3, #2
 8006e46:	4413      	add	r3, r2
 8006e48:	009b      	lsls	r3, r3, #2
 8006e4a:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8006e4e:	687a      	ldr	r2, [r7, #4]
 8006e50:	4413      	add	r3, r2
 8006e52:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 8006e54:	68bb      	ldr	r3, [r7, #8]
 8006e56:	2200      	movs	r2, #0
 8006e58:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006e5a:	68bb      	ldr	r3, [r7, #8]
 8006e5c:	2202      	movs	r2, #2
 8006e5e:	4619      	mov	r1, r3
 8006e60:	6878      	ldr	r0, [r7, #4]
 8006e62:	f000 fb8c 	bl	800757e <USBD_CtlSendData>
          break;
 8006e66:	e069      	b.n	8006f3c <USBD_StdEPReq+0x2a0>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 8006e68:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	da11      	bge.n	8006e94 <USBD_StdEPReq+0x1f8>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006e70:	7bbb      	ldrb	r3, [r7, #14]
 8006e72:	f003 020f 	and.w	r2, r3, #15
 8006e76:	6879      	ldr	r1, [r7, #4]
 8006e78:	4613      	mov	r3, r2
 8006e7a:	009b      	lsls	r3, r3, #2
 8006e7c:	4413      	add	r3, r2
 8006e7e:	009b      	lsls	r3, r3, #2
 8006e80:	440b      	add	r3, r1
 8006e82:	3318      	adds	r3, #24
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d117      	bne.n	8006eba <USBD_StdEPReq+0x21e>
          {
            USBD_CtlError(pdev, req);
 8006e8a:	6839      	ldr	r1, [r7, #0]
 8006e8c:	6878      	ldr	r0, [r7, #4]
 8006e8e:	f000 fb0c 	bl	80074aa <USBD_CtlError>
            break;
 8006e92:	e053      	b.n	8006f3c <USBD_StdEPReq+0x2a0>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006e94:	7bbb      	ldrb	r3, [r7, #14]
 8006e96:	f003 020f 	and.w	r2, r3, #15
 8006e9a:	6879      	ldr	r1, [r7, #4]
 8006e9c:	4613      	mov	r3, r2
 8006e9e:	009b      	lsls	r3, r3, #2
 8006ea0:	4413      	add	r3, r2
 8006ea2:	009b      	lsls	r3, r3, #2
 8006ea4:	440b      	add	r3, r1
 8006ea6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d104      	bne.n	8006eba <USBD_StdEPReq+0x21e>
          {
            USBD_CtlError(pdev, req);
 8006eb0:	6839      	ldr	r1, [r7, #0]
 8006eb2:	6878      	ldr	r0, [r7, #4]
 8006eb4:	f000 faf9 	bl	80074aa <USBD_CtlError>
            break;
 8006eb8:	e040      	b.n	8006f3c <USBD_StdEPReq+0x2a0>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8006eba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	da0b      	bge.n	8006eda <USBD_StdEPReq+0x23e>
 8006ec2:	7bbb      	ldrb	r3, [r7, #14]
 8006ec4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006ec8:	4613      	mov	r3, r2
 8006eca:	009b      	lsls	r3, r3, #2
 8006ecc:	4413      	add	r3, r2
 8006ece:	009b      	lsls	r3, r3, #2
 8006ed0:	3310      	adds	r3, #16
 8006ed2:	687a      	ldr	r2, [r7, #4]
 8006ed4:	4413      	add	r3, r2
 8006ed6:	3304      	adds	r3, #4
 8006ed8:	e00a      	b.n	8006ef0 <USBD_StdEPReq+0x254>
          &pdev->ep_out[ep_addr & 0x7FU];
 8006eda:	7bbb      	ldrb	r3, [r7, #14]
 8006edc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8006ee0:	4613      	mov	r3, r2
 8006ee2:	009b      	lsls	r3, r3, #2
 8006ee4:	4413      	add	r3, r2
 8006ee6:	009b      	lsls	r3, r3, #2
 8006ee8:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8006eec:	687a      	ldr	r2, [r7, #4]
 8006eee:	4413      	add	r3, r2
 8006ef0:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006ef2:	7bbb      	ldrb	r3, [r7, #14]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d002      	beq.n	8006efe <USBD_StdEPReq+0x262>
 8006ef8:	7bbb      	ldrb	r3, [r7, #14]
 8006efa:	2b80      	cmp	r3, #128	; 0x80
 8006efc:	d103      	bne.n	8006f06 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0000U;
 8006efe:	68bb      	ldr	r3, [r7, #8]
 8006f00:	2200      	movs	r2, #0
 8006f02:	601a      	str	r2, [r3, #0]
 8006f04:	e00e      	b.n	8006f24 <USBD_StdEPReq+0x288>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 8006f06:	7bbb      	ldrb	r3, [r7, #14]
 8006f08:	4619      	mov	r1, r3
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	f000 ff86 	bl	8007e1c <USBD_LL_IsStallEP>
 8006f10:	4603      	mov	r3, r0
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d003      	beq.n	8006f1e <USBD_StdEPReq+0x282>
          {
            pep->status = 0x0001U;
 8006f16:	68bb      	ldr	r3, [r7, #8]
 8006f18:	2201      	movs	r2, #1
 8006f1a:	601a      	str	r2, [r3, #0]
 8006f1c:	e002      	b.n	8006f24 <USBD_StdEPReq+0x288>
          }
          else
          {
            pep->status = 0x0000U;
 8006f1e:	68bb      	ldr	r3, [r7, #8]
 8006f20:	2200      	movs	r2, #0
 8006f22:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006f24:	68bb      	ldr	r3, [r7, #8]
 8006f26:	2202      	movs	r2, #2
 8006f28:	4619      	mov	r1, r3
 8006f2a:	6878      	ldr	r0, [r7, #4]
 8006f2c:	f000 fb27 	bl	800757e <USBD_CtlSendData>
          break;
 8006f30:	e004      	b.n	8006f3c <USBD_StdEPReq+0x2a0>

      default:
        USBD_CtlError(pdev, req);
 8006f32:	6839      	ldr	r1, [r7, #0]
 8006f34:	6878      	ldr	r0, [r7, #4]
 8006f36:	f000 fab8 	bl	80074aa <USBD_CtlError>
        break;
 8006f3a:	bf00      	nop
      }
      break;
 8006f3c:	e004      	b.n	8006f48 <USBD_StdEPReq+0x2ac>

    default:
      USBD_CtlError(pdev, req);
 8006f3e:	6839      	ldr	r1, [r7, #0]
 8006f40:	6878      	ldr	r0, [r7, #4]
 8006f42:	f000 fab2 	bl	80074aa <USBD_CtlError>
      break;
 8006f46:	bf00      	nop
    }
    break;
 8006f48:	e004      	b.n	8006f54 <USBD_StdEPReq+0x2b8>

  default:
    USBD_CtlError(pdev, req);
 8006f4a:	6839      	ldr	r1, [r7, #0]
 8006f4c:	6878      	ldr	r0, [r7, #4]
 8006f4e:	f000 faac 	bl	80074aa <USBD_CtlError>
    break;
 8006f52:	bf00      	nop
  }

  return ret;
 8006f54:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f56:	4618      	mov	r0, r3
 8006f58:	3710      	adds	r7, #16
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	bd80      	pop	{r7, pc}
	...

08006f60 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b084      	sub	sp, #16
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
 8006f68:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	885b      	ldrh	r3, [r3, #2]
 8006f6e:	0a1b      	lsrs	r3, r3, #8
 8006f70:	b29b      	uxth	r3, r3
 8006f72:	3b01      	subs	r3, #1
 8006f74:	2b06      	cmp	r3, #6
 8006f76:	f200 80c9 	bhi.w	800710c <USBD_GetDescriptor+0x1ac>
 8006f7a:	a201      	add	r2, pc, #4	; (adr r2, 8006f80 <USBD_GetDescriptor+0x20>)
 8006f7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f80:	08006f9d 	.word	0x08006f9d
 8006f84:	08006fb5 	.word	0x08006fb5
 8006f88:	08006ff5 	.word	0x08006ff5
 8006f8c:	0800710d 	.word	0x0800710d
 8006f90:	0800710d 	.word	0x0800710d
 8006f94:	080070b9 	.word	0x080070b9
 8006f98:	080070df 	.word	0x080070df
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	687a      	ldr	r2, [r7, #4]
 8006fa6:	7c12      	ldrb	r2, [r2, #16]
 8006fa8:	f107 010a 	add.w	r1, r7, #10
 8006fac:	4610      	mov	r0, r2
 8006fae:	4798      	blx	r3
 8006fb0:	60f8      	str	r0, [r7, #12]
    break;
 8006fb2:	e0b0      	b.n	8007116 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	7c1b      	ldrb	r3, [r3, #16]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d10d      	bne.n	8006fd8 <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fc4:	f107 020a 	add.w	r2, r7, #10
 8006fc8:	4610      	mov	r0, r2
 8006fca:	4798      	blx	r3
 8006fcc:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	3301      	adds	r3, #1
 8006fd2:	2202      	movs	r2, #2
 8006fd4:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8006fd6:	e09e      	b.n	8007116 <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fe0:	f107 020a 	add.w	r2, r7, #10
 8006fe4:	4610      	mov	r0, r2
 8006fe6:	4798      	blx	r3
 8006fe8:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	3301      	adds	r3, #1
 8006fee:	2202      	movs	r2, #2
 8006ff0:	701a      	strb	r2, [r3, #0]
    break;
 8006ff2:	e090      	b.n	8007116 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	885b      	ldrh	r3, [r3, #2]
 8006ff8:	b2db      	uxtb	r3, r3
 8006ffa:	2b05      	cmp	r3, #5
 8006ffc:	d856      	bhi.n	80070ac <USBD_GetDescriptor+0x14c>
 8006ffe:	a201      	add	r2, pc, #4	; (adr r2, 8007004 <USBD_GetDescriptor+0xa4>)
 8007000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007004:	0800701d 	.word	0x0800701d
 8007008:	08007035 	.word	0x08007035
 800700c:	0800704d 	.word	0x0800704d
 8007010:	08007065 	.word	0x08007065
 8007014:	0800707d 	.word	0x0800707d
 8007018:	08007095 	.word	0x08007095
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007022:	685b      	ldr	r3, [r3, #4]
 8007024:	687a      	ldr	r2, [r7, #4]
 8007026:	7c12      	ldrb	r2, [r2, #16]
 8007028:	f107 010a 	add.w	r1, r7, #10
 800702c:	4610      	mov	r0, r2
 800702e:	4798      	blx	r3
 8007030:	60f8      	str	r0, [r7, #12]
      break;
 8007032:	e040      	b.n	80070b6 <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800703a:	689b      	ldr	r3, [r3, #8]
 800703c:	687a      	ldr	r2, [r7, #4]
 800703e:	7c12      	ldrb	r2, [r2, #16]
 8007040:	f107 010a 	add.w	r1, r7, #10
 8007044:	4610      	mov	r0, r2
 8007046:	4798      	blx	r3
 8007048:	60f8      	str	r0, [r7, #12]
      break;
 800704a:	e034      	b.n	80070b6 <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007052:	68db      	ldr	r3, [r3, #12]
 8007054:	687a      	ldr	r2, [r7, #4]
 8007056:	7c12      	ldrb	r2, [r2, #16]
 8007058:	f107 010a 	add.w	r1, r7, #10
 800705c:	4610      	mov	r0, r2
 800705e:	4798      	blx	r3
 8007060:	60f8      	str	r0, [r7, #12]
      break;
 8007062:	e028      	b.n	80070b6 <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800706a:	691b      	ldr	r3, [r3, #16]
 800706c:	687a      	ldr	r2, [r7, #4]
 800706e:	7c12      	ldrb	r2, [r2, #16]
 8007070:	f107 010a 	add.w	r1, r7, #10
 8007074:	4610      	mov	r0, r2
 8007076:	4798      	blx	r3
 8007078:	60f8      	str	r0, [r7, #12]
      break;
 800707a:	e01c      	b.n	80070b6 <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007082:	695b      	ldr	r3, [r3, #20]
 8007084:	687a      	ldr	r2, [r7, #4]
 8007086:	7c12      	ldrb	r2, [r2, #16]
 8007088:	f107 010a 	add.w	r1, r7, #10
 800708c:	4610      	mov	r0, r2
 800708e:	4798      	blx	r3
 8007090:	60f8      	str	r0, [r7, #12]
      break;
 8007092:	e010      	b.n	80070b6 <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800709a:	699b      	ldr	r3, [r3, #24]
 800709c:	687a      	ldr	r2, [r7, #4]
 800709e:	7c12      	ldrb	r2, [r2, #16]
 80070a0:	f107 010a 	add.w	r1, r7, #10
 80070a4:	4610      	mov	r0, r2
 80070a6:	4798      	blx	r3
 80070a8:	60f8      	str	r0, [r7, #12]
      break;
 80070aa:	e004      	b.n	80070b6 <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 80070ac:	6839      	ldr	r1, [r7, #0]
 80070ae:	6878      	ldr	r0, [r7, #4]
 80070b0:	f000 f9fb 	bl	80074aa <USBD_CtlError>
      return;
 80070b4:	e04b      	b.n	800714e <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 80070b6:	e02e      	b.n	8007116 <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	7c1b      	ldrb	r3, [r3, #16]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d109      	bne.n	80070d4 <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80070c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070c8:	f107 020a 	add.w	r2, r7, #10
 80070cc:	4610      	mov	r0, r2
 80070ce:	4798      	blx	r3
 80070d0:	60f8      	str	r0, [r7, #12]
      break;
 80070d2:	e020      	b.n	8007116 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 80070d4:	6839      	ldr	r1, [r7, #0]
 80070d6:	6878      	ldr	r0, [r7, #4]
 80070d8:	f000 f9e7 	bl	80074aa <USBD_CtlError>
      return;
 80070dc:	e037      	b.n	800714e <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	7c1b      	ldrb	r3, [r3, #16]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d10d      	bne.n	8007102 <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80070ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070ee:	f107 020a 	add.w	r2, r7, #10
 80070f2:	4610      	mov	r0, r2
 80070f4:	4798      	blx	r3
 80070f6:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	3301      	adds	r3, #1
 80070fc:	2207      	movs	r2, #7
 80070fe:	701a      	strb	r2, [r3, #0]
      break;
 8007100:	e009      	b.n	8007116 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8007102:	6839      	ldr	r1, [r7, #0]
 8007104:	6878      	ldr	r0, [r7, #4]
 8007106:	f000 f9d0 	bl	80074aa <USBD_CtlError>
      return;
 800710a:	e020      	b.n	800714e <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 800710c:	6839      	ldr	r1, [r7, #0]
 800710e:	6878      	ldr	r0, [r7, #4]
 8007110:	f000 f9cb 	bl	80074aa <USBD_CtlError>
    return;
 8007114:	e01b      	b.n	800714e <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 8007116:	897b      	ldrh	r3, [r7, #10]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d011      	beq.n	8007140 <USBD_GetDescriptor+0x1e0>
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	88db      	ldrh	r3, [r3, #6]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d00d      	beq.n	8007140 <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	88da      	ldrh	r2, [r3, #6]
 8007128:	897b      	ldrh	r3, [r7, #10]
 800712a:	4293      	cmp	r3, r2
 800712c:	bf28      	it	cs
 800712e:	4613      	movcs	r3, r2
 8007130:	b29b      	uxth	r3, r3
 8007132:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 8007134:	897b      	ldrh	r3, [r7, #10]
 8007136:	461a      	mov	r2, r3
 8007138:	68f9      	ldr	r1, [r7, #12]
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	f000 fa1f 	bl	800757e <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	88db      	ldrh	r3, [r3, #6]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d102      	bne.n	800714e <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 8007148:	6878      	ldr	r0, [r7, #4]
 800714a:	f000 fa76 	bl	800763a <USBD_CtlSendStatus>
  }
}
 800714e:	3710      	adds	r7, #16
 8007150:	46bd      	mov	sp, r7
 8007152:	bd80      	pop	{r7, pc}

08007154 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b084      	sub	sp, #16
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
 800715c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	889b      	ldrh	r3, [r3, #4]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d130      	bne.n	80071c8 <USBD_SetAddress+0x74>
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	88db      	ldrh	r3, [r3, #6]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d12c      	bne.n	80071c8 <USBD_SetAddress+0x74>
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	885b      	ldrh	r3, [r3, #2]
 8007172:	2b7f      	cmp	r3, #127	; 0x7f
 8007174:	d828      	bhi.n	80071c8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	885b      	ldrh	r3, [r3, #2]
 800717a:	b2db      	uxtb	r3, r3
 800717c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007180:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007188:	2b03      	cmp	r3, #3
 800718a:	d104      	bne.n	8007196 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 800718c:	6839      	ldr	r1, [r7, #0]
 800718e:	6878      	ldr	r0, [r7, #4]
 8007190:	f000 f98b 	bl	80074aa <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007194:	e01d      	b.n	80071d2 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	7bfa      	ldrb	r2, [r7, #15]
 800719a:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800719e:	7bfb      	ldrb	r3, [r7, #15]
 80071a0:	4619      	mov	r1, r3
 80071a2:	6878      	ldr	r0, [r7, #4]
 80071a4:	f000 fe66 	bl	8007e74 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80071a8:	6878      	ldr	r0, [r7, #4]
 80071aa:	f000 fa46 	bl	800763a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80071ae:	7bfb      	ldrb	r3, [r7, #15]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d004      	beq.n	80071be <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2202      	movs	r2, #2
 80071b8:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071bc:	e009      	b.n	80071d2 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	2201      	movs	r2, #1
 80071c2:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071c6:	e004      	b.n	80071d2 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80071c8:	6839      	ldr	r1, [r7, #0]
 80071ca:	6878      	ldr	r0, [r7, #4]
 80071cc:	f000 f96d 	bl	80074aa <USBD_CtlError>
  }
}
 80071d0:	bf00      	nop
 80071d2:	bf00      	nop
 80071d4:	3710      	adds	r7, #16
 80071d6:	46bd      	mov	sp, r7
 80071d8:	bd80      	pop	{r7, pc}
	...

080071dc <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b082      	sub	sp, #8
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
 80071e4:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	885b      	ldrh	r3, [r3, #2]
 80071ea:	b2da      	uxtb	r2, r3
 80071ec:	4b41      	ldr	r3, [pc, #260]	; (80072f4 <USBD_SetConfig+0x118>)
 80071ee:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80071f0:	4b40      	ldr	r3, [pc, #256]	; (80072f4 <USBD_SetConfig+0x118>)
 80071f2:	781b      	ldrb	r3, [r3, #0]
 80071f4:	2b01      	cmp	r3, #1
 80071f6:	d904      	bls.n	8007202 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80071f8:	6839      	ldr	r1, [r7, #0]
 80071fa:	6878      	ldr	r0, [r7, #4]
 80071fc:	f000 f955 	bl	80074aa <USBD_CtlError>
 8007200:	e075      	b.n	80072ee <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007208:	2b02      	cmp	r3, #2
 800720a:	d002      	beq.n	8007212 <USBD_SetConfig+0x36>
 800720c:	2b03      	cmp	r3, #3
 800720e:	d023      	beq.n	8007258 <USBD_SetConfig+0x7c>
 8007210:	e062      	b.n	80072d8 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 8007212:	4b38      	ldr	r3, [pc, #224]	; (80072f4 <USBD_SetConfig+0x118>)
 8007214:	781b      	ldrb	r3, [r3, #0]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d01a      	beq.n	8007250 <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 800721a:	4b36      	ldr	r3, [pc, #216]	; (80072f4 <USBD_SetConfig+0x118>)
 800721c:	781b      	ldrb	r3, [r3, #0]
 800721e:	461a      	mov	r2, r3
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2203      	movs	r2, #3
 8007228:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800722c:	4b31      	ldr	r3, [pc, #196]	; (80072f4 <USBD_SetConfig+0x118>)
 800722e:	781b      	ldrb	r3, [r3, #0]
 8007230:	4619      	mov	r1, r3
 8007232:	6878      	ldr	r0, [r7, #4]
 8007234:	f7ff fa5d 	bl	80066f2 <USBD_SetClassConfig>
 8007238:	4603      	mov	r3, r0
 800723a:	2b02      	cmp	r3, #2
 800723c:	d104      	bne.n	8007248 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 800723e:	6839      	ldr	r1, [r7, #0]
 8007240:	6878      	ldr	r0, [r7, #4]
 8007242:	f000 f932 	bl	80074aa <USBD_CtlError>
          return;
 8007246:	e052      	b.n	80072ee <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 8007248:	6878      	ldr	r0, [r7, #4]
 800724a:	f000 f9f6 	bl	800763a <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800724e:	e04e      	b.n	80072ee <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8007250:	6878      	ldr	r0, [r7, #4]
 8007252:	f000 f9f2 	bl	800763a <USBD_CtlSendStatus>
      break;
 8007256:	e04a      	b.n	80072ee <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007258:	4b26      	ldr	r3, [pc, #152]	; (80072f4 <USBD_SetConfig+0x118>)
 800725a:	781b      	ldrb	r3, [r3, #0]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d112      	bne.n	8007286 <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2202      	movs	r2, #2
 8007264:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 8007268:	4b22      	ldr	r3, [pc, #136]	; (80072f4 <USBD_SetConfig+0x118>)
 800726a:	781b      	ldrb	r3, [r3, #0]
 800726c:	461a      	mov	r2, r3
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 8007272:	4b20      	ldr	r3, [pc, #128]	; (80072f4 <USBD_SetConfig+0x118>)
 8007274:	781b      	ldrb	r3, [r3, #0]
 8007276:	4619      	mov	r1, r3
 8007278:	6878      	ldr	r0, [r7, #4]
 800727a:	f7ff fa59 	bl	8006730 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 800727e:	6878      	ldr	r0, [r7, #4]
 8007280:	f000 f9db 	bl	800763a <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8007284:	e033      	b.n	80072ee <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 8007286:	4b1b      	ldr	r3, [pc, #108]	; (80072f4 <USBD_SetConfig+0x118>)
 8007288:	781b      	ldrb	r3, [r3, #0]
 800728a:	461a      	mov	r2, r3
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	685b      	ldr	r3, [r3, #4]
 8007290:	429a      	cmp	r2, r3
 8007292:	d01d      	beq.n	80072d0 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	685b      	ldr	r3, [r3, #4]
 8007298:	b2db      	uxtb	r3, r3
 800729a:	4619      	mov	r1, r3
 800729c:	6878      	ldr	r0, [r7, #4]
 800729e:	f7ff fa47 	bl	8006730 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80072a2:	4b14      	ldr	r3, [pc, #80]	; (80072f4 <USBD_SetConfig+0x118>)
 80072a4:	781b      	ldrb	r3, [r3, #0]
 80072a6:	461a      	mov	r2, r3
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80072ac:	4b11      	ldr	r3, [pc, #68]	; (80072f4 <USBD_SetConfig+0x118>)
 80072ae:	781b      	ldrb	r3, [r3, #0]
 80072b0:	4619      	mov	r1, r3
 80072b2:	6878      	ldr	r0, [r7, #4]
 80072b4:	f7ff fa1d 	bl	80066f2 <USBD_SetClassConfig>
 80072b8:	4603      	mov	r3, r0
 80072ba:	2b02      	cmp	r3, #2
 80072bc:	d104      	bne.n	80072c8 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 80072be:	6839      	ldr	r1, [r7, #0]
 80072c0:	6878      	ldr	r0, [r7, #4]
 80072c2:	f000 f8f2 	bl	80074aa <USBD_CtlError>
          return;
 80072c6:	e012      	b.n	80072ee <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 80072c8:	6878      	ldr	r0, [r7, #4]
 80072ca:	f000 f9b6 	bl	800763a <USBD_CtlSendStatus>
      break;
 80072ce:	e00e      	b.n	80072ee <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 80072d0:	6878      	ldr	r0, [r7, #4]
 80072d2:	f000 f9b2 	bl	800763a <USBD_CtlSendStatus>
      break;
 80072d6:	e00a      	b.n	80072ee <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 80072d8:	6839      	ldr	r1, [r7, #0]
 80072da:	6878      	ldr	r0, [r7, #4]
 80072dc:	f000 f8e5 	bl	80074aa <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 80072e0:	4b04      	ldr	r3, [pc, #16]	; (80072f4 <USBD_SetConfig+0x118>)
 80072e2:	781b      	ldrb	r3, [r3, #0]
 80072e4:	4619      	mov	r1, r3
 80072e6:	6878      	ldr	r0, [r7, #4]
 80072e8:	f7ff fa22 	bl	8006730 <USBD_ClrClassConfig>
      break;
 80072ec:	bf00      	nop
    }
  }
}
 80072ee:	3708      	adds	r7, #8
 80072f0:	46bd      	mov	sp, r7
 80072f2:	bd80      	pop	{r7, pc}
 80072f4:	200001e0 	.word	0x200001e0

080072f8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b082      	sub	sp, #8
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
 8007300:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	88db      	ldrh	r3, [r3, #6]
 8007306:	2b01      	cmp	r3, #1
 8007308:	d004      	beq.n	8007314 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 800730a:	6839      	ldr	r1, [r7, #0]
 800730c:	6878      	ldr	r0, [r7, #4]
 800730e:	f000 f8cc 	bl	80074aa <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 8007312:	e022      	b.n	800735a <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800731a:	2b02      	cmp	r3, #2
 800731c:	dc02      	bgt.n	8007324 <USBD_GetConfig+0x2c>
 800731e:	2b00      	cmp	r3, #0
 8007320:	dc03      	bgt.n	800732a <USBD_GetConfig+0x32>
 8007322:	e015      	b.n	8007350 <USBD_GetConfig+0x58>
 8007324:	2b03      	cmp	r3, #3
 8007326:	d00b      	beq.n	8007340 <USBD_GetConfig+0x48>
 8007328:	e012      	b.n	8007350 <USBD_GetConfig+0x58>
      pdev->dev_default_config = 0U;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	2200      	movs	r2, #0
 800732e:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	3308      	adds	r3, #8
 8007334:	2201      	movs	r2, #1
 8007336:	4619      	mov	r1, r3
 8007338:	6878      	ldr	r0, [r7, #4]
 800733a:	f000 f920 	bl	800757e <USBD_CtlSendData>
      break;
 800733e:	e00c      	b.n	800735a <USBD_GetConfig+0x62>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	3304      	adds	r3, #4
 8007344:	2201      	movs	r2, #1
 8007346:	4619      	mov	r1, r3
 8007348:	6878      	ldr	r0, [r7, #4]
 800734a:	f000 f918 	bl	800757e <USBD_CtlSendData>
      break;
 800734e:	e004      	b.n	800735a <USBD_GetConfig+0x62>
      USBD_CtlError(pdev , req);
 8007350:	6839      	ldr	r1, [r7, #0]
 8007352:	6878      	ldr	r0, [r7, #4]
 8007354:	f000 f8a9 	bl	80074aa <USBD_CtlError>
      break;
 8007358:	bf00      	nop
}
 800735a:	bf00      	nop
 800735c:	3708      	adds	r7, #8
 800735e:	46bd      	mov	sp, r7
 8007360:	bd80      	pop	{r7, pc}

08007362 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007362:	b580      	push	{r7, lr}
 8007364:	b082      	sub	sp, #8
 8007366:	af00      	add	r7, sp, #0
 8007368:	6078      	str	r0, [r7, #4]
 800736a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007372:	3b01      	subs	r3, #1
 8007374:	2b02      	cmp	r3, #2
 8007376:	d81e      	bhi.n	80073b6 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	88db      	ldrh	r3, [r3, #6]
 800737c:	2b02      	cmp	r3, #2
 800737e:	d004      	beq.n	800738a <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8007380:	6839      	ldr	r1, [r7, #0]
 8007382:	6878      	ldr	r0, [r7, #4]
 8007384:	f000 f891 	bl	80074aa <USBD_CtlError>
      break;
 8007388:	e01a      	b.n	80073c0 <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2201      	movs	r2, #1
 800738e:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 8007396:	2b00      	cmp	r3, #0
 8007398:	d005      	beq.n	80073a6 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	68db      	ldr	r3, [r3, #12]
 800739e:	f043 0202 	orr.w	r2, r3, #2
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	330c      	adds	r3, #12
 80073aa:	2202      	movs	r2, #2
 80073ac:	4619      	mov	r1, r3
 80073ae:	6878      	ldr	r0, [r7, #4]
 80073b0:	f000 f8e5 	bl	800757e <USBD_CtlSendData>
    break;
 80073b4:	e004      	b.n	80073c0 <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 80073b6:	6839      	ldr	r1, [r7, #0]
 80073b8:	6878      	ldr	r0, [r7, #4]
 80073ba:	f000 f876 	bl	80074aa <USBD_CtlError>
    break;
 80073be:	bf00      	nop
  }
}
 80073c0:	bf00      	nop
 80073c2:	3708      	adds	r7, #8
 80073c4:	46bd      	mov	sp, r7
 80073c6:	bd80      	pop	{r7, pc}

080073c8 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b082      	sub	sp, #8
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
 80073d0:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	885b      	ldrh	r3, [r3, #2]
 80073d6:	2b01      	cmp	r3, #1
 80073d8:	d106      	bne.n	80073e8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2201      	movs	r2, #1
 80073de:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 80073e2:	6878      	ldr	r0, [r7, #4]
 80073e4:	f000 f929 	bl	800763a <USBD_CtlSendStatus>
  }

}
 80073e8:	bf00      	nop
 80073ea:	3708      	adds	r7, #8
 80073ec:	46bd      	mov	sp, r7
 80073ee:	bd80      	pop	{r7, pc}

080073f0 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b082      	sub	sp, #8
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
 80073f8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007400:	3b01      	subs	r3, #1
 8007402:	2b02      	cmp	r3, #2
 8007404:	d80b      	bhi.n	800741e <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	885b      	ldrh	r3, [r3, #2]
 800740a:	2b01      	cmp	r3, #1
 800740c:	d10c      	bne.n	8007428 <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2200      	movs	r2, #0
 8007412:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 8007416:	6878      	ldr	r0, [r7, #4]
 8007418:	f000 f90f 	bl	800763a <USBD_CtlSendStatus>
    }
    break;
 800741c:	e004      	b.n	8007428 <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 800741e:	6839      	ldr	r1, [r7, #0]
 8007420:	6878      	ldr	r0, [r7, #4]
 8007422:	f000 f842 	bl	80074aa <USBD_CtlError>
    break;
 8007426:	e000      	b.n	800742a <USBD_ClrFeature+0x3a>
    break;
 8007428:	bf00      	nop
  }
}
 800742a:	bf00      	nop
 800742c:	3708      	adds	r7, #8
 800742e:	46bd      	mov	sp, r7
 8007430:	bd80      	pop	{r7, pc}

08007432 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007432:	b480      	push	{r7}
 8007434:	b083      	sub	sp, #12
 8007436:	af00      	add	r7, sp, #0
 8007438:	6078      	str	r0, [r7, #4]
 800743a:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	781a      	ldrb	r2, [r3, #0]
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	785a      	ldrb	r2, [r3, #1]
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	3302      	adds	r3, #2
 8007450:	781b      	ldrb	r3, [r3, #0]
 8007452:	b29a      	uxth	r2, r3
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	3303      	adds	r3, #3
 8007458:	781b      	ldrb	r3, [r3, #0]
 800745a:	b29b      	uxth	r3, r3
 800745c:	021b      	lsls	r3, r3, #8
 800745e:	b29b      	uxth	r3, r3
 8007460:	4413      	add	r3, r2
 8007462:	b29a      	uxth	r2, r3
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	3304      	adds	r3, #4
 800746c:	781b      	ldrb	r3, [r3, #0]
 800746e:	b29a      	uxth	r2, r3
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	3305      	adds	r3, #5
 8007474:	781b      	ldrb	r3, [r3, #0]
 8007476:	b29b      	uxth	r3, r3
 8007478:	021b      	lsls	r3, r3, #8
 800747a:	b29b      	uxth	r3, r3
 800747c:	4413      	add	r3, r2
 800747e:	b29a      	uxth	r2, r3
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	3306      	adds	r3, #6
 8007488:	781b      	ldrb	r3, [r3, #0]
 800748a:	b29a      	uxth	r2, r3
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	3307      	adds	r3, #7
 8007490:	781b      	ldrb	r3, [r3, #0]
 8007492:	b29b      	uxth	r3, r3
 8007494:	021b      	lsls	r3, r3, #8
 8007496:	b29b      	uxth	r3, r3
 8007498:	4413      	add	r3, r2
 800749a:	b29a      	uxth	r2, r3
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	80da      	strh	r2, [r3, #6]

}
 80074a0:	bf00      	nop
 80074a2:	370c      	adds	r7, #12
 80074a4:	46bd      	mov	sp, r7
 80074a6:	bc80      	pop	{r7}
 80074a8:	4770      	bx	lr

080074aa <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 80074aa:	b580      	push	{r7, lr}
 80074ac:	b082      	sub	sp, #8
 80074ae:	af00      	add	r7, sp, #0
 80074b0:	6078      	str	r0, [r7, #4]
 80074b2:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 80074b4:	2180      	movs	r1, #128	; 0x80
 80074b6:	6878      	ldr	r0, [r7, #4]
 80074b8:	f000 fc72 	bl	8007da0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 80074bc:	2100      	movs	r1, #0
 80074be:	6878      	ldr	r0, [r7, #4]
 80074c0:	f000 fc6e 	bl	8007da0 <USBD_LL_StallEP>
}
 80074c4:	bf00      	nop
 80074c6:	3708      	adds	r7, #8
 80074c8:	46bd      	mov	sp, r7
 80074ca:	bd80      	pop	{r7, pc}

080074cc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b086      	sub	sp, #24
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	60f8      	str	r0, [r7, #12]
 80074d4:	60b9      	str	r1, [r7, #8]
 80074d6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80074d8:	2300      	movs	r3, #0
 80074da:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d032      	beq.n	8007548 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80074e2:	68f8      	ldr	r0, [r7, #12]
 80074e4:	f000 f834 	bl	8007550 <USBD_GetLen>
 80074e8:	4603      	mov	r3, r0
 80074ea:	3301      	adds	r3, #1
 80074ec:	b29b      	uxth	r3, r3
 80074ee:	005b      	lsls	r3, r3, #1
 80074f0:	b29a      	uxth	r2, r3
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80074f6:	7dfb      	ldrb	r3, [r7, #23]
 80074f8:	1c5a      	adds	r2, r3, #1
 80074fa:	75fa      	strb	r2, [r7, #23]
 80074fc:	461a      	mov	r2, r3
 80074fe:	68bb      	ldr	r3, [r7, #8]
 8007500:	4413      	add	r3, r2
 8007502:	687a      	ldr	r2, [r7, #4]
 8007504:	7812      	ldrb	r2, [r2, #0]
 8007506:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007508:	7dfb      	ldrb	r3, [r7, #23]
 800750a:	1c5a      	adds	r2, r3, #1
 800750c:	75fa      	strb	r2, [r7, #23]
 800750e:	461a      	mov	r2, r3
 8007510:	68bb      	ldr	r3, [r7, #8]
 8007512:	4413      	add	r3, r2
 8007514:	2203      	movs	r2, #3
 8007516:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007518:	e012      	b.n	8007540 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	1c5a      	adds	r2, r3, #1
 800751e:	60fa      	str	r2, [r7, #12]
 8007520:	7dfa      	ldrb	r2, [r7, #23]
 8007522:	1c51      	adds	r1, r2, #1
 8007524:	75f9      	strb	r1, [r7, #23]
 8007526:	4611      	mov	r1, r2
 8007528:	68ba      	ldr	r2, [r7, #8]
 800752a:	440a      	add	r2, r1
 800752c:	781b      	ldrb	r3, [r3, #0]
 800752e:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007530:	7dfb      	ldrb	r3, [r7, #23]
 8007532:	1c5a      	adds	r2, r3, #1
 8007534:	75fa      	strb	r2, [r7, #23]
 8007536:	461a      	mov	r2, r3
 8007538:	68bb      	ldr	r3, [r7, #8]
 800753a:	4413      	add	r3, r2
 800753c:	2200      	movs	r2, #0
 800753e:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	781b      	ldrb	r3, [r3, #0]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d1e8      	bne.n	800751a <USBD_GetString+0x4e>
    }
  }
}
 8007548:	bf00      	nop
 800754a:	3718      	adds	r7, #24
 800754c:	46bd      	mov	sp, r7
 800754e:	bd80      	pop	{r7, pc}

08007550 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007550:	b480      	push	{r7}
 8007552:	b085      	sub	sp, #20
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 8007558:	2300      	movs	r3, #0
 800755a:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 800755c:	e005      	b.n	800756a <USBD_GetLen+0x1a>
    {
        len++;
 800755e:	7bfb      	ldrb	r3, [r7, #15]
 8007560:	3301      	adds	r3, #1
 8007562:	73fb      	strb	r3, [r7, #15]
        buf++;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	3301      	adds	r3, #1
 8007568:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	781b      	ldrb	r3, [r3, #0]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d1f5      	bne.n	800755e <USBD_GetLen+0xe>
    }

    return len;
 8007572:	7bfb      	ldrb	r3, [r7, #15]
}
 8007574:	4618      	mov	r0, r3
 8007576:	3714      	adds	r7, #20
 8007578:	46bd      	mov	sp, r7
 800757a:	bc80      	pop	{r7}
 800757c:	4770      	bx	lr

0800757e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 800757e:	b580      	push	{r7, lr}
 8007580:	b084      	sub	sp, #16
 8007582:	af00      	add	r7, sp, #0
 8007584:	60f8      	str	r0, [r7, #12]
 8007586:	60b9      	str	r1, [r7, #8]
 8007588:	4613      	mov	r3, r2
 800758a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	2202      	movs	r2, #2
 8007590:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 8007594:	88fa      	ldrh	r2, [r7, #6]
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800759a:	88fa      	ldrh	r2, [r7, #6]
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 80075a0:	88fb      	ldrh	r3, [r7, #6]
 80075a2:	68ba      	ldr	r2, [r7, #8]
 80075a4:	2100      	movs	r1, #0
 80075a6:	68f8      	ldr	r0, [r7, #12]
 80075a8:	f000 fc83 	bl	8007eb2 <USBD_LL_Transmit>

  return USBD_OK;
 80075ac:	2300      	movs	r3, #0
}
 80075ae:	4618      	mov	r0, r3
 80075b0:	3710      	adds	r7, #16
 80075b2:	46bd      	mov	sp, r7
 80075b4:	bd80      	pop	{r7, pc}

080075b6 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 80075b6:	b580      	push	{r7, lr}
 80075b8:	b084      	sub	sp, #16
 80075ba:	af00      	add	r7, sp, #0
 80075bc:	60f8      	str	r0, [r7, #12]
 80075be:	60b9      	str	r1, [r7, #8]
 80075c0:	4613      	mov	r3, r2
 80075c2:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 80075c4:	88fb      	ldrh	r3, [r7, #6]
 80075c6:	68ba      	ldr	r2, [r7, #8]
 80075c8:	2100      	movs	r1, #0
 80075ca:	68f8      	ldr	r0, [r7, #12]
 80075cc:	f000 fc71 	bl	8007eb2 <USBD_LL_Transmit>

  return USBD_OK;
 80075d0:	2300      	movs	r3, #0
}
 80075d2:	4618      	mov	r0, r3
 80075d4:	3710      	adds	r7, #16
 80075d6:	46bd      	mov	sp, r7
 80075d8:	bd80      	pop	{r7, pc}

080075da <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 80075da:	b580      	push	{r7, lr}
 80075dc:	b084      	sub	sp, #16
 80075de:	af00      	add	r7, sp, #0
 80075e0:	60f8      	str	r0, [r7, #12]
 80075e2:	60b9      	str	r1, [r7, #8]
 80075e4:	4613      	mov	r3, r2
 80075e6:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	2203      	movs	r2, #3
 80075ec:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 80075f0:	88fa      	ldrh	r2, [r7, #6]
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 80075f8:	88fa      	ldrh	r2, [r7, #6]
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 8007600:	88fb      	ldrh	r3, [r7, #6]
 8007602:	68ba      	ldr	r2, [r7, #8]
 8007604:	2100      	movs	r1, #0
 8007606:	68f8      	ldr	r0, [r7, #12]
 8007608:	f000 fc76 	bl	8007ef8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800760c:	2300      	movs	r3, #0
}
 800760e:	4618      	mov	r0, r3
 8007610:	3710      	adds	r7, #16
 8007612:	46bd      	mov	sp, r7
 8007614:	bd80      	pop	{r7, pc}

08007616 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 8007616:	b580      	push	{r7, lr}
 8007618:	b084      	sub	sp, #16
 800761a:	af00      	add	r7, sp, #0
 800761c:	60f8      	str	r0, [r7, #12]
 800761e:	60b9      	str	r1, [r7, #8]
 8007620:	4613      	mov	r3, r2
 8007622:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007624:	88fb      	ldrh	r3, [r7, #6]
 8007626:	68ba      	ldr	r2, [r7, #8]
 8007628:	2100      	movs	r1, #0
 800762a:	68f8      	ldr	r0, [r7, #12]
 800762c:	f000 fc64 	bl	8007ef8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007630:	2300      	movs	r3, #0
}
 8007632:	4618      	mov	r0, r3
 8007634:	3710      	adds	r7, #16
 8007636:	46bd      	mov	sp, r7
 8007638:	bd80      	pop	{r7, pc}

0800763a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 800763a:	b580      	push	{r7, lr}
 800763c:	b082      	sub	sp, #8
 800763e:	af00      	add	r7, sp, #0
 8007640:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2204      	movs	r2, #4
 8007646:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800764a:	2300      	movs	r3, #0
 800764c:	2200      	movs	r2, #0
 800764e:	2100      	movs	r1, #0
 8007650:	6878      	ldr	r0, [r7, #4]
 8007652:	f000 fc2e 	bl	8007eb2 <USBD_LL_Transmit>

  return USBD_OK;
 8007656:	2300      	movs	r3, #0
}
 8007658:	4618      	mov	r0, r3
 800765a:	3708      	adds	r7, #8
 800765c:	46bd      	mov	sp, r7
 800765e:	bd80      	pop	{r7, pc}

08007660 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b082      	sub	sp, #8
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2205      	movs	r2, #5
 800766c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8007670:	2300      	movs	r3, #0
 8007672:	2200      	movs	r2, #0
 8007674:	2100      	movs	r1, #0
 8007676:	6878      	ldr	r0, [r7, #4]
 8007678:	f000 fc3e 	bl	8007ef8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800767c:	2300      	movs	r3, #0
}
 800767e:	4618      	mov	r0, r3
 8007680:	3708      	adds	r7, #8
 8007682:	46bd      	mov	sp, r7
 8007684:	bd80      	pop	{r7, pc}
	...

08007688 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007688:	b580      	push	{r7, lr}
 800768a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800768c:	2200      	movs	r2, #0
 800768e:	4912      	ldr	r1, [pc, #72]	; (80076d8 <MX_USB_DEVICE_Init+0x50>)
 8007690:	4812      	ldr	r0, [pc, #72]	; (80076dc <MX_USB_DEVICE_Init+0x54>)
 8007692:	f7fe ffd4 	bl	800663e <USBD_Init>
 8007696:	4603      	mov	r3, r0
 8007698:	2b00      	cmp	r3, #0
 800769a:	d001      	beq.n	80076a0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800769c:	f7f8 ffec 	bl	8000678 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80076a0:	490f      	ldr	r1, [pc, #60]	; (80076e0 <MX_USB_DEVICE_Init+0x58>)
 80076a2:	480e      	ldr	r0, [pc, #56]	; (80076dc <MX_USB_DEVICE_Init+0x54>)
 80076a4:	f7fe fff6 	bl	8006694 <USBD_RegisterClass>
 80076a8:	4603      	mov	r3, r0
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d001      	beq.n	80076b2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80076ae:	f7f8 ffe3 	bl	8000678 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80076b2:	490c      	ldr	r1, [pc, #48]	; (80076e4 <MX_USB_DEVICE_Init+0x5c>)
 80076b4:	4809      	ldr	r0, [pc, #36]	; (80076dc <MX_USB_DEVICE_Init+0x54>)
 80076b6:	f7fe ff27 	bl	8006508 <USBD_CDC_RegisterInterface>
 80076ba:	4603      	mov	r3, r0
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d001      	beq.n	80076c4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80076c0:	f7f8 ffda 	bl	8000678 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80076c4:	4805      	ldr	r0, [pc, #20]	; (80076dc <MX_USB_DEVICE_Init+0x54>)
 80076c6:	f7fe fffe 	bl	80066c6 <USBD_Start>
 80076ca:	4603      	mov	r3, r0
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d001      	beq.n	80076d4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80076d0:	f7f8 ffd2 	bl	8000678 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80076d4:	bf00      	nop
 80076d6:	bd80      	pop	{r7, pc}
 80076d8:	2000012c 	.word	0x2000012c
 80076dc:	200001e4 	.word	0x200001e4
 80076e0:	20000018 	.word	0x20000018
 80076e4:	2000011c 	.word	0x2000011c

080076e8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80076ec:	2200      	movs	r2, #0
 80076ee:	4905      	ldr	r1, [pc, #20]	; (8007704 <CDC_Init_FS+0x1c>)
 80076f0:	4805      	ldr	r0, [pc, #20]	; (8007708 <CDC_Init_FS+0x20>)
 80076f2:	f7fe ff1f 	bl	8006534 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80076f6:	4905      	ldr	r1, [pc, #20]	; (800770c <CDC_Init_FS+0x24>)
 80076f8:	4803      	ldr	r0, [pc, #12]	; (8007708 <CDC_Init_FS+0x20>)
 80076fa:	f7fe ff34 	bl	8006566 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80076fe:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007700:	4618      	mov	r0, r3
 8007702:	bd80      	pop	{r7, pc}
 8007704:	20000c80 	.word	0x20000c80
 8007708:	200001e4 	.word	0x200001e4
 800770c:	20000480 	.word	0x20000480

08007710 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007710:	b480      	push	{r7}
 8007712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007714:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007716:	4618      	mov	r0, r3
 8007718:	46bd      	mov	sp, r7
 800771a:	bc80      	pop	{r7}
 800771c:	4770      	bx	lr
	...

08007720 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007720:	b480      	push	{r7}
 8007722:	b083      	sub	sp, #12
 8007724:	af00      	add	r7, sp, #0
 8007726:	4603      	mov	r3, r0
 8007728:	6039      	str	r1, [r7, #0]
 800772a:	71fb      	strb	r3, [r7, #7]
 800772c:	4613      	mov	r3, r2
 800772e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007730:	79fb      	ldrb	r3, [r7, #7]
 8007732:	2b23      	cmp	r3, #35	; 0x23
 8007734:	d84a      	bhi.n	80077cc <CDC_Control_FS+0xac>
 8007736:	a201      	add	r2, pc, #4	; (adr r2, 800773c <CDC_Control_FS+0x1c>)
 8007738:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800773c:	080077cd 	.word	0x080077cd
 8007740:	080077cd 	.word	0x080077cd
 8007744:	080077cd 	.word	0x080077cd
 8007748:	080077cd 	.word	0x080077cd
 800774c:	080077cd 	.word	0x080077cd
 8007750:	080077cd 	.word	0x080077cd
 8007754:	080077cd 	.word	0x080077cd
 8007758:	080077cd 	.word	0x080077cd
 800775c:	080077cd 	.word	0x080077cd
 8007760:	080077cd 	.word	0x080077cd
 8007764:	080077cd 	.word	0x080077cd
 8007768:	080077cd 	.word	0x080077cd
 800776c:	080077cd 	.word	0x080077cd
 8007770:	080077cd 	.word	0x080077cd
 8007774:	080077cd 	.word	0x080077cd
 8007778:	080077cd 	.word	0x080077cd
 800777c:	080077cd 	.word	0x080077cd
 8007780:	080077cd 	.word	0x080077cd
 8007784:	080077cd 	.word	0x080077cd
 8007788:	080077cd 	.word	0x080077cd
 800778c:	080077cd 	.word	0x080077cd
 8007790:	080077cd 	.word	0x080077cd
 8007794:	080077cd 	.word	0x080077cd
 8007798:	080077cd 	.word	0x080077cd
 800779c:	080077cd 	.word	0x080077cd
 80077a0:	080077cd 	.word	0x080077cd
 80077a4:	080077cd 	.word	0x080077cd
 80077a8:	080077cd 	.word	0x080077cd
 80077ac:	080077cd 	.word	0x080077cd
 80077b0:	080077cd 	.word	0x080077cd
 80077b4:	080077cd 	.word	0x080077cd
 80077b8:	080077cd 	.word	0x080077cd
 80077bc:	080077cd 	.word	0x080077cd
 80077c0:	080077cd 	.word	0x080077cd
 80077c4:	080077cd 	.word	0x080077cd
 80077c8:	080077cd 	.word	0x080077cd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80077cc:	bf00      	nop
  }

  return (USBD_OK);
 80077ce:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80077d0:	4618      	mov	r0, r3
 80077d2:	370c      	adds	r7, #12
 80077d4:	46bd      	mov	sp, r7
 80077d6:	bc80      	pop	{r7}
 80077d8:	4770      	bx	lr
 80077da:	bf00      	nop

080077dc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b082      	sub	sp, #8
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
 80077e4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80077e6:	6879      	ldr	r1, [r7, #4]
 80077e8:	4805      	ldr	r0, [pc, #20]	; (8007800 <CDC_Receive_FS+0x24>)
 80077ea:	f7fe febc 	bl	8006566 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80077ee:	4804      	ldr	r0, [pc, #16]	; (8007800 <CDC_Receive_FS+0x24>)
 80077f0:	f7fe fefb 	bl	80065ea <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80077f4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80077f6:	4618      	mov	r0, r3
 80077f8:	3708      	adds	r7, #8
 80077fa:	46bd      	mov	sp, r7
 80077fc:	bd80      	pop	{r7, pc}
 80077fe:	bf00      	nop
 8007800:	200001e4 	.word	0x200001e4

08007804 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b084      	sub	sp, #16
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
 800780c:	460b      	mov	r3, r1
 800780e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007810:	2300      	movs	r3, #0
 8007812:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007814:	4b0d      	ldr	r3, [pc, #52]	; (800784c <CDC_Transmit_FS+0x48>)
 8007816:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800781a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800781c:	68bb      	ldr	r3, [r7, #8]
 800781e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007822:	2b00      	cmp	r3, #0
 8007824:	d001      	beq.n	800782a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007826:	2301      	movs	r3, #1
 8007828:	e00b      	b.n	8007842 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800782a:	887b      	ldrh	r3, [r7, #2]
 800782c:	461a      	mov	r2, r3
 800782e:	6879      	ldr	r1, [r7, #4]
 8007830:	4806      	ldr	r0, [pc, #24]	; (800784c <CDC_Transmit_FS+0x48>)
 8007832:	f7fe fe7f 	bl	8006534 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007836:	4805      	ldr	r0, [pc, #20]	; (800784c <CDC_Transmit_FS+0x48>)
 8007838:	f7fe fea8 	bl	800658c <USBD_CDC_TransmitPacket>
 800783c:	4603      	mov	r3, r0
 800783e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007840:	7bfb      	ldrb	r3, [r7, #15]
}
 8007842:	4618      	mov	r0, r3
 8007844:	3710      	adds	r7, #16
 8007846:	46bd      	mov	sp, r7
 8007848:	bd80      	pop	{r7, pc}
 800784a:	bf00      	nop
 800784c:	200001e4 	.word	0x200001e4

08007850 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007850:	b480      	push	{r7}
 8007852:	b083      	sub	sp, #12
 8007854:	af00      	add	r7, sp, #0
 8007856:	4603      	mov	r3, r0
 8007858:	6039      	str	r1, [r7, #0]
 800785a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	2212      	movs	r2, #18
 8007860:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007862:	4b03      	ldr	r3, [pc, #12]	; (8007870 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007864:	4618      	mov	r0, r3
 8007866:	370c      	adds	r7, #12
 8007868:	46bd      	mov	sp, r7
 800786a:	bc80      	pop	{r7}
 800786c:	4770      	bx	lr
 800786e:	bf00      	nop
 8007870:	20000148 	.word	0x20000148

08007874 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007874:	b480      	push	{r7}
 8007876:	b083      	sub	sp, #12
 8007878:	af00      	add	r7, sp, #0
 800787a:	4603      	mov	r3, r0
 800787c:	6039      	str	r1, [r7, #0]
 800787e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	2204      	movs	r2, #4
 8007884:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007886:	4b03      	ldr	r3, [pc, #12]	; (8007894 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007888:	4618      	mov	r0, r3
 800788a:	370c      	adds	r7, #12
 800788c:	46bd      	mov	sp, r7
 800788e:	bc80      	pop	{r7}
 8007890:	4770      	bx	lr
 8007892:	bf00      	nop
 8007894:	2000015c 	.word	0x2000015c

08007898 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b082      	sub	sp, #8
 800789c:	af00      	add	r7, sp, #0
 800789e:	4603      	mov	r3, r0
 80078a0:	6039      	str	r1, [r7, #0]
 80078a2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80078a4:	79fb      	ldrb	r3, [r7, #7]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d105      	bne.n	80078b6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80078aa:	683a      	ldr	r2, [r7, #0]
 80078ac:	4907      	ldr	r1, [pc, #28]	; (80078cc <USBD_FS_ProductStrDescriptor+0x34>)
 80078ae:	4808      	ldr	r0, [pc, #32]	; (80078d0 <USBD_FS_ProductStrDescriptor+0x38>)
 80078b0:	f7ff fe0c 	bl	80074cc <USBD_GetString>
 80078b4:	e004      	b.n	80078c0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80078b6:	683a      	ldr	r2, [r7, #0]
 80078b8:	4904      	ldr	r1, [pc, #16]	; (80078cc <USBD_FS_ProductStrDescriptor+0x34>)
 80078ba:	4805      	ldr	r0, [pc, #20]	; (80078d0 <USBD_FS_ProductStrDescriptor+0x38>)
 80078bc:	f7ff fe06 	bl	80074cc <USBD_GetString>
  }
  return USBD_StrDesc;
 80078c0:	4b02      	ldr	r3, [pc, #8]	; (80078cc <USBD_FS_ProductStrDescriptor+0x34>)
}
 80078c2:	4618      	mov	r0, r3
 80078c4:	3708      	adds	r7, #8
 80078c6:	46bd      	mov	sp, r7
 80078c8:	bd80      	pop	{r7, pc}
 80078ca:	bf00      	nop
 80078cc:	20001480 	.word	0x20001480
 80078d0:	08008068 	.word	0x08008068

080078d4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b082      	sub	sp, #8
 80078d8:	af00      	add	r7, sp, #0
 80078da:	4603      	mov	r3, r0
 80078dc:	6039      	str	r1, [r7, #0]
 80078de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80078e0:	683a      	ldr	r2, [r7, #0]
 80078e2:	4904      	ldr	r1, [pc, #16]	; (80078f4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80078e4:	4804      	ldr	r0, [pc, #16]	; (80078f8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80078e6:	f7ff fdf1 	bl	80074cc <USBD_GetString>
  return USBD_StrDesc;
 80078ea:	4b02      	ldr	r3, [pc, #8]	; (80078f4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80078ec:	4618      	mov	r0, r3
 80078ee:	3708      	adds	r7, #8
 80078f0:	46bd      	mov	sp, r7
 80078f2:	bd80      	pop	{r7, pc}
 80078f4:	20001480 	.word	0x20001480
 80078f8:	08008080 	.word	0x08008080

080078fc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b082      	sub	sp, #8
 8007900:	af00      	add	r7, sp, #0
 8007902:	4603      	mov	r3, r0
 8007904:	6039      	str	r1, [r7, #0]
 8007906:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	221a      	movs	r2, #26
 800790c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800790e:	f000 f843 	bl	8007998 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007912:	4b02      	ldr	r3, [pc, #8]	; (800791c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007914:	4618      	mov	r0, r3
 8007916:	3708      	adds	r7, #8
 8007918:	46bd      	mov	sp, r7
 800791a:	bd80      	pop	{r7, pc}
 800791c:	20000160 	.word	0x20000160

08007920 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b082      	sub	sp, #8
 8007924:	af00      	add	r7, sp, #0
 8007926:	4603      	mov	r3, r0
 8007928:	6039      	str	r1, [r7, #0]
 800792a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800792c:	79fb      	ldrb	r3, [r7, #7]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d105      	bne.n	800793e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007932:	683a      	ldr	r2, [r7, #0]
 8007934:	4907      	ldr	r1, [pc, #28]	; (8007954 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007936:	4808      	ldr	r0, [pc, #32]	; (8007958 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007938:	f7ff fdc8 	bl	80074cc <USBD_GetString>
 800793c:	e004      	b.n	8007948 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800793e:	683a      	ldr	r2, [r7, #0]
 8007940:	4904      	ldr	r1, [pc, #16]	; (8007954 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007942:	4805      	ldr	r0, [pc, #20]	; (8007958 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007944:	f7ff fdc2 	bl	80074cc <USBD_GetString>
  }
  return USBD_StrDesc;
 8007948:	4b02      	ldr	r3, [pc, #8]	; (8007954 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800794a:	4618      	mov	r0, r3
 800794c:	3708      	adds	r7, #8
 800794e:	46bd      	mov	sp, r7
 8007950:	bd80      	pop	{r7, pc}
 8007952:	bf00      	nop
 8007954:	20001480 	.word	0x20001480
 8007958:	08008094 	.word	0x08008094

0800795c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b082      	sub	sp, #8
 8007960:	af00      	add	r7, sp, #0
 8007962:	4603      	mov	r3, r0
 8007964:	6039      	str	r1, [r7, #0]
 8007966:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007968:	79fb      	ldrb	r3, [r7, #7]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d105      	bne.n	800797a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800796e:	683a      	ldr	r2, [r7, #0]
 8007970:	4907      	ldr	r1, [pc, #28]	; (8007990 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007972:	4808      	ldr	r0, [pc, #32]	; (8007994 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007974:	f7ff fdaa 	bl	80074cc <USBD_GetString>
 8007978:	e004      	b.n	8007984 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800797a:	683a      	ldr	r2, [r7, #0]
 800797c:	4904      	ldr	r1, [pc, #16]	; (8007990 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800797e:	4805      	ldr	r0, [pc, #20]	; (8007994 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007980:	f7ff fda4 	bl	80074cc <USBD_GetString>
  }
  return USBD_StrDesc;
 8007984:	4b02      	ldr	r3, [pc, #8]	; (8007990 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007986:	4618      	mov	r0, r3
 8007988:	3708      	adds	r7, #8
 800798a:	46bd      	mov	sp, r7
 800798c:	bd80      	pop	{r7, pc}
 800798e:	bf00      	nop
 8007990:	20001480 	.word	0x20001480
 8007994:	080080a0 	.word	0x080080a0

08007998 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b084      	sub	sp, #16
 800799c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800799e:	4b0f      	ldr	r3, [pc, #60]	; (80079dc <Get_SerialNum+0x44>)
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80079a4:	4b0e      	ldr	r3, [pc, #56]	; (80079e0 <Get_SerialNum+0x48>)
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80079aa:	4b0e      	ldr	r3, [pc, #56]	; (80079e4 <Get_SerialNum+0x4c>)
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80079b0:	68fa      	ldr	r2, [r7, #12]
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	4413      	add	r3, r2
 80079b6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d009      	beq.n	80079d2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80079be:	2208      	movs	r2, #8
 80079c0:	4909      	ldr	r1, [pc, #36]	; (80079e8 <Get_SerialNum+0x50>)
 80079c2:	68f8      	ldr	r0, [r7, #12]
 80079c4:	f000 f814 	bl	80079f0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80079c8:	2204      	movs	r2, #4
 80079ca:	4908      	ldr	r1, [pc, #32]	; (80079ec <Get_SerialNum+0x54>)
 80079cc:	68b8      	ldr	r0, [r7, #8]
 80079ce:	f000 f80f 	bl	80079f0 <IntToUnicode>
  }
}
 80079d2:	bf00      	nop
 80079d4:	3710      	adds	r7, #16
 80079d6:	46bd      	mov	sp, r7
 80079d8:	bd80      	pop	{r7, pc}
 80079da:	bf00      	nop
 80079dc:	1ff800d0 	.word	0x1ff800d0
 80079e0:	1ff800d4 	.word	0x1ff800d4
 80079e4:	1ff800d8 	.word	0x1ff800d8
 80079e8:	20000162 	.word	0x20000162
 80079ec:	20000172 	.word	0x20000172

080079f0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80079f0:	b480      	push	{r7}
 80079f2:	b087      	sub	sp, #28
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	60f8      	str	r0, [r7, #12]
 80079f8:	60b9      	str	r1, [r7, #8]
 80079fa:	4613      	mov	r3, r2
 80079fc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80079fe:	2300      	movs	r3, #0
 8007a00:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007a02:	2300      	movs	r3, #0
 8007a04:	75fb      	strb	r3, [r7, #23]
 8007a06:	e027      	b.n	8007a58 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	0f1b      	lsrs	r3, r3, #28
 8007a0c:	2b09      	cmp	r3, #9
 8007a0e:	d80b      	bhi.n	8007a28 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	0f1b      	lsrs	r3, r3, #28
 8007a14:	b2da      	uxtb	r2, r3
 8007a16:	7dfb      	ldrb	r3, [r7, #23]
 8007a18:	005b      	lsls	r3, r3, #1
 8007a1a:	4619      	mov	r1, r3
 8007a1c:	68bb      	ldr	r3, [r7, #8]
 8007a1e:	440b      	add	r3, r1
 8007a20:	3230      	adds	r2, #48	; 0x30
 8007a22:	b2d2      	uxtb	r2, r2
 8007a24:	701a      	strb	r2, [r3, #0]
 8007a26:	e00a      	b.n	8007a3e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	0f1b      	lsrs	r3, r3, #28
 8007a2c:	b2da      	uxtb	r2, r3
 8007a2e:	7dfb      	ldrb	r3, [r7, #23]
 8007a30:	005b      	lsls	r3, r3, #1
 8007a32:	4619      	mov	r1, r3
 8007a34:	68bb      	ldr	r3, [r7, #8]
 8007a36:	440b      	add	r3, r1
 8007a38:	3237      	adds	r2, #55	; 0x37
 8007a3a:	b2d2      	uxtb	r2, r2
 8007a3c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	011b      	lsls	r3, r3, #4
 8007a42:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007a44:	7dfb      	ldrb	r3, [r7, #23]
 8007a46:	005b      	lsls	r3, r3, #1
 8007a48:	3301      	adds	r3, #1
 8007a4a:	68ba      	ldr	r2, [r7, #8]
 8007a4c:	4413      	add	r3, r2
 8007a4e:	2200      	movs	r2, #0
 8007a50:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007a52:	7dfb      	ldrb	r3, [r7, #23]
 8007a54:	3301      	adds	r3, #1
 8007a56:	75fb      	strb	r3, [r7, #23]
 8007a58:	7dfa      	ldrb	r2, [r7, #23]
 8007a5a:	79fb      	ldrb	r3, [r7, #7]
 8007a5c:	429a      	cmp	r2, r3
 8007a5e:	d3d3      	bcc.n	8007a08 <IntToUnicode+0x18>
  }
}
 8007a60:	bf00      	nop
 8007a62:	bf00      	nop
 8007a64:	371c      	adds	r7, #28
 8007a66:	46bd      	mov	sp, r7
 8007a68:	bc80      	pop	{r7}
 8007a6a:	4770      	bx	lr

08007a6c <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a6c:	b480      	push	{r7}
 8007a6e:	b083      	sub	sp, #12
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
 8007a74:	460b      	mov	r3, r1
 8007a76:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN 6 */
  if (state == 1)
 8007a78:	78fb      	ldrb	r3, [r7, #3]
 8007a7a:	2b01      	cmp	r3, #1
 8007a7c:	d106      	bne.n	8007a8c <HAL_PCDEx_SetConnectionState+0x20>
  {
    /*  DP Pull-Down is Internal */
    __HAL_SYSCFG_USBPULLUP_ENABLE();
 8007a7e:	4b09      	ldr	r3, [pc, #36]	; (8007aa4 <HAL_PCDEx_SetConnectionState+0x38>)
 8007a80:	685b      	ldr	r3, [r3, #4]
 8007a82:	4a08      	ldr	r2, [pc, #32]	; (8007aa4 <HAL_PCDEx_SetConnectionState+0x38>)
 8007a84:	f043 0301 	orr.w	r3, r3, #1
 8007a88:	6053      	str	r3, [r2, #4]
  {
    /*  DP Pull-Down is Internal */
    __HAL_SYSCFG_USBPULLUP_DISABLE();
  }
  /* USER CODE END 6 */
}
 8007a8a:	e005      	b.n	8007a98 <HAL_PCDEx_SetConnectionState+0x2c>
    __HAL_SYSCFG_USBPULLUP_DISABLE();
 8007a8c:	4b05      	ldr	r3, [pc, #20]	; (8007aa4 <HAL_PCDEx_SetConnectionState+0x38>)
 8007a8e:	685b      	ldr	r3, [r3, #4]
 8007a90:	4a04      	ldr	r2, [pc, #16]	; (8007aa4 <HAL_PCDEx_SetConnectionState+0x38>)
 8007a92:	f023 0301 	bic.w	r3, r3, #1
 8007a96:	6053      	str	r3, [r2, #4]
}
 8007a98:	bf00      	nop
 8007a9a:	370c      	adds	r7, #12
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	bc80      	pop	{r7}
 8007aa0:	4770      	bx	lr
 8007aa2:	bf00      	nop
 8007aa4:	40010000 	.word	0x40010000

08007aa8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b084      	sub	sp, #16
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	4a0d      	ldr	r2, [pc, #52]	; (8007aec <HAL_PCD_MspInit+0x44>)
 8007ab6:	4293      	cmp	r3, r2
 8007ab8:	d113      	bne.n	8007ae2 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8007aba:	4b0d      	ldr	r3, [pc, #52]	; (8007af0 <HAL_PCD_MspInit+0x48>)
 8007abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007abe:	4a0c      	ldr	r2, [pc, #48]	; (8007af0 <HAL_PCD_MspInit+0x48>)
 8007ac0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007ac4:	6253      	str	r3, [r2, #36]	; 0x24
 8007ac6:	4b0a      	ldr	r3, [pc, #40]	; (8007af0 <HAL_PCD_MspInit+0x48>)
 8007ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007ace:	60fb      	str	r3, [r7, #12]
 8007ad0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	2100      	movs	r1, #0
 8007ad6:	2014      	movs	r0, #20
 8007ad8:	f7f9 f80d 	bl	8000af6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8007adc:	2014      	movs	r0, #20
 8007ade:	f7f9 f826 	bl	8000b2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8007ae2:	bf00      	nop
 8007ae4:	3710      	adds	r7, #16
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	bd80      	pop	{r7, pc}
 8007aea:	bf00      	nop
 8007aec:	40005c00 	.word	0x40005c00
 8007af0:	40023800 	.word	0x40023800

08007af4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b082      	sub	sp, #8
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8007b08:	4619      	mov	r1, r3
 8007b0a:	4610      	mov	r0, r2
 8007b0c:	f7fe fe23 	bl	8006756 <USBD_LL_SetupStage>
}
 8007b10:	bf00      	nop
 8007b12:	3708      	adds	r7, #8
 8007b14:	46bd      	mov	sp, r7
 8007b16:	bd80      	pop	{r7, pc}

08007b18 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b082      	sub	sp, #8
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
 8007b20:	460b      	mov	r3, r1
 8007b22:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8007b2a:	78fa      	ldrb	r2, [r7, #3]
 8007b2c:	6879      	ldr	r1, [r7, #4]
 8007b2e:	4613      	mov	r3, r2
 8007b30:	009b      	lsls	r3, r3, #2
 8007b32:	4413      	add	r3, r2
 8007b34:	00db      	lsls	r3, r3, #3
 8007b36:	440b      	add	r3, r1
 8007b38:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8007b3c:	681a      	ldr	r2, [r3, #0]
 8007b3e:	78fb      	ldrb	r3, [r7, #3]
 8007b40:	4619      	mov	r1, r3
 8007b42:	f7fe fe55 	bl	80067f0 <USBD_LL_DataOutStage>
}
 8007b46:	bf00      	nop
 8007b48:	3708      	adds	r7, #8
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	bd80      	pop	{r7, pc}

08007b4e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b4e:	b580      	push	{r7, lr}
 8007b50:	b082      	sub	sp, #8
 8007b52:	af00      	add	r7, sp, #0
 8007b54:	6078      	str	r0, [r7, #4]
 8007b56:	460b      	mov	r3, r1
 8007b58:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8007b60:	78fa      	ldrb	r2, [r7, #3]
 8007b62:	6879      	ldr	r1, [r7, #4]
 8007b64:	4613      	mov	r3, r2
 8007b66:	009b      	lsls	r3, r3, #2
 8007b68:	4413      	add	r3, r2
 8007b6a:	00db      	lsls	r3, r3, #3
 8007b6c:	440b      	add	r3, r1
 8007b6e:	333c      	adds	r3, #60	; 0x3c
 8007b70:	681a      	ldr	r2, [r3, #0]
 8007b72:	78fb      	ldrb	r3, [r7, #3]
 8007b74:	4619      	mov	r1, r3
 8007b76:	f7fe feac 	bl	80068d2 <USBD_LL_DataInStage>
}
 8007b7a:	bf00      	nop
 8007b7c:	3708      	adds	r7, #8
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	bd80      	pop	{r7, pc}

08007b82 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b82:	b580      	push	{r7, lr}
 8007b84:	b082      	sub	sp, #8
 8007b86:	af00      	add	r7, sp, #0
 8007b88:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007b90:	4618      	mov	r0, r3
 8007b92:	f7fe ffb7 	bl	8006b04 <USBD_LL_SOF>
}
 8007b96:	bf00      	nop
 8007b98:	3708      	adds	r7, #8
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	bd80      	pop	{r7, pc}

08007b9e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b9e:	b580      	push	{r7, lr}
 8007ba0:	b084      	sub	sp, #16
 8007ba2:	af00      	add	r7, sp, #0
 8007ba4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007ba6:	2301      	movs	r3, #1
 8007ba8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	689b      	ldr	r3, [r3, #8]
 8007bae:	2b02      	cmp	r3, #2
 8007bb0:	d001      	beq.n	8007bb6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007bb2:	f7f8 fd61 	bl	8000678 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007bbc:	7bfa      	ldrb	r2, [r7, #15]
 8007bbe:	4611      	mov	r1, r2
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	f7fe ff6c 	bl	8006a9e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007bcc:	4618      	mov	r0, r3
 8007bce:	f7fe ff25 	bl	8006a1c <USBD_LL_Reset>
}
 8007bd2:	bf00      	nop
 8007bd4:	3710      	adds	r7, #16
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	bd80      	pop	{r7, pc}
	...

08007bdc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b082      	sub	sp, #8
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007bea:	4618      	mov	r0, r3
 8007bec:	f7fe ff66 	bl	8006abc <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	699b      	ldr	r3, [r3, #24]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d005      	beq.n	8007c04 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007bf8:	4b04      	ldr	r3, [pc, #16]	; (8007c0c <HAL_PCD_SuspendCallback+0x30>)
 8007bfa:	691b      	ldr	r3, [r3, #16]
 8007bfc:	4a03      	ldr	r2, [pc, #12]	; (8007c0c <HAL_PCD_SuspendCallback+0x30>)
 8007bfe:	f043 0306 	orr.w	r3, r3, #6
 8007c02:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007c04:	bf00      	nop
 8007c06:	3708      	adds	r7, #8
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	bd80      	pop	{r7, pc}
 8007c0c:	e000ed00 	.word	0xe000ed00

08007c10 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b082      	sub	sp, #8
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007c1e:	4618      	mov	r0, r3
 8007c20:	f7fe ff60 	bl	8006ae4 <USBD_LL_Resume>
}
 8007c24:	bf00      	nop
 8007c26:	3708      	adds	r7, #8
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	bd80      	pop	{r7, pc}

08007c2c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b082      	sub	sp, #8
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8007c34:	4a28      	ldr	r2, [pc, #160]	; (8007cd8 <USBD_LL_Init+0xac>)
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	4a26      	ldr	r2, [pc, #152]	; (8007cd8 <USBD_LL_Init+0xac>)
 8007c40:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  hpcd_USB_FS.Instance = USB;
 8007c44:	4b24      	ldr	r3, [pc, #144]	; (8007cd8 <USBD_LL_Init+0xac>)
 8007c46:	4a25      	ldr	r2, [pc, #148]	; (8007cdc <USBD_LL_Init+0xb0>)
 8007c48:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8007c4a:	4b23      	ldr	r3, [pc, #140]	; (8007cd8 <USBD_LL_Init+0xac>)
 8007c4c:	2208      	movs	r2, #8
 8007c4e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8007c50:	4b21      	ldr	r3, [pc, #132]	; (8007cd8 <USBD_LL_Init+0xac>)
 8007c52:	2202      	movs	r2, #2
 8007c54:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007c56:	4b20      	ldr	r3, [pc, #128]	; (8007cd8 <USBD_LL_Init+0xac>)
 8007c58:	2202      	movs	r2, #2
 8007c5a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8007c5c:	4b1e      	ldr	r3, [pc, #120]	; (8007cd8 <USBD_LL_Init+0xac>)
 8007c5e:	2200      	movs	r2, #0
 8007c60:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8007c62:	4b1d      	ldr	r3, [pc, #116]	; (8007cd8 <USBD_LL_Init+0xac>)
 8007c64:	2200      	movs	r2, #0
 8007c66:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8007c68:	481b      	ldr	r0, [pc, #108]	; (8007cd8 <USBD_LL_Init+0xac>)
 8007c6a:	f7f9 f923 	bl	8000eb4 <HAL_PCD_Init>
 8007c6e:	4603      	mov	r3, r0
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d001      	beq.n	8007c78 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8007c74:	f7f8 fd00 	bl	8000678 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8007c7e:	2318      	movs	r3, #24
 8007c80:	2200      	movs	r2, #0
 8007c82:	2100      	movs	r1, #0
 8007c84:	f7fa fd00 	bl	8002688 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8007c8e:	2358      	movs	r3, #88	; 0x58
 8007c90:	2200      	movs	r2, #0
 8007c92:	2180      	movs	r1, #128	; 0x80
 8007c94:	f7fa fcf8 	bl	8002688 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8007c9e:	23c0      	movs	r3, #192	; 0xc0
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	2181      	movs	r1, #129	; 0x81
 8007ca4:	f7fa fcf0 	bl	8002688 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8007cae:	f44f 7388 	mov.w	r3, #272	; 0x110
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	2101      	movs	r1, #1
 8007cb6:	f7fa fce7 	bl	8002688 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8007cc0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	2182      	movs	r1, #130	; 0x82
 8007cc8:	f7fa fcde 	bl	8002688 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8007ccc:	2300      	movs	r3, #0
}
 8007cce:	4618      	mov	r0, r3
 8007cd0:	3708      	adds	r7, #8
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	bd80      	pop	{r7, pc}
 8007cd6:	bf00      	nop
 8007cd8:	20001680 	.word	0x20001680
 8007cdc:	40005c00 	.word	0x40005c00

08007ce0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b084      	sub	sp, #16
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ce8:	2300      	movs	r3, #0
 8007cea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007cec:	2300      	movs	r3, #0
 8007cee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	f7f9 f9ba 	bl	8001070 <HAL_PCD_Start>
 8007cfc:	4603      	mov	r3, r0
 8007cfe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d00:	7bfb      	ldrb	r3, [r7, #15]
 8007d02:	4618      	mov	r0, r3
 8007d04:	f000 f944 	bl	8007f90 <USBD_Get_USB_Status>
 8007d08:	4603      	mov	r3, r0
 8007d0a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007d0c:	7bbb      	ldrb	r3, [r7, #14]
}
 8007d0e:	4618      	mov	r0, r3
 8007d10:	3710      	adds	r7, #16
 8007d12:	46bd      	mov	sp, r7
 8007d14:	bd80      	pop	{r7, pc}

08007d16 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007d16:	b580      	push	{r7, lr}
 8007d18:	b084      	sub	sp, #16
 8007d1a:	af00      	add	r7, sp, #0
 8007d1c:	6078      	str	r0, [r7, #4]
 8007d1e:	4608      	mov	r0, r1
 8007d20:	4611      	mov	r1, r2
 8007d22:	461a      	mov	r2, r3
 8007d24:	4603      	mov	r3, r0
 8007d26:	70fb      	strb	r3, [r7, #3]
 8007d28:	460b      	mov	r3, r1
 8007d2a:	70bb      	strb	r3, [r7, #2]
 8007d2c:	4613      	mov	r3, r2
 8007d2e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d30:	2300      	movs	r3, #0
 8007d32:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d34:	2300      	movs	r3, #0
 8007d36:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8007d3e:	78bb      	ldrb	r3, [r7, #2]
 8007d40:	883a      	ldrh	r2, [r7, #0]
 8007d42:	78f9      	ldrb	r1, [r7, #3]
 8007d44:	f7f9 fad6 	bl	80012f4 <HAL_PCD_EP_Open>
 8007d48:	4603      	mov	r3, r0
 8007d4a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d4c:	7bfb      	ldrb	r3, [r7, #15]
 8007d4e:	4618      	mov	r0, r3
 8007d50:	f000 f91e 	bl	8007f90 <USBD_Get_USB_Status>
 8007d54:	4603      	mov	r3, r0
 8007d56:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007d58:	7bbb      	ldrb	r3, [r7, #14]
}
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	3710      	adds	r7, #16
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	bd80      	pop	{r7, pc}

08007d62 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007d62:	b580      	push	{r7, lr}
 8007d64:	b084      	sub	sp, #16
 8007d66:	af00      	add	r7, sp, #0
 8007d68:	6078      	str	r0, [r7, #4]
 8007d6a:	460b      	mov	r3, r1
 8007d6c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d6e:	2300      	movs	r3, #0
 8007d70:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d72:	2300      	movs	r3, #0
 8007d74:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8007d7c:	78fa      	ldrb	r2, [r7, #3]
 8007d7e:	4611      	mov	r1, r2
 8007d80:	4618      	mov	r0, r3
 8007d82:	f7f9 fb1d 	bl	80013c0 <HAL_PCD_EP_Close>
 8007d86:	4603      	mov	r3, r0
 8007d88:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d8a:	7bfb      	ldrb	r3, [r7, #15]
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	f000 f8ff 	bl	8007f90 <USBD_Get_USB_Status>
 8007d92:	4603      	mov	r3, r0
 8007d94:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007d96:	7bbb      	ldrb	r3, [r7, #14]
}
 8007d98:	4618      	mov	r0, r3
 8007d9a:	3710      	adds	r7, #16
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	bd80      	pop	{r7, pc}

08007da0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007da0:	b580      	push	{r7, lr}
 8007da2:	b084      	sub	sp, #16
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
 8007da8:	460b      	mov	r3, r1
 8007daa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007dac:	2300      	movs	r3, #0
 8007dae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007db0:	2300      	movs	r3, #0
 8007db2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8007dba:	78fa      	ldrb	r2, [r7, #3]
 8007dbc:	4611      	mov	r1, r2
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	f7f9 fbdd 	bl	800157e <HAL_PCD_EP_SetStall>
 8007dc4:	4603      	mov	r3, r0
 8007dc6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007dc8:	7bfb      	ldrb	r3, [r7, #15]
 8007dca:	4618      	mov	r0, r3
 8007dcc:	f000 f8e0 	bl	8007f90 <USBD_Get_USB_Status>
 8007dd0:	4603      	mov	r3, r0
 8007dd2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007dd4:	7bbb      	ldrb	r3, [r7, #14]
}
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	3710      	adds	r7, #16
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	bd80      	pop	{r7, pc}

08007dde <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007dde:	b580      	push	{r7, lr}
 8007de0:	b084      	sub	sp, #16
 8007de2:	af00      	add	r7, sp, #0
 8007de4:	6078      	str	r0, [r7, #4]
 8007de6:	460b      	mov	r3, r1
 8007de8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007dea:	2300      	movs	r3, #0
 8007dec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007dee:	2300      	movs	r3, #0
 8007df0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8007df8:	78fa      	ldrb	r2, [r7, #3]
 8007dfa:	4611      	mov	r1, r2
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	f7f9 fc10 	bl	8001622 <HAL_PCD_EP_ClrStall>
 8007e02:	4603      	mov	r3, r0
 8007e04:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e06:	7bfb      	ldrb	r3, [r7, #15]
 8007e08:	4618      	mov	r0, r3
 8007e0a:	f000 f8c1 	bl	8007f90 <USBD_Get_USB_Status>
 8007e0e:	4603      	mov	r3, r0
 8007e10:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007e12:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e14:	4618      	mov	r0, r3
 8007e16:	3710      	adds	r7, #16
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	bd80      	pop	{r7, pc}

08007e1c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007e1c:	b480      	push	{r7}
 8007e1e:	b085      	sub	sp, #20
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
 8007e24:	460b      	mov	r3, r1
 8007e26:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8007e2e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007e30:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	da0c      	bge.n	8007e52 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007e38:	78fb      	ldrb	r3, [r7, #3]
 8007e3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e3e:	68f9      	ldr	r1, [r7, #12]
 8007e40:	1c5a      	adds	r2, r3, #1
 8007e42:	4613      	mov	r3, r2
 8007e44:	009b      	lsls	r3, r3, #2
 8007e46:	4413      	add	r3, r2
 8007e48:	00db      	lsls	r3, r3, #3
 8007e4a:	440b      	add	r3, r1
 8007e4c:	3302      	adds	r3, #2
 8007e4e:	781b      	ldrb	r3, [r3, #0]
 8007e50:	e00b      	b.n	8007e6a <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007e52:	78fb      	ldrb	r3, [r7, #3]
 8007e54:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007e58:	68f9      	ldr	r1, [r7, #12]
 8007e5a:	4613      	mov	r3, r2
 8007e5c:	009b      	lsls	r3, r3, #2
 8007e5e:	4413      	add	r3, r2
 8007e60:	00db      	lsls	r3, r3, #3
 8007e62:	440b      	add	r3, r1
 8007e64:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8007e68:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	3714      	adds	r7, #20
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	bc80      	pop	{r7}
 8007e72:	4770      	bx	lr

08007e74 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b084      	sub	sp, #16
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
 8007e7c:	460b      	mov	r3, r1
 8007e7e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e80:	2300      	movs	r3, #0
 8007e82:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e84:	2300      	movs	r3, #0
 8007e86:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8007e8e:	78fa      	ldrb	r2, [r7, #3]
 8007e90:	4611      	mov	r1, r2
 8007e92:	4618      	mov	r0, r3
 8007e94:	f7f9 fa09 	bl	80012aa <HAL_PCD_SetAddress>
 8007e98:	4603      	mov	r3, r0
 8007e9a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e9c:	7bfb      	ldrb	r3, [r7, #15]
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	f000 f876 	bl	8007f90 <USBD_Get_USB_Status>
 8007ea4:	4603      	mov	r3, r0
 8007ea6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007ea8:	7bbb      	ldrb	r3, [r7, #14]
}
 8007eaa:	4618      	mov	r0, r3
 8007eac:	3710      	adds	r7, #16
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	bd80      	pop	{r7, pc}

08007eb2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007eb2:	b580      	push	{r7, lr}
 8007eb4:	b086      	sub	sp, #24
 8007eb6:	af00      	add	r7, sp, #0
 8007eb8:	60f8      	str	r0, [r7, #12]
 8007eba:	607a      	str	r2, [r7, #4]
 8007ebc:	461a      	mov	r2, r3
 8007ebe:	460b      	mov	r3, r1
 8007ec0:	72fb      	strb	r3, [r7, #11]
 8007ec2:	4613      	mov	r3, r2
 8007ec4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007eca:	2300      	movs	r3, #0
 8007ecc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8007ed4:	893b      	ldrh	r3, [r7, #8]
 8007ed6:	7af9      	ldrb	r1, [r7, #11]
 8007ed8:	687a      	ldr	r2, [r7, #4]
 8007eda:	f7f9 fb0d 	bl	80014f8 <HAL_PCD_EP_Transmit>
 8007ede:	4603      	mov	r3, r0
 8007ee0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ee2:	7dfb      	ldrb	r3, [r7, #23]
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	f000 f853 	bl	8007f90 <USBD_Get_USB_Status>
 8007eea:	4603      	mov	r3, r0
 8007eec:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007eee:	7dbb      	ldrb	r3, [r7, #22]
}
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	3718      	adds	r7, #24
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	bd80      	pop	{r7, pc}

08007ef8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b086      	sub	sp, #24
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	60f8      	str	r0, [r7, #12]
 8007f00:	607a      	str	r2, [r7, #4]
 8007f02:	461a      	mov	r2, r3
 8007f04:	460b      	mov	r3, r1
 8007f06:	72fb      	strb	r3, [r7, #11]
 8007f08:	4613      	mov	r3, r2
 8007f0a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f10:	2300      	movs	r3, #0
 8007f12:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8007f1a:	893b      	ldrh	r3, [r7, #8]
 8007f1c:	7af9      	ldrb	r1, [r7, #11]
 8007f1e:	687a      	ldr	r2, [r7, #4]
 8007f20:	f7f9 fa96 	bl	8001450 <HAL_PCD_EP_Receive>
 8007f24:	4603      	mov	r3, r0
 8007f26:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f28:	7dfb      	ldrb	r3, [r7, #23]
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	f000 f830 	bl	8007f90 <USBD_Get_USB_Status>
 8007f30:	4603      	mov	r3, r0
 8007f32:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007f34:	7dbb      	ldrb	r3, [r7, #22]
}
 8007f36:	4618      	mov	r0, r3
 8007f38:	3718      	adds	r7, #24
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	bd80      	pop	{r7, pc}

08007f3e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007f3e:	b580      	push	{r7, lr}
 8007f40:	b082      	sub	sp, #8
 8007f42:	af00      	add	r7, sp, #0
 8007f44:	6078      	str	r0, [r7, #4]
 8007f46:	460b      	mov	r3, r1
 8007f48:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8007f50:	78fa      	ldrb	r2, [r7, #3]
 8007f52:	4611      	mov	r1, r2
 8007f54:	4618      	mov	r0, r3
 8007f56:	f7f9 fab8 	bl	80014ca <HAL_PCD_EP_GetRxCount>
 8007f5a:	4603      	mov	r3, r0
}
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	3708      	adds	r7, #8
 8007f60:	46bd      	mov	sp, r7
 8007f62:	bd80      	pop	{r7, pc}

08007f64 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007f64:	b480      	push	{r7}
 8007f66:	b083      	sub	sp, #12
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007f6c:	4b02      	ldr	r3, [pc, #8]	; (8007f78 <USBD_static_malloc+0x14>)
}
 8007f6e:	4618      	mov	r0, r3
 8007f70:	370c      	adds	r7, #12
 8007f72:	46bd      	mov	sp, r7
 8007f74:	bc80      	pop	{r7}
 8007f76:	4770      	bx	lr
 8007f78:	2000196c 	.word	0x2000196c

08007f7c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007f7c:	b480      	push	{r7}
 8007f7e:	b083      	sub	sp, #12
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]

}
 8007f84:	bf00      	nop
 8007f86:	370c      	adds	r7, #12
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	bc80      	pop	{r7}
 8007f8c:	4770      	bx	lr
	...

08007f90 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007f90:	b480      	push	{r7}
 8007f92:	b085      	sub	sp, #20
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	4603      	mov	r3, r0
 8007f98:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007f9e:	79fb      	ldrb	r3, [r7, #7]
 8007fa0:	2b03      	cmp	r3, #3
 8007fa2:	d817      	bhi.n	8007fd4 <USBD_Get_USB_Status+0x44>
 8007fa4:	a201      	add	r2, pc, #4	; (adr r2, 8007fac <USBD_Get_USB_Status+0x1c>)
 8007fa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007faa:	bf00      	nop
 8007fac:	08007fbd 	.word	0x08007fbd
 8007fb0:	08007fc3 	.word	0x08007fc3
 8007fb4:	08007fc9 	.word	0x08007fc9
 8007fb8:	08007fcf 	.word	0x08007fcf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	73fb      	strb	r3, [r7, #15]
    break;
 8007fc0:	e00b      	b.n	8007fda <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007fc2:	2302      	movs	r3, #2
 8007fc4:	73fb      	strb	r3, [r7, #15]
    break;
 8007fc6:	e008      	b.n	8007fda <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007fc8:	2301      	movs	r3, #1
 8007fca:	73fb      	strb	r3, [r7, #15]
    break;
 8007fcc:	e005      	b.n	8007fda <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007fce:	2302      	movs	r3, #2
 8007fd0:	73fb      	strb	r3, [r7, #15]
    break;
 8007fd2:	e002      	b.n	8007fda <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007fd4:	2302      	movs	r3, #2
 8007fd6:	73fb      	strb	r3, [r7, #15]
    break;
 8007fd8:	bf00      	nop
  }
  return usb_status;
 8007fda:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fdc:	4618      	mov	r0, r3
 8007fde:	3714      	adds	r7, #20
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	bc80      	pop	{r7}
 8007fe4:	4770      	bx	lr
 8007fe6:	bf00      	nop

08007fe8 <__libc_init_array>:
 8007fe8:	b570      	push	{r4, r5, r6, lr}
 8007fea:	2600      	movs	r6, #0
 8007fec:	4d0c      	ldr	r5, [pc, #48]	; (8008020 <__libc_init_array+0x38>)
 8007fee:	4c0d      	ldr	r4, [pc, #52]	; (8008024 <__libc_init_array+0x3c>)
 8007ff0:	1b64      	subs	r4, r4, r5
 8007ff2:	10a4      	asrs	r4, r4, #2
 8007ff4:	42a6      	cmp	r6, r4
 8007ff6:	d109      	bne.n	800800c <__libc_init_array+0x24>
 8007ff8:	f000 f822 	bl	8008040 <_init>
 8007ffc:	2600      	movs	r6, #0
 8007ffe:	4d0a      	ldr	r5, [pc, #40]	; (8008028 <__libc_init_array+0x40>)
 8008000:	4c0a      	ldr	r4, [pc, #40]	; (800802c <__libc_init_array+0x44>)
 8008002:	1b64      	subs	r4, r4, r5
 8008004:	10a4      	asrs	r4, r4, #2
 8008006:	42a6      	cmp	r6, r4
 8008008:	d105      	bne.n	8008016 <__libc_init_array+0x2e>
 800800a:	bd70      	pop	{r4, r5, r6, pc}
 800800c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008010:	4798      	blx	r3
 8008012:	3601      	adds	r6, #1
 8008014:	e7ee      	b.n	8007ff4 <__libc_init_array+0xc>
 8008016:	f855 3b04 	ldr.w	r3, [r5], #4
 800801a:	4798      	blx	r3
 800801c:	3601      	adds	r6, #1
 800801e:	e7f2      	b.n	8008006 <__libc_init_array+0x1e>
 8008020:	080080dc 	.word	0x080080dc
 8008024:	080080dc 	.word	0x080080dc
 8008028:	080080dc 	.word	0x080080dc
 800802c:	080080e0 	.word	0x080080e0

08008030 <memset>:
 8008030:	4603      	mov	r3, r0
 8008032:	4402      	add	r2, r0
 8008034:	4293      	cmp	r3, r2
 8008036:	d100      	bne.n	800803a <memset+0xa>
 8008038:	4770      	bx	lr
 800803a:	f803 1b01 	strb.w	r1, [r3], #1
 800803e:	e7f9      	b.n	8008034 <memset+0x4>

08008040 <_init>:
 8008040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008042:	bf00      	nop
 8008044:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008046:	bc08      	pop	{r3}
 8008048:	469e      	mov	lr, r3
 800804a:	4770      	bx	lr

0800804c <_fini>:
 800804c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800804e:	bf00      	nop
 8008050:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008052:	bc08      	pop	{r3}
 8008054:	469e      	mov	lr, r3
 8008056:	4770      	bx	lr
